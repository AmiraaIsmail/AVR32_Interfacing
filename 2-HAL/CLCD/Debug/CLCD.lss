
CLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003360  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003360  000033d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001e9c  00000000  00000000  000033dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b44  00000000  00000000  00005278  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000060ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000080f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000091f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000a174  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000a2f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000a5b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000ae44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 58 19 	call	0x32b0	; 0x32b0 <main>
      7a:	0c 94 ae 19 	jmp	0x335c	; 0x335c <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 77 19 	jmp	0x32ee	; 0x32ee <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 93 19 	jmp	0x3326	; 0x3326 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7f 19 	jmp	0x32fe	; 0x32fe <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 83 19 	jmp	0x3306	; 0x3306 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 87 19 	jmp	0x330e	; 0x330e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 a3 19 	jmp	0x3346	; 0x3346 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "util/delay.h"


void CLCD_voidSendCommand(u8 CLCD_u8Command)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	e9 97       	sbiw	r28, 0x39	; 57
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	f8 94       	cli
     c9c:	de bf       	out	0x3e, r29	; 62
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	cd bf       	out	0x3d, r28	; 61
     ca2:	89 af       	std	Y+57, r24	; 0x39
	// RW low
	//DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
	// RS low
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	63 e0       	ldi	r22, 0x03	; 3
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	// EN high
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	62 e0       	ldi	r22, 0x02	; 2
     cb2:	41 e0       	ldi	r20, 0x01	; 1
     cb4:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>

#if	(LCD_MODE	==	LCD_4BIT)
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Command,4)));
     cb8:	89 ad       	ldd	r24, Y+57	; 0x39
     cba:	82 95       	swap	r24
     cbc:	8f 70       	andi	r24, 0x0F	; 15
     cbe:	98 2f       	mov	r25, r24
     cc0:	91 70       	andi	r25, 0x01	; 1
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	49 2f       	mov	r20, r25
     cc8:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Command,5)));
     ccc:	89 ad       	ldd	r24, Y+57	; 0x39
     cce:	82 95       	swap	r24
     cd0:	86 95       	lsr	r24
     cd2:	87 70       	andi	r24, 0x07	; 7
     cd4:	98 2f       	mov	r25, r24
     cd6:	91 70       	andi	r25, 0x01	; 1
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	49 2f       	mov	r20, r25
     cde:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Command,6)));
     ce2:	89 ad       	ldd	r24, Y+57	; 0x39
     ce4:	82 95       	swap	r24
     ce6:	86 95       	lsr	r24
     ce8:	86 95       	lsr	r24
     cea:	83 70       	andi	r24, 0x03	; 3
     cec:	98 2f       	mov	r25, r24
     cee:	91 70       	andi	r25, 0x01	; 1
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	62 e0       	ldi	r22, 0x02	; 2
     cf4:	49 2f       	mov	r20, r25
     cf6:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Command,7)));
     cfa:	89 ad       	ldd	r24, Y+57	; 0x39
     cfc:	98 2f       	mov	r25, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	99 27       	eor	r25, r25
     d02:	99 1f       	adc	r25, r25
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	64 e0       	ldi	r22, 0x04	; 4
     d08:	49 2f       	mov	r20, r25
     d0a:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	62 e0       	ldi	r22, 0x02	; 2
     d12:	41 e0       	ldi	r20, 0x01	; 1
     d14:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a0 e8       	ldi	r26, 0x80	; 128
     d1e:	bf e3       	ldi	r27, 0x3F	; 63
     d20:	8d ab       	std	Y+53, r24	; 0x35
     d22:	9e ab       	std	Y+54, r25	; 0x36
     d24:	af ab       	std	Y+55, r26	; 0x37
     d26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d28:	6d a9       	ldd	r22, Y+53	; 0x35
     d2a:	7e a9       	ldd	r23, Y+54	; 0x36
     d2c:	8f a9       	ldd	r24, Y+55	; 0x37
     d2e:	98 ad       	ldd	r25, Y+56	; 0x38
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	4a ef       	ldi	r20, 0xFA	; 250
     d36:	54 e4       	ldi	r21, 0x44	; 68
     d38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	89 ab       	std	Y+49, r24	; 0x31
     d42:	9a ab       	std	Y+50, r25	; 0x32
     d44:	ab ab       	std	Y+51, r26	; 0x33
     d46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     d48:	69 a9       	ldd	r22, Y+49	; 0x31
     d4a:	7a a9       	ldd	r23, Y+50	; 0x32
     d4c:	8b a9       	ldd	r24, Y+51	; 0x33
     d4e:	9c a9       	ldd	r25, Y+52	; 0x34
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	40 e8       	ldi	r20, 0x80	; 128
     d56:	5f e3       	ldi	r21, 0x3F	; 63
     d58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	2c f4       	brge	.+10     	; 0xd6a <CLCD_voidSendCommand+0xdc>
		__ticks = 1;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	98 ab       	std	Y+48, r25	; 0x30
     d66:	8f a7       	std	Y+47, r24	; 0x2f
     d68:	3f c0       	rjmp	.+126    	; 0xde8 <CLCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
     d6a:	69 a9       	ldd	r22, Y+49	; 0x31
     d6c:	7a a9       	ldd	r23, Y+50	; 0x32
     d6e:	8b a9       	ldd	r24, Y+51	; 0x33
     d70:	9c a9       	ldd	r25, Y+52	; 0x34
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	57 e4       	ldi	r21, 0x47	; 71
     d7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     d7e:	18 16       	cp	r1, r24
     d80:	4c f5       	brge	.+82     	; 0xdd4 <CLCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d82:	6d a9       	ldd	r22, Y+53	; 0x35
     d84:	7e a9       	ldd	r23, Y+54	; 0x36
     d86:	8f a9       	ldd	r24, Y+55	; 0x37
     d88:	98 ad       	ldd	r25, Y+56	; 0x38
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 e2       	ldi	r20, 0x20	; 32
     d90:	51 e4       	ldi	r21, 0x41	; 65
     d92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	bc 01       	movw	r22, r24
     d9c:	cd 01       	movw	r24, r26
     d9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     da2:	dc 01       	movw	r26, r24
     da4:	cb 01       	movw	r24, r22
     da6:	98 ab       	std	Y+48, r25	; 0x30
     da8:	8f a7       	std	Y+47, r24	; 0x2f
     daa:	0f c0       	rjmp	.+30     	; 0xdca <CLCD_voidSendCommand+0x13c>
     dac:	88 ec       	ldi	r24, 0xC8	; 200
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	9e a7       	std	Y+46, r25	; 0x2e
     db2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db4:	8d a5       	ldd	r24, Y+45	; 0x2d
     db6:	9e a5       	ldd	r25, Y+46	; 0x2e
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <CLCD_voidSendCommand+0x12a>
     dbc:	9e a7       	std	Y+46, r25	; 0x2e
     dbe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dc0:	8f a5       	ldd	r24, Y+47	; 0x2f
     dc2:	98 a9       	ldd	r25, Y+48	; 0x30
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	98 ab       	std	Y+48, r25	; 0x30
     dc8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dca:	8f a5       	ldd	r24, Y+47	; 0x2f
     dcc:	98 a9       	ldd	r25, Y+48	; 0x30
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	69 f7       	brne	.-38     	; 0xdac <CLCD_voidSendCommand+0x11e>
     dd2:	14 c0       	rjmp	.+40     	; 0xdfc <CLCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd4:	69 a9       	ldd	r22, Y+49	; 0x31
     dd6:	7a a9       	ldd	r23, Y+50	; 0x32
     dd8:	8b a9       	ldd	r24, Y+51	; 0x33
     dda:	9c a9       	ldd	r25, Y+52	; 0x34
     ddc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	98 ab       	std	Y+48, r25	; 0x30
     de6:	8f a7       	std	Y+47, r24	; 0x2f
     de8:	8f a5       	ldd	r24, Y+47	; 0x2f
     dea:	98 a9       	ldd	r25, Y+48	; 0x30
     dec:	9c a7       	std	Y+44, r25	; 0x2c
     dee:	8b a7       	std	Y+43, r24	; 0x2b
     df0:	8b a5       	ldd	r24, Y+43	; 0x2b
     df2:	9c a5       	ldd	r25, Y+44	; 0x2c
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <CLCD_voidSendCommand+0x166>
     df8:	9c a7       	std	Y+44, r25	; 0x2c
     dfa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	62 e0       	ldi	r22, 0x02	; 2
     e00:	40 e0       	ldi	r20, 0x00	; 0
     e02:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 e8       	ldi	r26, 0x80	; 128
     e0c:	bf e3       	ldi	r27, 0x3F	; 63
     e0e:	8f a3       	std	Y+39, r24	; 0x27
     e10:	98 a7       	std	Y+40, r25	; 0x28
     e12:	a9 a7       	std	Y+41, r26	; 0x29
     e14:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e16:	6f a1       	ldd	r22, Y+39	; 0x27
     e18:	78 a5       	ldd	r23, Y+40	; 0x28
     e1a:	89 a5       	ldd	r24, Y+41	; 0x29
     e1c:	9a a5       	ldd	r25, Y+42	; 0x2a
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	4a ef       	ldi	r20, 0xFA	; 250
     e24:	54 e4       	ldi	r21, 0x44	; 68
     e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	8b a3       	std	Y+35, r24	; 0x23
     e30:	9c a3       	std	Y+36, r25	; 0x24
     e32:	ad a3       	std	Y+37, r26	; 0x25
     e34:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e36:	6b a1       	ldd	r22, Y+35	; 0x23
     e38:	7c a1       	ldd	r23, Y+36	; 0x24
     e3a:	8d a1       	ldd	r24, Y+37	; 0x25
     e3c:	9e a1       	ldd	r25, Y+38	; 0x26
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e8       	ldi	r20, 0x80	; 128
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	2c f4       	brge	.+10     	; 0xe58 <CLCD_voidSendCommand+0x1ca>
		__ticks = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	9a a3       	std	Y+34, r25	; 0x22
     e54:	89 a3       	std	Y+33, r24	; 0x21
     e56:	3f c0       	rjmp	.+126    	; 0xed6 <CLCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
     e58:	6b a1       	ldd	r22, Y+35	; 0x23
     e5a:	7c a1       	ldd	r23, Y+36	; 0x24
     e5c:	8d a1       	ldd	r24, Y+37	; 0x25
     e5e:	9e a1       	ldd	r25, Y+38	; 0x26
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	3f ef       	ldi	r19, 0xFF	; 255
     e64:	4f e7       	ldi	r20, 0x7F	; 127
     e66:	57 e4       	ldi	r21, 0x47	; 71
     e68:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     e6c:	18 16       	cp	r1, r24
     e6e:	4c f5       	brge	.+82     	; 0xec2 <CLCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	6f a1       	ldd	r22, Y+39	; 0x27
     e72:	78 a5       	ldd	r23, Y+40	; 0x28
     e74:	89 a5       	ldd	r24, Y+41	; 0x29
     e76:	9a a5       	ldd	r25, Y+42	; 0x2a
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e2       	ldi	r20, 0x20	; 32
     e7e:	51 e4       	ldi	r21, 0x41	; 65
     e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	bc 01       	movw	r22, r24
     e8a:	cd 01       	movw	r24, r26
     e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e90:	dc 01       	movw	r26, r24
     e92:	cb 01       	movw	r24, r22
     e94:	9a a3       	std	Y+34, r25	; 0x22
     e96:	89 a3       	std	Y+33, r24	; 0x21
     e98:	0f c0       	rjmp	.+30     	; 0xeb8 <CLCD_voidSendCommand+0x22a>
     e9a:	88 ec       	ldi	r24, 0xC8	; 200
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	98 a3       	std	Y+32, r25	; 0x20
     ea0:	8f 8f       	std	Y+31, r24	; 0x1f
     ea2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ea4:	98 a1       	ldd	r25, Y+32	; 0x20
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	f1 f7       	brne	.-4      	; 0xea6 <CLCD_voidSendCommand+0x218>
     eaa:	98 a3       	std	Y+32, r25	; 0x20
     eac:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	89 a1       	ldd	r24, Y+33	; 0x21
     eb0:	9a a1       	ldd	r25, Y+34	; 0x22
     eb2:	01 97       	sbiw	r24, 0x01	; 1
     eb4:	9a a3       	std	Y+34, r25	; 0x22
     eb6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eb8:	89 a1       	ldd	r24, Y+33	; 0x21
     eba:	9a a1       	ldd	r25, Y+34	; 0x22
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	69 f7       	brne	.-38     	; 0xe9a <CLCD_voidSendCommand+0x20c>
     ec0:	14 c0       	rjmp	.+40     	; 0xeea <CLCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ec2:	6b a1       	ldd	r22, Y+35	; 0x23
     ec4:	7c a1       	ldd	r23, Y+36	; 0x24
     ec6:	8d a1       	ldd	r24, Y+37	; 0x25
     ec8:	9e a1       	ldd	r25, Y+38	; 0x26
     eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9a a3       	std	Y+34, r25	; 0x22
     ed4:	89 a3       	std	Y+33, r24	; 0x21
     ed6:	89 a1       	ldd	r24, Y+33	; 0x21
     ed8:	9a a1       	ldd	r25, Y+34	; 0x22
     eda:	9e 8f       	std	Y+30, r25	; 0x1e
     edc:	8d 8f       	std	Y+29, r24	; 0x1d
     ede:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ee0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <CLCD_voidSendCommand+0x254>
     ee6:	9e 8f       	std	Y+30, r25	; 0x1e
     ee8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Command,0)));
     eea:	89 ad       	ldd	r24, Y+57	; 0x39
     eec:	98 2f       	mov	r25, r24
     eee:	91 70       	andi	r25, 0x01	; 1
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	49 2f       	mov	r20, r25
     ef6:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Command,1)));
     efa:	89 ad       	ldd	r24, Y+57	; 0x39
     efc:	86 95       	lsr	r24
     efe:	98 2f       	mov	r25, r24
     f00:	91 70       	andi	r25, 0x01	; 1
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	49 2f       	mov	r20, r25
     f08:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Command,2)));
     f0c:	89 ad       	ldd	r24, Y+57	; 0x39
     f0e:	86 95       	lsr	r24
     f10:	86 95       	lsr	r24
     f12:	98 2f       	mov	r25, r24
     f14:	91 70       	andi	r25, 0x01	; 1
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	49 2f       	mov	r20, r25
     f1c:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Command,3)));
     f20:	89 ad       	ldd	r24, Y+57	; 0x39
     f22:	86 95       	lsr	r24
     f24:	86 95       	lsr	r24
     f26:	86 95       	lsr	r24
     f28:	98 2f       	mov	r25, r24
     f2a:	91 70       	andi	r25, 0x01	; 1
     f2c:	81 e0       	ldi	r24, 0x01	; 1
     f2e:	64 e0       	ldi	r22, 0x04	; 4
     f30:	49 2f       	mov	r20, r25
     f32:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	62 e0       	ldi	r22, 0x02	; 2
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	a0 e8       	ldi	r26, 0x80	; 128
     f46:	bf e3       	ldi	r27, 0x3F	; 63
     f48:	89 8f       	std	Y+25, r24	; 0x19
     f4a:	9a 8f       	std	Y+26, r25	; 0x1a
     f4c:	ab 8f       	std	Y+27, r26	; 0x1b
     f4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f50:	69 8d       	ldd	r22, Y+25	; 0x19
     f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	4a ef       	ldi	r20, 0xFA	; 250
     f5e:	54 e4       	ldi	r21, 0x44	; 68
     f60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f64:	dc 01       	movw	r26, r24
     f66:	cb 01       	movw	r24, r22
     f68:	8d 8b       	std	Y+21, r24	; 0x15
     f6a:	9e 8b       	std	Y+22, r25	; 0x16
     f6c:	af 8b       	std	Y+23, r26	; 0x17
     f6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     f70:	6d 89       	ldd	r22, Y+21	; 0x15
     f72:	7e 89       	ldd	r23, Y+22	; 0x16
     f74:	8f 89       	ldd	r24, Y+23	; 0x17
     f76:	98 8d       	ldd	r25, Y+24	; 0x18
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e8       	ldi	r20, 0x80	; 128
     f7e:	5f e3       	ldi	r21, 0x3F	; 63
     f80:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     f84:	88 23       	and	r24, r24
     f86:	2c f4       	brge	.+10     	; 0xf92 <CLCD_voidSendCommand+0x304>
		__ticks = 1;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 8b       	std	Y+20, r25	; 0x14
     f8e:	8b 8b       	std	Y+19, r24	; 0x13
     f90:	3f c0       	rjmp	.+126    	; 0x1010 <CLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
     f92:	6d 89       	ldd	r22, Y+21	; 0x15
     f94:	7e 89       	ldd	r23, Y+22	; 0x16
     f96:	8f 89       	ldd	r24, Y+23	; 0x17
     f98:	98 8d       	ldd	r25, Y+24	; 0x18
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	3f ef       	ldi	r19, 0xFF	; 255
     f9e:	4f e7       	ldi	r20, 0x7F	; 127
     fa0:	57 e4       	ldi	r21, 0x47	; 71
     fa2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	4c f5       	brge	.+82     	; 0xffc <CLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     faa:	69 8d       	ldd	r22, Y+25	; 0x19
     fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e2       	ldi	r20, 0x20	; 32
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fbe:	dc 01       	movw	r26, r24
     fc0:	cb 01       	movw	r24, r22
     fc2:	bc 01       	movw	r22, r24
     fc4:	cd 01       	movw	r24, r26
     fc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	9c 8b       	std	Y+20, r25	; 0x14
     fd0:	8b 8b       	std	Y+19, r24	; 0x13
     fd2:	0f c0       	rjmp	.+30     	; 0xff2 <CLCD_voidSendCommand+0x364>
     fd4:	88 ec       	ldi	r24, 0xC8	; 200
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	9a 8b       	std	Y+18, r25	; 0x12
     fda:	89 8b       	std	Y+17, r24	; 0x11
     fdc:	89 89       	ldd	r24, Y+17	; 0x11
     fde:	9a 89       	ldd	r25, Y+18	; 0x12
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <CLCD_voidSendCommand+0x352>
     fe4:	9a 8b       	std	Y+18, r25	; 0x12
     fe6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fe8:	8b 89       	ldd	r24, Y+19	; 0x13
     fea:	9c 89       	ldd	r25, Y+20	; 0x14
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	9c 8b       	std	Y+20, r25	; 0x14
     ff0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff2:	8b 89       	ldd	r24, Y+19	; 0x13
     ff4:	9c 89       	ldd	r25, Y+20	; 0x14
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	69 f7       	brne	.-38     	; 0xfd4 <CLCD_voidSendCommand+0x346>
     ffa:	14 c0       	rjmp	.+40     	; 0x1024 <CLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffc:	6d 89       	ldd	r22, Y+21	; 0x15
     ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    1000:	8f 89       	ldd	r24, Y+23	; 0x17
    1002:	98 8d       	ldd	r25, Y+24	; 0x18
    1004:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
    1010:	8b 89       	ldd	r24, Y+19	; 0x13
    1012:	9c 89       	ldd	r25, Y+20	; 0x14
    1014:	98 8b       	std	Y+16, r25	; 0x10
    1016:	8f 87       	std	Y+15, r24	; 0x0f
    1018:	8f 85       	ldd	r24, Y+15	; 0x0f
    101a:	98 89       	ldd	r25, Y+16	; 0x10
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	f1 f7       	brne	.-4      	; 0x101c <CLCD_voidSendCommand+0x38e>
    1020:	98 8b       	std	Y+16, r25	; 0x10
    1022:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	a0 e8       	ldi	r26, 0x80	; 128
    1034:	bf e3       	ldi	r27, 0x3F	; 63
    1036:	8b 87       	std	Y+11, r24	; 0x0b
    1038:	9c 87       	std	Y+12, r25	; 0x0c
    103a:	ad 87       	std	Y+13, r26	; 0x0d
    103c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1040:	7c 85       	ldd	r23, Y+12	; 0x0c
    1042:	8d 85       	ldd	r24, Y+13	; 0x0d
    1044:	9e 85       	ldd	r25, Y+14	; 0x0e
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	4a ef       	ldi	r20, 0xFA	; 250
    104c:	54 e4       	ldi	r21, 0x44	; 68
    104e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	8f 83       	std	Y+7, r24	; 0x07
    1058:	98 87       	std	Y+8, r25	; 0x08
    105a:	a9 87       	std	Y+9, r26	; 0x09
    105c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    105e:	6f 81       	ldd	r22, Y+7	; 0x07
    1060:	78 85       	ldd	r23, Y+8	; 0x08
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	9a 85       	ldd	r25, Y+10	; 0x0a
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e8       	ldi	r20, 0x80	; 128
    106c:	5f e3       	ldi	r21, 0x3F	; 63
    106e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1072:	88 23       	and	r24, r24
    1074:	2c f4       	brge	.+10     	; 0x1080 <CLCD_voidSendCommand+0x3f2>
		__ticks = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	9e 83       	std	Y+6, r25	; 0x06
    107c:	8d 83       	std	Y+5, r24	; 0x05
    107e:	3f c0       	rjmp	.+126    	; 0x10fe <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1080:	6f 81       	ldd	r22, Y+7	; 0x07
    1082:	78 85       	ldd	r23, Y+8	; 0x08
    1084:	89 85       	ldd	r24, Y+9	; 0x09
    1086:	9a 85       	ldd	r25, Y+10	; 0x0a
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	3f ef       	ldi	r19, 0xFF	; 255
    108c:	4f e7       	ldi	r20, 0x7F	; 127
    108e:	57 e4       	ldi	r21, 0x47	; 71
    1090:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1094:	18 16       	cp	r1, r24
    1096:	4c f5       	brge	.+82     	; 0x10ea <CLCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1098:	6b 85       	ldd	r22, Y+11	; 0x0b
    109a:	7c 85       	ldd	r23, Y+12	; 0x0c
    109c:	8d 85       	ldd	r24, Y+13	; 0x0d
    109e:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	40 e2       	ldi	r20, 0x20	; 32
    10a6:	51 e4       	ldi	r21, 0x41	; 65
    10a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	bc 01       	movw	r22, r24
    10b2:	cd 01       	movw	r24, r26
    10b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10b8:	dc 01       	movw	r26, r24
    10ba:	cb 01       	movw	r24, r22
    10bc:	9e 83       	std	Y+6, r25	; 0x06
    10be:	8d 83       	std	Y+5, r24	; 0x05
    10c0:	0f c0       	rjmp	.+30     	; 0x10e0 <CLCD_voidSendCommand+0x452>
    10c2:	88 ec       	ldi	r24, 0xC8	; 200
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	01 97       	sbiw	r24, 0x01	; 1
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <CLCD_voidSendCommand+0x440>
    10d2:	9c 83       	std	Y+4, r25	; 0x04
    10d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	69 f7       	brne	.-38     	; 0x10c2 <CLCD_voidSendCommand+0x434>
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f6:	dc 01       	movw	r26, r24
    10f8:	cb 01       	movw	r24, r22
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1100:	9e 81       	ldd	r25, Y+6	; 0x06
    1102:	9a 83       	std	Y+2, r25	; 0x02
    1104:	89 83       	std	Y+1, r24	; 0x01
    1106:	89 81       	ldd	r24, Y+1	; 0x01
    1108:	9a 81       	ldd	r25, Y+2	; 0x02
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <CLCD_voidSendCommand+0x47c>
    110e:	9a 83       	std	Y+2, r25	; 0x02
    1110:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
	_delay_ms(1);

#endif
}
    1112:	e9 96       	adiw	r28, 0x39	; 57
    1114:	0f b6       	in	r0, 0x3f	; 63
    1116:	f8 94       	cli
    1118:	de bf       	out	0x3e, r29	; 62
    111a:	0f be       	out	0x3f, r0	; 63
    111c:	cd bf       	out	0x3d, r28	; 61
    111e:	cf 91       	pop	r28
    1120:	df 91       	pop	r29
    1122:	08 95       	ret

00001124 <CLCD_voidSendData>:

void CLCD_voidSendData(u8 CLCD_u8Data)
{
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	e9 97       	sbiw	r28, 0x39	; 57
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	89 af       	std	Y+57, r24	; 0x39
	//Set RS = 1
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	63 e0       	ldi	r22, 0x03	; 3
    113e:	41 e0       	ldi	r20, 0x01	; 1
    1140:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	// EN high
	//DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);

	//Send Command
#if	(LCD_MODE	==	LCD_4BIT)
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Data,4)));
    1144:	89 ad       	ldd	r24, Y+57	; 0x39
    1146:	82 95       	swap	r24
    1148:	8f 70       	andi	r24, 0x0F	; 15
    114a:	98 2f       	mov	r25, r24
    114c:	91 70       	andi	r25, 0x01	; 1
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	49 2f       	mov	r20, r25
    1154:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Data,5)));
    1158:	89 ad       	ldd	r24, Y+57	; 0x39
    115a:	82 95       	swap	r24
    115c:	86 95       	lsr	r24
    115e:	87 70       	andi	r24, 0x07	; 7
    1160:	98 2f       	mov	r25, r24
    1162:	91 70       	andi	r25, 0x01	; 1
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	61 e0       	ldi	r22, 0x01	; 1
    1168:	49 2f       	mov	r20, r25
    116a:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Data,6)));
    116e:	89 ad       	ldd	r24, Y+57	; 0x39
    1170:	82 95       	swap	r24
    1172:	86 95       	lsr	r24
    1174:	86 95       	lsr	r24
    1176:	83 70       	andi	r24, 0x03	; 3
    1178:	98 2f       	mov	r25, r24
    117a:	91 70       	andi	r25, 0x01	; 1
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	62 e0       	ldi	r22, 0x02	; 2
    1180:	49 2f       	mov	r20, r25
    1182:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Data,7)));
    1186:	89 ad       	ldd	r24, Y+57	; 0x39
    1188:	98 2f       	mov	r25, r24
    118a:	99 1f       	adc	r25, r25
    118c:	99 27       	eor	r25, r25
    118e:	99 1f       	adc	r25, r25
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	64 e0       	ldi	r22, 0x04	; 4
    1194:	49 2f       	mov	r20, r25
    1196:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	62 e0       	ldi	r22, 0x02	; 2
    119e:	41 e0       	ldi	r20, 0x01	; 1
    11a0:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	a0 e8       	ldi	r26, 0x80	; 128
    11aa:	bf e3       	ldi	r27, 0x3F	; 63
    11ac:	8d ab       	std	Y+53, r24	; 0x35
    11ae:	9e ab       	std	Y+54, r25	; 0x36
    11b0:	af ab       	std	Y+55, r26	; 0x37
    11b2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b4:	6d a9       	ldd	r22, Y+53	; 0x35
    11b6:	7e a9       	ldd	r23, Y+54	; 0x36
    11b8:	8f a9       	ldd	r24, Y+55	; 0x37
    11ba:	98 ad       	ldd	r25, Y+56	; 0x38
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a ef       	ldi	r20, 0xFA	; 250
    11c2:	54 e4       	ldi	r21, 0x44	; 68
    11c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	89 ab       	std	Y+49, r24	; 0x31
    11ce:	9a ab       	std	Y+50, r25	; 0x32
    11d0:	ab ab       	std	Y+51, r26	; 0x33
    11d2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11d4:	69 a9       	ldd	r22, Y+49	; 0x31
    11d6:	7a a9       	ldd	r23, Y+50	; 0x32
    11d8:	8b a9       	ldd	r24, Y+51	; 0x33
    11da:	9c a9       	ldd	r25, Y+52	; 0x34
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e8       	ldi	r20, 0x80	; 128
    11e2:	5f e3       	ldi	r21, 0x3F	; 63
    11e4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11e8:	88 23       	and	r24, r24
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <CLCD_voidSendData+0xd2>
		__ticks = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	98 ab       	std	Y+48, r25	; 0x30
    11f2:	8f a7       	std	Y+47, r24	; 0x2f
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    11f6:	69 a9       	ldd	r22, Y+49	; 0x31
    11f8:	7a a9       	ldd	r23, Y+50	; 0x32
    11fa:	8b a9       	ldd	r24, Y+51	; 0x33
    11fc:	9c a9       	ldd	r25, Y+52	; 0x34
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	57 e4       	ldi	r21, 0x47	; 71
    1206:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    120a:	18 16       	cp	r1, r24
    120c:	4c f5       	brge	.+82     	; 0x1260 <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120e:	6d a9       	ldd	r22, Y+53	; 0x35
    1210:	7e a9       	ldd	r23, Y+54	; 0x36
    1212:	8f a9       	ldd	r24, Y+55	; 0x37
    1214:	98 ad       	ldd	r25, Y+56	; 0x38
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	98 ab       	std	Y+48, r25	; 0x30
    1234:	8f a7       	std	Y+47, r24	; 0x2f
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <CLCD_voidSendData+0x132>
    1238:	88 ec       	ldi	r24, 0xC8	; 200
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9e a7       	std	Y+46, r25	; 0x2e
    123e:	8d a7       	std	Y+45, r24	; 0x2d
    1240:	8d a5       	ldd	r24, Y+45	; 0x2d
    1242:	9e a5       	ldd	r25, Y+46	; 0x2e
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <CLCD_voidSendData+0x120>
    1248:	9e a7       	std	Y+46, r25	; 0x2e
    124a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	8f a5       	ldd	r24, Y+47	; 0x2f
    124e:	98 a9       	ldd	r25, Y+48	; 0x30
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	98 ab       	std	Y+48, r25	; 0x30
    1254:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1256:	8f a5       	ldd	r24, Y+47	; 0x2f
    1258:	98 a9       	ldd	r25, Y+48	; 0x30
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f7       	brne	.-38     	; 0x1238 <CLCD_voidSendData+0x114>
    125e:	14 c0       	rjmp	.+40     	; 0x1288 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	69 a9       	ldd	r22, Y+49	; 0x31
    1262:	7a a9       	ldd	r23, Y+50	; 0x32
    1264:	8b a9       	ldd	r24, Y+51	; 0x33
    1266:	9c a9       	ldd	r25, Y+52	; 0x34
    1268:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	98 ab       	std	Y+48, r25	; 0x30
    1272:	8f a7       	std	Y+47, r24	; 0x2f
    1274:	8f a5       	ldd	r24, Y+47	; 0x2f
    1276:	98 a9       	ldd	r25, Y+48	; 0x30
    1278:	9c a7       	std	Y+44, r25	; 0x2c
    127a:	8b a7       	std	Y+43, r24	; 0x2b
    127c:	8b a5       	ldd	r24, Y+43	; 0x2b
    127e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <CLCD_voidSendData+0x15c>
    1284:	9c a7       	std	Y+44, r25	; 0x2c
    1286:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	62 e0       	ldi	r22, 0x02	; 2
    128c:	40 e0       	ldi	r20, 0x00	; 0
    128e:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	a0 e8       	ldi	r26, 0x80	; 128
    1298:	bf e3       	ldi	r27, 0x3F	; 63
    129a:	8f a3       	std	Y+39, r24	; 0x27
    129c:	98 a7       	std	Y+40, r25	; 0x28
    129e:	a9 a7       	std	Y+41, r26	; 0x29
    12a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a2:	6f a1       	ldd	r22, Y+39	; 0x27
    12a4:	78 a5       	ldd	r23, Y+40	; 0x28
    12a6:	89 a5       	ldd	r24, Y+41	; 0x29
    12a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	4a ef       	ldi	r20, 0xFA	; 250
    12b0:	54 e4       	ldi	r21, 0x44	; 68
    12b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12b6:	dc 01       	movw	r26, r24
    12b8:	cb 01       	movw	r24, r22
    12ba:	8b a3       	std	Y+35, r24	; 0x23
    12bc:	9c a3       	std	Y+36, r25	; 0x24
    12be:	ad a3       	std	Y+37, r26	; 0x25
    12c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    12c2:	6b a1       	ldd	r22, Y+35	; 0x23
    12c4:	7c a1       	ldd	r23, Y+36	; 0x24
    12c6:	8d a1       	ldd	r24, Y+37	; 0x25
    12c8:	9e a1       	ldd	r25, Y+38	; 0x26
    12ca:	20 e0       	ldi	r18, 0x00	; 0
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	40 e8       	ldi	r20, 0x80	; 128
    12d0:	5f e3       	ldi	r21, 0x3F	; 63
    12d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    12d6:	88 23       	and	r24, r24
    12d8:	2c f4       	brge	.+10     	; 0x12e4 <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	9a a3       	std	Y+34, r25	; 0x22
    12e0:	89 a3       	std	Y+33, r24	; 0x21
    12e2:	3f c0       	rjmp	.+126    	; 0x1362 <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    12e4:	6b a1       	ldd	r22, Y+35	; 0x23
    12e6:	7c a1       	ldd	r23, Y+36	; 0x24
    12e8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ea:	9e a1       	ldd	r25, Y+38	; 0x26
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    12f8:	18 16       	cp	r1, r24
    12fa:	4c f5       	brge	.+82     	; 0x134e <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12fc:	6f a1       	ldd	r22, Y+39	; 0x27
    12fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1300:	89 a5       	ldd	r24, Y+41	; 0x29
    1302:	9a a5       	ldd	r25, Y+42	; 0x2a
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e2       	ldi	r20, 0x20	; 32
    130a:	51 e4       	ldi	r21, 0x41	; 65
    130c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1310:	dc 01       	movw	r26, r24
    1312:	cb 01       	movw	r24, r22
    1314:	bc 01       	movw	r22, r24
    1316:	cd 01       	movw	r24, r26
    1318:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	9a a3       	std	Y+34, r25	; 0x22
    1322:	89 a3       	std	Y+33, r24	; 0x21
    1324:	0f c0       	rjmp	.+30     	; 0x1344 <CLCD_voidSendData+0x220>
    1326:	88 ec       	ldi	r24, 0xC8	; 200
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	98 a3       	std	Y+32, r25	; 0x20
    132c:	8f 8f       	std	Y+31, r24	; 0x1f
    132e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1330:	98 a1       	ldd	r25, Y+32	; 0x20
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <CLCD_voidSendData+0x20e>
    1336:	98 a3       	std	Y+32, r25	; 0x20
    1338:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133a:	89 a1       	ldd	r24, Y+33	; 0x21
    133c:	9a a1       	ldd	r25, Y+34	; 0x22
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	9a a3       	std	Y+34, r25	; 0x22
    1342:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1344:	89 a1       	ldd	r24, Y+33	; 0x21
    1346:	9a a1       	ldd	r25, Y+34	; 0x22
    1348:	00 97       	sbiw	r24, 0x00	; 0
    134a:	69 f7       	brne	.-38     	; 0x1326 <CLCD_voidSendData+0x202>
    134c:	14 c0       	rjmp	.+40     	; 0x1376 <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    134e:	6b a1       	ldd	r22, Y+35	; 0x23
    1350:	7c a1       	ldd	r23, Y+36	; 0x24
    1352:	8d a1       	ldd	r24, Y+37	; 0x25
    1354:	9e a1       	ldd	r25, Y+38	; 0x26
    1356:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    135a:	dc 01       	movw	r26, r24
    135c:	cb 01       	movw	r24, r22
    135e:	9a a3       	std	Y+34, r25	; 0x22
    1360:	89 a3       	std	Y+33, r24	; 0x21
    1362:	89 a1       	ldd	r24, Y+33	; 0x21
    1364:	9a a1       	ldd	r25, Y+34	; 0x22
    1366:	9e 8f       	std	Y+30, r25	; 0x1e
    1368:	8d 8f       	std	Y+29, r24	; 0x1d
    136a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    136c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <CLCD_voidSendData+0x24a>
    1372:	9e 8f       	std	Y+30, r25	; 0x1e
    1374:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Data,0)));
    1376:	89 ad       	ldd	r24, Y+57	; 0x39
    1378:	98 2f       	mov	r25, r24
    137a:	91 70       	andi	r25, 0x01	; 1
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	60 e0       	ldi	r22, 0x00	; 0
    1380:	49 2f       	mov	r20, r25
    1382:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Data,1)));
    1386:	89 ad       	ldd	r24, Y+57	; 0x39
    1388:	86 95       	lsr	r24
    138a:	98 2f       	mov	r25, r24
    138c:	91 70       	andi	r25, 0x01	; 1
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	61 e0       	ldi	r22, 0x01	; 1
    1392:	49 2f       	mov	r20, r25
    1394:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Data,2)));
    1398:	89 ad       	ldd	r24, Y+57	; 0x39
    139a:	86 95       	lsr	r24
    139c:	86 95       	lsr	r24
    139e:	98 2f       	mov	r25, r24
    13a0:	91 70       	andi	r25, 0x01	; 1
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	49 2f       	mov	r20, r25
    13a8:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Data,3)));
    13ac:	89 ad       	ldd	r24, Y+57	; 0x39
    13ae:	86 95       	lsr	r24
    13b0:	86 95       	lsr	r24
    13b2:	86 95       	lsr	r24
    13b4:	98 2f       	mov	r25, r24
    13b6:	91 70       	andi	r25, 0x01	; 1
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	64 e0       	ldi	r22, 0x04	; 4
    13bc:	49 2f       	mov	r20, r25
    13be:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	62 e0       	ldi	r22, 0x02	; 2
    13c6:	41 e0       	ldi	r20, 0x01	; 1
    13c8:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a0 e8       	ldi	r26, 0x80	; 128
    13d2:	bf e3       	ldi	r27, 0x3F	; 63
    13d4:	89 8f       	std	Y+25, r24	; 0x19
    13d6:	9a 8f       	std	Y+26, r25	; 0x1a
    13d8:	ab 8f       	std	Y+27, r26	; 0x1b
    13da:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13dc:	69 8d       	ldd	r22, Y+25	; 0x19
    13de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	4a ef       	ldi	r20, 0xFA	; 250
    13ea:	54 e4       	ldi	r21, 0x44	; 68
    13ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f0:	dc 01       	movw	r26, r24
    13f2:	cb 01       	movw	r24, r22
    13f4:	8d 8b       	std	Y+21, r24	; 0x15
    13f6:	9e 8b       	std	Y+22, r25	; 0x16
    13f8:	af 8b       	std	Y+23, r26	; 0x17
    13fa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13fc:	6d 89       	ldd	r22, Y+21	; 0x15
    13fe:	7e 89       	ldd	r23, Y+22	; 0x16
    1400:	8f 89       	ldd	r24, Y+23	; 0x17
    1402:	98 8d       	ldd	r25, Y+24	; 0x18
    1404:	20 e0       	ldi	r18, 0x00	; 0
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	40 e8       	ldi	r20, 0x80	; 128
    140a:	5f e3       	ldi	r21, 0x3F	; 63
    140c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1410:	88 23       	and	r24, r24
    1412:	2c f4       	brge	.+10     	; 0x141e <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9c 8b       	std	Y+20, r25	; 0x14
    141a:	8b 8b       	std	Y+19, r24	; 0x13
    141c:	3f c0       	rjmp	.+126    	; 0x149c <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    141e:	6d 89       	ldd	r22, Y+21	; 0x15
    1420:	7e 89       	ldd	r23, Y+22	; 0x16
    1422:	8f 89       	ldd	r24, Y+23	; 0x17
    1424:	98 8d       	ldd	r25, Y+24	; 0x18
    1426:	20 e0       	ldi	r18, 0x00	; 0
    1428:	3f ef       	ldi	r19, 0xFF	; 255
    142a:	4f e7       	ldi	r20, 0x7F	; 127
    142c:	57 e4       	ldi	r21, 0x47	; 71
    142e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1432:	18 16       	cp	r1, r24
    1434:	4c f5       	brge	.+82     	; 0x1488 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1436:	69 8d       	ldd	r22, Y+25	; 0x19
    1438:	7a 8d       	ldd	r23, Y+26	; 0x1a
    143a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    143c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e2       	ldi	r20, 0x20	; 32
    1444:	51 e4       	ldi	r21, 0x41	; 65
    1446:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144a:	dc 01       	movw	r26, r24
    144c:	cb 01       	movw	r24, r22
    144e:	bc 01       	movw	r22, r24
    1450:	cd 01       	movw	r24, r26
    1452:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1456:	dc 01       	movw	r26, r24
    1458:	cb 01       	movw	r24, r22
    145a:	9c 8b       	std	Y+20, r25	; 0x14
    145c:	8b 8b       	std	Y+19, r24	; 0x13
    145e:	0f c0       	rjmp	.+30     	; 0x147e <CLCD_voidSendData+0x35a>
    1460:	88 ec       	ldi	r24, 0xC8	; 200
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9a 8b       	std	Y+18, r25	; 0x12
    1466:	89 8b       	std	Y+17, r24	; 0x11
    1468:	89 89       	ldd	r24, Y+17	; 0x11
    146a:	9a 89       	ldd	r25, Y+18	; 0x12
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <CLCD_voidSendData+0x348>
    1470:	9a 8b       	std	Y+18, r25	; 0x12
    1472:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1474:	8b 89       	ldd	r24, Y+19	; 0x13
    1476:	9c 89       	ldd	r25, Y+20	; 0x14
    1478:	01 97       	sbiw	r24, 0x01	; 1
    147a:	9c 8b       	std	Y+20, r25	; 0x14
    147c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    147e:	8b 89       	ldd	r24, Y+19	; 0x13
    1480:	9c 89       	ldd	r25, Y+20	; 0x14
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	69 f7       	brne	.-38     	; 0x1460 <CLCD_voidSendData+0x33c>
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1488:	6d 89       	ldd	r22, Y+21	; 0x15
    148a:	7e 89       	ldd	r23, Y+22	; 0x16
    148c:	8f 89       	ldd	r24, Y+23	; 0x17
    148e:	98 8d       	ldd	r25, Y+24	; 0x18
    1490:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1494:	dc 01       	movw	r26, r24
    1496:	cb 01       	movw	r24, r22
    1498:	9c 8b       	std	Y+20, r25	; 0x14
    149a:	8b 8b       	std	Y+19, r24	; 0x13
    149c:	8b 89       	ldd	r24, Y+19	; 0x13
    149e:	9c 89       	ldd	r25, Y+20	; 0x14
    14a0:	98 8b       	std	Y+16, r25	; 0x10
    14a2:	8f 87       	std	Y+15, r24	; 0x0f
    14a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a6:	98 89       	ldd	r25, Y+16	; 0x10
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	f1 f7       	brne	.-4      	; 0x14a8 <CLCD_voidSendData+0x384>
    14ac:	98 8b       	std	Y+16, r25	; 0x10
    14ae:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	62 e0       	ldi	r22, 0x02	; 2
    14b4:	40 e0       	ldi	r20, 0x00	; 0
    14b6:	0e 94 76 15 	call	0x2aec	; 0x2aec <DIO_voidSetPinValue>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a0 e8       	ldi	r26, 0x80	; 128
    14c0:	bf e3       	ldi	r27, 0x3F	; 63
    14c2:	8b 87       	std	Y+11, r24	; 0x0b
    14c4:	9c 87       	std	Y+12, r25	; 0x0c
    14c6:	ad 87       	std	Y+13, r26	; 0x0d
    14c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    14cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	4a ef       	ldi	r20, 0xFA	; 250
    14d8:	54 e4       	ldi	r21, 0x44	; 68
    14da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	8f 83       	std	Y+7, r24	; 0x07
    14e4:	98 87       	std	Y+8, r25	; 0x08
    14e6:	a9 87       	std	Y+9, r26	; 0x09
    14e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14ea:	6f 81       	ldd	r22, Y+7	; 0x07
    14ec:	78 85       	ldd	r23, Y+8	; 0x08
    14ee:	89 85       	ldd	r24, Y+9	; 0x09
    14f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	2c f4       	brge	.+10     	; 0x150c <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	9e 83       	std	Y+6, r25	; 0x06
    1508:	8d 83       	std	Y+5, r24	; 0x05
    150a:	3f c0       	rjmp	.+126    	; 0x158a <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	3f ef       	ldi	r19, 0xFF	; 255
    1518:	4f e7       	ldi	r20, 0x7F	; 127
    151a:	57 e4       	ldi	r21, 0x47	; 71
    151c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1520:	18 16       	cp	r1, r24
    1522:	4c f5       	brge	.+82     	; 0x1576 <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1524:	6b 85       	ldd	r22, Y+11	; 0x0b
    1526:	7c 85       	ldd	r23, Y+12	; 0x0c
    1528:	8d 85       	ldd	r24, Y+13	; 0x0d
    152a:	9e 85       	ldd	r25, Y+14	; 0x0e
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 e2       	ldi	r20, 0x20	; 32
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1538:	dc 01       	movw	r26, r24
    153a:	cb 01       	movw	r24, r22
    153c:	bc 01       	movw	r22, r24
    153e:	cd 01       	movw	r24, r26
    1540:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	9e 83       	std	Y+6, r25	; 0x06
    154a:	8d 83       	std	Y+5, r24	; 0x05
    154c:	0f c0       	rjmp	.+30     	; 0x156c <CLCD_voidSendData+0x448>
    154e:	88 ec       	ldi	r24, 0xC8	; 200
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	9c 83       	std	Y+4, r25	; 0x04
    1554:	8b 83       	std	Y+3, r24	; 0x03
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	01 97       	sbiw	r24, 0x01	; 1
    155c:	f1 f7       	brne	.-4      	; 0x155a <CLCD_voidSendData+0x436>
    155e:	9c 83       	std	Y+4, r25	; 0x04
    1560:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1562:	8d 81       	ldd	r24, Y+5	; 0x05
    1564:	9e 81       	ldd	r25, Y+6	; 0x06
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	9e 83       	std	Y+6, r25	; 0x06
    156a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156c:	8d 81       	ldd	r24, Y+5	; 0x05
    156e:	9e 81       	ldd	r25, Y+6	; 0x06
    1570:	00 97       	sbiw	r24, 0x00	; 0
    1572:	69 f7       	brne	.-38     	; 0x154e <CLCD_voidSendData+0x42a>
    1574:	14 c0       	rjmp	.+40     	; 0x159e <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1576:	6f 81       	ldd	r22, Y+7	; 0x07
    1578:	78 85       	ldd	r23, Y+8	; 0x08
    157a:	89 85       	ldd	r24, Y+9	; 0x09
    157c:	9a 85       	ldd	r25, Y+10	; 0x0a
    157e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	9a 83       	std	Y+2, r25	; 0x02
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <CLCD_voidSendData+0x472>
    159a:	9a 83       	std	Y+2, r25	; 0x02
    159c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
	_delay_ms(1);

#endif
}
    159e:	e9 96       	adiw	r28, 0x39	; 57
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	cf 91       	pop	r28
    15ac:	df 91       	pop	r29
    15ae:	08 95       	ret

000015b0 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    15b0:	0f 93       	push	r16
    15b2:	1f 93       	push	r17
    15b4:	df 93       	push	r29
    15b6:	cf 93       	push	r28
    15b8:	cd b7       	in	r28, 0x3d	; 61
    15ba:	de b7       	in	r29, 0x3e	; 62
    15bc:	c4 5c       	subi	r28, 0xC4	; 196
    15be:	d0 40       	sbci	r29, 0x00	; 0
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(CLCD_PORT, DIO_PORT_OUTPUT);
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	6f ef       	ldi	r22, 0xFF	; 255
    15ce:	0e 94 00 18 	call	0x3000	; 0x3000 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    15d2:	80 e0       	ldi	r24, 0x00	; 0
    15d4:	62 e0       	ldi	r22, 0x02	; 2
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	63 e0       	ldi	r22, 0x03	; 3
    15e0:	41 e0       	ldi	r20, 0x01	; 1
    15e2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <DIO_voidSetPinDirection>
    15e6:	fe 01       	movw	r30, r28
    15e8:	ef 53       	subi	r30, 0x3F	; 63
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 ef       	ldi	r26, 0xF0	; 240
    15f2:	b1 e4       	ldi	r27, 0x41	; 65
    15f4:	80 83       	st	Z, r24
    15f6:	91 83       	std	Z+1, r25	; 0x01
    15f8:	a2 83       	std	Z+2, r26	; 0x02
    15fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fc:	8e 01       	movw	r16, r28
    15fe:	03 54       	subi	r16, 0x43	; 67
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	fe 01       	movw	r30, r28
    1604:	ef 53       	subi	r30, 0x3F	; 63
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	60 81       	ld	r22, Z
    160a:	71 81       	ldd	r23, Z+1	; 0x01
    160c:	82 81       	ldd	r24, Z+2	; 0x02
    160e:	93 81       	ldd	r25, Z+3	; 0x03
    1610:	20 e0       	ldi	r18, 0x00	; 0
    1612:	30 e0       	ldi	r19, 0x00	; 0
    1614:	4a ef       	ldi	r20, 0xFA	; 250
    1616:	54 e4       	ldi	r21, 0x44	; 68
    1618:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	f8 01       	movw	r30, r16
    1622:	80 83       	st	Z, r24
    1624:	91 83       	std	Z+1, r25	; 0x01
    1626:	a2 83       	std	Z+2, r26	; 0x02
    1628:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    162a:	fe 01       	movw	r30, r28
    162c:	e3 54       	subi	r30, 0x43	; 67
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e8       	ldi	r20, 0x80	; 128
    163e:	5f e3       	ldi	r21, 0x3F	; 63
    1640:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1644:	88 23       	and	r24, r24
    1646:	44 f4       	brge	.+16     	; 0x1658 <CLCD_voidInit+0xa8>
		__ticks = 1;
    1648:	fe 01       	movw	r30, r28
    164a:	e5 54       	subi	r30, 0x45	; 69
    164c:	ff 4f       	sbci	r31, 0xFF	; 255
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	91 83       	std	Z+1, r25	; 0x01
    1654:	80 83       	st	Z, r24
    1656:	64 c0       	rjmp	.+200    	; 0x1720 <CLCD_voidInit+0x170>
	else if (__tmp > 65535)
    1658:	fe 01       	movw	r30, r28
    165a:	e3 54       	subi	r30, 0x43	; 67
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	3f ef       	ldi	r19, 0xFF	; 255
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	57 e4       	ldi	r21, 0x47	; 71
    166e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	0c f0       	brlt	.+2      	; 0x1678 <CLCD_voidInit+0xc8>
    1676:	43 c0       	rjmp	.+134    	; 0x16fe <CLCD_voidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1678:	fe 01       	movw	r30, r28
    167a:	ef 53       	subi	r30, 0x3F	; 63
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	60 81       	ld	r22, Z
    1680:	71 81       	ldd	r23, Z+1	; 0x01
    1682:	82 81       	ldd	r24, Z+2	; 0x02
    1684:	93 81       	ldd	r25, Z+3	; 0x03
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e2       	ldi	r20, 0x20	; 32
    168c:	51 e4       	ldi	r21, 0x41	; 65
    168e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	8e 01       	movw	r16, r28
    1698:	05 54       	subi	r16, 0x45	; 69
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	bc 01       	movw	r22, r24
    169e:	cd 01       	movw	r24, r26
    16a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	f8 01       	movw	r30, r16
    16aa:	91 83       	std	Z+1, r25	; 0x01
    16ac:	80 83       	st	Z, r24
    16ae:	1f c0       	rjmp	.+62     	; 0x16ee <CLCD_voidInit+0x13e>
    16b0:	fe 01       	movw	r30, r28
    16b2:	e7 54       	subi	r30, 0x47	; 71
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	88 ec       	ldi	r24, 0xC8	; 200
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    16be:	fe 01       	movw	r30, r28
    16c0:	e7 54       	subi	r30, 0x47	; 71
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 81       	ld	r24, Z
    16c6:	91 81       	ldd	r25, Z+1	; 0x01
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	f1 f7       	brne	.-4      	; 0x16c8 <CLCD_voidInit+0x118>
    16cc:	fe 01       	movw	r30, r28
    16ce:	e7 54       	subi	r30, 0x47	; 71
    16d0:	ff 4f       	sbci	r31, 0xFF	; 255
    16d2:	91 83       	std	Z+1, r25	; 0x01
    16d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	de 01       	movw	r26, r28
    16d8:	a5 54       	subi	r26, 0x45	; 69
    16da:	bf 4f       	sbci	r27, 0xFF	; 255
    16dc:	fe 01       	movw	r30, r28
    16de:	e5 54       	subi	r30, 0x45	; 69
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	80 81       	ld	r24, Z
    16e4:	91 81       	ldd	r25, Z+1	; 0x01
    16e6:	01 97       	sbiw	r24, 0x01	; 1
    16e8:	11 96       	adiw	r26, 0x01	; 1
    16ea:	9c 93       	st	X, r25
    16ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ee:	fe 01       	movw	r30, r28
    16f0:	e5 54       	subi	r30, 0x45	; 69
    16f2:	ff 4f       	sbci	r31, 0xFF	; 255
    16f4:	80 81       	ld	r24, Z
    16f6:	91 81       	ldd	r25, Z+1	; 0x01
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	d1 f6       	brne	.-76     	; 0x16b0 <CLCD_voidInit+0x100>
    16fc:	27 c0       	rjmp	.+78     	; 0x174c <CLCD_voidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fe:	8e 01       	movw	r16, r28
    1700:	05 54       	subi	r16, 0x45	; 69
    1702:	1f 4f       	sbci	r17, 0xFF	; 255
    1704:	fe 01       	movw	r30, r28
    1706:	e3 54       	subi	r30, 0x43	; 67
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	60 81       	ld	r22, Z
    170c:	71 81       	ldd	r23, Z+1	; 0x01
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	f8 01       	movw	r30, r16
    171c:	91 83       	std	Z+1, r25	; 0x01
    171e:	80 83       	st	Z, r24
    1720:	de 01       	movw	r26, r28
    1722:	a9 54       	subi	r26, 0x49	; 73
    1724:	bf 4f       	sbci	r27, 0xFF	; 255
    1726:	fe 01       	movw	r30, r28
    1728:	e5 54       	subi	r30, 0x45	; 69
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 81       	ld	r24, Z
    172e:	91 81       	ldd	r25, Z+1	; 0x01
    1730:	8d 93       	st	X+, r24
    1732:	9c 93       	st	X, r25
    1734:	fe 01       	movw	r30, r28
    1736:	e9 54       	subi	r30, 0x49	; 73
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 81       	ld	r24, Z
    173c:	91 81       	ldd	r25, Z+1	; 0x01
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <CLCD_voidInit+0x18e>
    1742:	fe 01       	movw	r30, r28
    1744:	e9 54       	subi	r30, 0x49	; 73
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	91 83       	std	Z+1, r25	; 0x01
    174a:	80 83       	st	Z, r24
	//DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
	_delay_ms(30);
	CLCD_voidSendCommand(0x38);
    174c:	88 e3       	ldi	r24, 0x38	; 56
    174e:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    1752:	fe 01       	movw	r30, r28
    1754:	ed 54       	subi	r30, 0x4D	; 77
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 ea       	ldi	r26, 0xA0	; 160
    175e:	b0 e4       	ldi	r27, 0x40	; 64
    1760:	80 83       	st	Z, r24
    1762:	91 83       	std	Z+1, r25	; 0x01
    1764:	a2 83       	std	Z+2, r26	; 0x02
    1766:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	8e 01       	movw	r16, r28
    176a:	01 55       	subi	r16, 0x51	; 81
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	fe 01       	movw	r30, r28
    1770:	ed 54       	subi	r30, 0x4D	; 77
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	4a ef       	ldi	r20, 0xFA	; 250
    1782:	54 e4       	ldi	r21, 0x44	; 68
    1784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1788:	dc 01       	movw	r26, r24
    178a:	cb 01       	movw	r24, r22
    178c:	f8 01       	movw	r30, r16
    178e:	80 83       	st	Z, r24
    1790:	91 83       	std	Z+1, r25	; 0x01
    1792:	a2 83       	std	Z+2, r26	; 0x02
    1794:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1796:	fe 01       	movw	r30, r28
    1798:	e1 55       	subi	r30, 0x51	; 81
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	40 e8       	ldi	r20, 0x80	; 128
    17aa:	5f e3       	ldi	r21, 0x3F	; 63
    17ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17b0:	88 23       	and	r24, r24
    17b2:	44 f4       	brge	.+16     	; 0x17c4 <CLCD_voidInit+0x214>
		__ticks = 1;
    17b4:	fe 01       	movw	r30, r28
    17b6:	e3 55       	subi	r30, 0x53	; 83
    17b8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	91 83       	std	Z+1, r25	; 0x01
    17c0:	80 83       	st	Z, r24
    17c2:	64 c0       	rjmp	.+200    	; 0x188c <CLCD_voidInit+0x2dc>
	else if (__tmp > 65535)
    17c4:	fe 01       	movw	r30, r28
    17c6:	e1 55       	subi	r30, 0x51	; 81
    17c8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ca:	60 81       	ld	r22, Z
    17cc:	71 81       	ldd	r23, Z+1	; 0x01
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	0c f0       	brlt	.+2      	; 0x17e4 <CLCD_voidInit+0x234>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <CLCD_voidInit+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e4:	fe 01       	movw	r30, r28
    17e6:	ed 54       	subi	r30, 0x4D	; 77
    17e8:	ff 4f       	sbci	r31, 0xFF	; 255
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	40 e2       	ldi	r20, 0x20	; 32
    17f8:	51 e4       	ldi	r21, 0x41	; 65
    17fa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8e 01       	movw	r16, r28
    1804:	03 55       	subi	r16, 0x53	; 83
    1806:	1f 4f       	sbci	r17, 0xFF	; 255
    1808:	bc 01       	movw	r22, r24
    180a:	cd 01       	movw	r24, r26
    180c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1810:	dc 01       	movw	r26, r24
    1812:	cb 01       	movw	r24, r22
    1814:	f8 01       	movw	r30, r16
    1816:	91 83       	std	Z+1, r25	; 0x01
    1818:	80 83       	st	Z, r24
    181a:	1f c0       	rjmp	.+62     	; 0x185a <CLCD_voidInit+0x2aa>
    181c:	fe 01       	movw	r30, r28
    181e:	e5 55       	subi	r30, 0x55	; 85
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	88 ec       	ldi	r24, 0xC8	; 200
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	fe 01       	movw	r30, r28
    182c:	e5 55       	subi	r30, 0x55	; 85
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	80 81       	ld	r24, Z
    1832:	91 81       	ldd	r25, Z+1	; 0x01
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <CLCD_voidInit+0x284>
    1838:	fe 01       	movw	r30, r28
    183a:	e5 55       	subi	r30, 0x55	; 85
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	de 01       	movw	r26, r28
    1844:	a3 55       	subi	r26, 0x53	; 83
    1846:	bf 4f       	sbci	r27, 0xFF	; 255
    1848:	fe 01       	movw	r30, r28
    184a:	e3 55       	subi	r30, 0x53	; 83
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	11 96       	adiw	r26, 0x01	; 1
    1856:	9c 93       	st	X, r25
    1858:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185a:	fe 01       	movw	r30, r28
    185c:	e3 55       	subi	r30, 0x53	; 83
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	80 81       	ld	r24, Z
    1862:	91 81       	ldd	r25, Z+1	; 0x01
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	d1 f6       	brne	.-76     	; 0x181c <CLCD_voidInit+0x26c>
    1868:	27 c0       	rjmp	.+78     	; 0x18b8 <CLCD_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186a:	8e 01       	movw	r16, r28
    186c:	03 55       	subi	r16, 0x53	; 83
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	fe 01       	movw	r30, r28
    1872:	e1 55       	subi	r30, 0x51	; 81
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	60 81       	ld	r22, Z
    1878:	71 81       	ldd	r23, Z+1	; 0x01
    187a:	82 81       	ldd	r24, Z+2	; 0x02
    187c:	93 81       	ldd	r25, Z+3	; 0x03
    187e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1882:	dc 01       	movw	r26, r24
    1884:	cb 01       	movw	r24, r22
    1886:	f8 01       	movw	r30, r16
    1888:	91 83       	std	Z+1, r25	; 0x01
    188a:	80 83       	st	Z, r24
    188c:	de 01       	movw	r26, r28
    188e:	a7 55       	subi	r26, 0x57	; 87
    1890:	bf 4f       	sbci	r27, 0xFF	; 255
    1892:	fe 01       	movw	r30, r28
    1894:	e3 55       	subi	r30, 0x53	; 83
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	8d 93       	st	X+, r24
    189e:	9c 93       	st	X, r25
    18a0:	fe 01       	movw	r30, r28
    18a2:	e7 55       	subi	r30, 0x57	; 87
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 81       	ld	r24, Z
    18a8:	91 81       	ldd	r25, Z+1	; 0x01
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <CLCD_voidInit+0x2fa>
    18ae:	fe 01       	movw	r30, r28
    18b0:	e7 55       	subi	r30, 0x57	; 87
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	91 83       	std	Z+1, r25	; 0x01
    18b6:	80 83       	st	Z, r24
	_delay_ms(5);
	CLCD_voidSendCommand(0x38);
    18b8:	88 e3       	ldi	r24, 0x38	; 56
    18ba:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    18be:	fe 01       	movw	r30, r28
    18c0:	eb 55       	subi	r30, 0x5B	; 91
    18c2:	ff 4f       	sbci	r31, 0xFF	; 255
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a6 e1       	ldi	r26, 0x16	; 22
    18ca:	b3 e4       	ldi	r27, 0x43	; 67
    18cc:	80 83       	st	Z, r24
    18ce:	91 83       	std	Z+1, r25	; 0x01
    18d0:	a2 83       	std	Z+2, r26	; 0x02
    18d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18d4:	8e 01       	movw	r16, r28
    18d6:	0f 55       	subi	r16, 0x5F	; 95
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	fe 01       	movw	r30, r28
    18dc:	eb 55       	subi	r30, 0x5B	; 91
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	2b ea       	ldi	r18, 0xAB	; 171
    18ea:	3a ea       	ldi	r19, 0xAA	; 170
    18ec:	4a e2       	ldi	r20, 0x2A	; 42
    18ee:	50 e4       	ldi	r21, 0x40	; 64
    18f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	f8 01       	movw	r30, r16
    18fa:	80 83       	st	Z, r24
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	a2 83       	std	Z+2, r26	; 0x02
    1900:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1902:	fe 01       	movw	r30, r28
    1904:	ef 55       	subi	r30, 0x5F	; 95
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	60 81       	ld	r22, Z
    190a:	71 81       	ldd	r23, Z+1	; 0x01
    190c:	82 81       	ldd	r24, Z+2	; 0x02
    190e:	93 81       	ldd	r25, Z+3	; 0x03
    1910:	20 e0       	ldi	r18, 0x00	; 0
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	40 e8       	ldi	r20, 0x80	; 128
    1916:	5f e3       	ldi	r21, 0x3F	; 63
    1918:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    191c:	88 23       	and	r24, r24
    191e:	34 f4       	brge	.+12     	; 0x192c <CLCD_voidInit+0x37c>
		__ticks = 1;
    1920:	fe 01       	movw	r30, r28
    1922:	e0 56       	subi	r30, 0x60	; 96
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	80 83       	st	Z, r24
    192a:	e0 c0       	rjmp	.+448    	; 0x1aec <CLCD_voidInit+0x53c>
	else if (__tmp > 255)
    192c:	fe 01       	movw	r30, r28
    192e:	ef 55       	subi	r30, 0x5F	; 95
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	53 e4       	ldi	r21, 0x43	; 67
    1942:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	0c f0       	brlt	.+2      	; 0x194c <CLCD_voidInit+0x39c>
    194a:	c0 c0       	rjmp	.+384    	; 0x1acc <CLCD_voidInit+0x51c>
	{
		_delay_ms(__us / 1000.0);
    194c:	fe 01       	movw	r30, r28
    194e:	eb 55       	subi	r30, 0x5B	; 91
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	54 e4       	ldi	r21, 0x44	; 68
    1962:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	fe 01       	movw	r30, r28
    196c:	e4 56       	subi	r30, 0x64	; 100
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	80 83       	st	Z, r24
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	a2 83       	std	Z+2, r26	; 0x02
    1976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1978:	8e 01       	movw	r16, r28
    197a:	08 56       	subi	r16, 0x68	; 104
    197c:	1f 4f       	sbci	r17, 0xFF	; 255
    197e:	fe 01       	movw	r30, r28
    1980:	e4 56       	subi	r30, 0x64	; 100
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a ef       	ldi	r20, 0xFA	; 250
    1992:	54 e4       	ldi	r21, 0x44	; 68
    1994:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	80 83       	st	Z, r24
    19a0:	91 83       	std	Z+1, r25	; 0x01
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19a6:	fe 01       	movw	r30, r28
    19a8:	e8 56       	subi	r30, 0x68	; 104
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	60 81       	ld	r22, Z
    19ae:	71 81       	ldd	r23, Z+1	; 0x01
    19b0:	82 81       	ldd	r24, Z+2	; 0x02
    19b2:	93 81       	ldd	r25, Z+3	; 0x03
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e8       	ldi	r20, 0x80	; 128
    19ba:	5f e3       	ldi	r21, 0x3F	; 63
    19bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    19c0:	88 23       	and	r24, r24
    19c2:	44 f4       	brge	.+16     	; 0x19d4 <CLCD_voidInit+0x424>
		__ticks = 1;
    19c4:	fe 01       	movw	r30, r28
    19c6:	ea 56       	subi	r30, 0x6A	; 106
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	64 c0       	rjmp	.+200    	; 0x1a9c <CLCD_voidInit+0x4ec>
	else if (__tmp > 65535)
    19d4:	fe 01       	movw	r30, r28
    19d6:	e8 56       	subi	r30, 0x68	; 104
    19d8:	ff 4f       	sbci	r31, 0xFF	; 255
    19da:	60 81       	ld	r22, Z
    19dc:	71 81       	ldd	r23, Z+1	; 0x01
    19de:	82 81       	ldd	r24, Z+2	; 0x02
    19e0:	93 81       	ldd	r25, Z+3	; 0x03
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	3f ef       	ldi	r19, 0xFF	; 255
    19e6:	4f e7       	ldi	r20, 0x7F	; 127
    19e8:	57 e4       	ldi	r21, 0x47	; 71
    19ea:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19ee:	18 16       	cp	r1, r24
    19f0:	0c f0       	brlt	.+2      	; 0x19f4 <CLCD_voidInit+0x444>
    19f2:	43 c0       	rjmp	.+134    	; 0x1a7a <CLCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f4:	fe 01       	movw	r30, r28
    19f6:	e4 56       	subi	r30, 0x64	; 100
    19f8:	ff 4f       	sbci	r31, 0xFF	; 255
    19fa:	60 81       	ld	r22, Z
    19fc:	71 81       	ldd	r23, Z+1	; 0x01
    19fe:	82 81       	ldd	r24, Z+2	; 0x02
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	8e 01       	movw	r16, r28
    1a14:	0a 56       	subi	r16, 0x6A	; 106
    1a16:	1f 4f       	sbci	r17, 0xFF	; 255
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	f8 01       	movw	r30, r16
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    1a2a:	1f c0       	rjmp	.+62     	; 0x1a6a <CLCD_voidInit+0x4ba>
    1a2c:	fe 01       	movw	r30, r28
    1a2e:	ec 56       	subi	r30, 0x6C	; 108
    1a30:	ff 4f       	sbci	r31, 0xFF	; 255
    1a32:	88 ec       	ldi	r24, 0xC8	; 200
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	80 83       	st	Z, r24
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ec 56       	subi	r30, 0x6C	; 108
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	f1 f7       	brne	.-4      	; 0x1a44 <CLCD_voidInit+0x494>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	ec 56       	subi	r30, 0x6C	; 108
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	de 01       	movw	r26, r28
    1a54:	aa 56       	subi	r26, 0x6A	; 106
    1a56:	bf 4f       	sbci	r27, 0xFF	; 255
    1a58:	fe 01       	movw	r30, r28
    1a5a:	ea 56       	subi	r30, 0x6A	; 106
    1a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	11 96       	adiw	r26, 0x01	; 1
    1a66:	9c 93       	st	X, r25
    1a68:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	ea 56       	subi	r30, 0x6A	; 106
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	80 81       	ld	r24, Z
    1a72:	91 81       	ldd	r25, Z+1	; 0x01
    1a74:	00 97       	sbiw	r24, 0x00	; 0
    1a76:	d1 f6       	brne	.-76     	; 0x1a2c <CLCD_voidInit+0x47c>
    1a78:	4b c0       	rjmp	.+150    	; 0x1b10 <CLCD_voidInit+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a7a:	8e 01       	movw	r16, r28
    1a7c:	0a 56       	subi	r16, 0x6A	; 106
    1a7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a80:	fe 01       	movw	r30, r28
    1a82:	e8 56       	subi	r30, 0x68	; 104
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a92:	dc 01       	movw	r26, r24
    1a94:	cb 01       	movw	r24, r22
    1a96:	f8 01       	movw	r30, r16
    1a98:	91 83       	std	Z+1, r25	; 0x01
    1a9a:	80 83       	st	Z, r24
    1a9c:	de 01       	movw	r26, r28
    1a9e:	ae 56       	subi	r26, 0x6E	; 110
    1aa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa2:	fe 01       	movw	r30, r28
    1aa4:	ea 56       	subi	r30, 0x6A	; 106
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	80 81       	ld	r24, Z
    1aaa:	91 81       	ldd	r25, Z+1	; 0x01
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	9c 93       	st	X, r25
    1ab0:	8e 93       	st	-X, r24
    1ab2:	fe 01       	movw	r30, r28
    1ab4:	ee 56       	subi	r30, 0x6E	; 110
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	91 81       	ldd	r25, Z+1	; 0x01
    1abc:	01 97       	sbiw	r24, 0x01	; 1
    1abe:	f1 f7       	brne	.-4      	; 0x1abc <CLCD_voidInit+0x50c>
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ee 56       	subi	r30, 0x6E	; 110
    1ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac6:	91 83       	std	Z+1, r25	; 0x01
    1ac8:	80 83       	st	Z, r24
    1aca:	22 c0       	rjmp	.+68     	; 0x1b10 <CLCD_voidInit+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1acc:	8e 01       	movw	r16, r28
    1ace:	00 56       	subi	r16, 0x60	; 96
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ef 55       	subi	r30, 0x5F	; 95
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	f8 01       	movw	r30, r16
    1aea:	80 83       	st	Z, r24
    1aec:	de 01       	movw	r26, r28
    1aee:	af 56       	subi	r26, 0x6F	; 111
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	fe 01       	movw	r30, r28
    1af4:	e0 56       	subi	r30, 0x60	; 96
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 81       	ld	r24, Z
    1afa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1afc:	fe 01       	movw	r30, r28
    1afe:	ef 56       	subi	r30, 0x6F	; 111
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 81       	ld	r24, Z
    1b04:	8a 95       	dec	r24
    1b06:	f1 f7       	brne	.-4      	; 0x1b04 <CLCD_voidInit+0x554>
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ef 56       	subi	r30, 0x6F	; 111
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x38);
    1b10:	88 e3       	ldi	r24, 0x38	; 56
    1b12:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    1b16:	fe 01       	movw	r30, r28
    1b18:	e3 57       	subi	r30, 0x73	; 115
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a6 e1       	ldi	r26, 0x16	; 22
    1b22:	b3 e4       	ldi	r27, 0x43	; 67
    1b24:	80 83       	st	Z, r24
    1b26:	91 83       	std	Z+1, r25	; 0x01
    1b28:	a2 83       	std	Z+2, r26	; 0x02
    1b2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b2c:	8e 01       	movw	r16, r28
    1b2e:	07 57       	subi	r16, 0x77	; 119
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	fe 01       	movw	r30, r28
    1b34:	e3 57       	subi	r30, 0x73	; 115
    1b36:	ff 4f       	sbci	r31, 0xFF	; 255
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	2b ea       	ldi	r18, 0xAB	; 171
    1b42:	3a ea       	ldi	r19, 0xAA	; 170
    1b44:	4a e2       	ldi	r20, 0x2A	; 42
    1b46:	50 e4       	ldi	r21, 0x40	; 64
    1b48:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 83       	st	Z, r24
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	a2 83       	std	Z+2, r26	; 0x02
    1b58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b5a:	fe 01       	movw	r30, r28
    1b5c:	e7 57       	subi	r30, 0x77	; 119
    1b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b60:	60 81       	ld	r22, Z
    1b62:	71 81       	ldd	r23, Z+1	; 0x01
    1b64:	82 81       	ldd	r24, Z+2	; 0x02
    1b66:	93 81       	ldd	r25, Z+3	; 0x03
    1b68:	20 e0       	ldi	r18, 0x00	; 0
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	40 e8       	ldi	r20, 0x80	; 128
    1b6e:	5f e3       	ldi	r21, 0x3F	; 63
    1b70:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b74:	88 23       	and	r24, r24
    1b76:	34 f4       	brge	.+12     	; 0x1b84 <CLCD_voidInit+0x5d4>
		__ticks = 1;
    1b78:	fe 01       	movw	r30, r28
    1b7a:	e8 57       	subi	r30, 0x78	; 120
    1b7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	80 83       	st	Z, r24
    1b82:	e0 c0       	rjmp	.+448    	; 0x1d44 <CLCD_voidInit+0x794>
	else if (__tmp > 255)
    1b84:	fe 01       	movw	r30, r28
    1b86:	e7 57       	subi	r30, 0x77	; 119
    1b88:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	4f e7       	ldi	r20, 0x7F	; 127
    1b98:	53 e4       	ldi	r21, 0x43	; 67
    1b9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b9e:	18 16       	cp	r1, r24
    1ba0:	0c f0       	brlt	.+2      	; 0x1ba4 <CLCD_voidInit+0x5f4>
    1ba2:	c0 c0       	rjmp	.+384    	; 0x1d24 <CLCD_voidInit+0x774>
	{
		_delay_ms(__us / 1000.0);
    1ba4:	fe 01       	movw	r30, r28
    1ba6:	e3 57       	subi	r30, 0x73	; 115
    1ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    1baa:	60 81       	ld	r22, Z
    1bac:	71 81       	ldd	r23, Z+1	; 0x01
    1bae:	82 81       	ldd	r24, Z+2	; 0x02
    1bb0:	93 81       	ldd	r25, Z+3	; 0x03
    1bb2:	20 e0       	ldi	r18, 0x00	; 0
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	4a e7       	ldi	r20, 0x7A	; 122
    1bb8:	54 e4       	ldi	r21, 0x44	; 68
    1bba:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	cb 01       	movw	r24, r22
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ec 57       	subi	r30, 0x7C	; 124
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 83       	st	Z, r24
    1bca:	91 83       	std	Z+1, r25	; 0x01
    1bcc:	a2 83       	std	Z+2, r26	; 0x02
    1bce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	8e 01       	movw	r16, r28
    1bd2:	00 58       	subi	r16, 0x80	; 128
    1bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd6:	fe 01       	movw	r30, r28
    1bd8:	ec 57       	subi	r30, 0x7C	; 124
    1bda:	ff 4f       	sbci	r31, 0xFF	; 255
    1bdc:	60 81       	ld	r22, Z
    1bde:	71 81       	ldd	r23, Z+1	; 0x01
    1be0:	82 81       	ldd	r24, Z+2	; 0x02
    1be2:	93 81       	ldd	r25, Z+3	; 0x03
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	4a ef       	ldi	r20, 0xFA	; 250
    1bea:	54 e4       	ldi	r21, 0x44	; 68
    1bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	80 83       	st	Z, r24
    1bf8:	91 83       	std	Z+1, r25	; 0x01
    1bfa:	a2 83       	std	Z+2, r26	; 0x02
    1bfc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bfe:	fe 01       	movw	r30, r28
    1c00:	e0 58       	subi	r30, 0x80	; 128
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	60 81       	ld	r22, Z
    1c06:	71 81       	ldd	r23, Z+1	; 0x01
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	93 81       	ldd	r25, Z+3	; 0x03
    1c0c:	20 e0       	ldi	r18, 0x00	; 0
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	40 e8       	ldi	r20, 0x80	; 128
    1c12:	5f e3       	ldi	r21, 0x3F	; 63
    1c14:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c18:	88 23       	and	r24, r24
    1c1a:	44 f4       	brge	.+16     	; 0x1c2c <CLCD_voidInit+0x67c>
		__ticks = 1;
    1c1c:	fe 01       	movw	r30, r28
    1c1e:	e2 58       	subi	r30, 0x82	; 130
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	80 83       	st	Z, r24
    1c2a:	64 c0       	rjmp	.+200    	; 0x1cf4 <CLCD_voidInit+0x744>
	else if (__tmp > 65535)
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e0 58       	subi	r30, 0x80	; 128
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	3f ef       	ldi	r19, 0xFF	; 255
    1c3e:	4f e7       	ldi	r20, 0x7F	; 127
    1c40:	57 e4       	ldi	r21, 0x47	; 71
    1c42:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c46:	18 16       	cp	r1, r24
    1c48:	0c f0       	brlt	.+2      	; 0x1c4c <CLCD_voidInit+0x69c>
    1c4a:	43 c0       	rjmp	.+134    	; 0x1cd2 <CLCD_voidInit+0x722>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c4c:	fe 01       	movw	r30, r28
    1c4e:	ec 57       	subi	r30, 0x7C	; 124
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	60 81       	ld	r22, Z
    1c54:	71 81       	ldd	r23, Z+1	; 0x01
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e2       	ldi	r20, 0x20	; 32
    1c60:	51 e4       	ldi	r21, 0x41	; 65
    1c62:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	8e 01       	movw	r16, r28
    1c6c:	02 58       	subi	r16, 0x82	; 130
    1c6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c70:	bc 01       	movw	r22, r24
    1c72:	cd 01       	movw	r24, r26
    1c74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c78:	dc 01       	movw	r26, r24
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	91 83       	std	Z+1, r25	; 0x01
    1c80:	80 83       	st	Z, r24
    1c82:	1f c0       	rjmp	.+62     	; 0x1cc2 <CLCD_voidInit+0x712>
    1c84:	fe 01       	movw	r30, r28
    1c86:	e4 58       	subi	r30, 0x84	; 132
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	88 ec       	ldi	r24, 0xC8	; 200
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	91 83       	std	Z+1, r25	; 0x01
    1c90:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c92:	fe 01       	movw	r30, r28
    1c94:	e4 58       	subi	r30, 0x84	; 132
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <CLCD_voidInit+0x6ec>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	e4 58       	subi	r30, 0x84	; 132
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	91 83       	std	Z+1, r25	; 0x01
    1ca8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1caa:	de 01       	movw	r26, r28
    1cac:	a2 58       	subi	r26, 0x82	; 130
    1cae:	bf 4f       	sbci	r27, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e2 58       	subi	r30, 0x82	; 130
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 81       	ld	r24, Z
    1cb8:	91 81       	ldd	r25, Z+1	; 0x01
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	11 96       	adiw	r26, 0x01	; 1
    1cbe:	9c 93       	st	X, r25
    1cc0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc2:	fe 01       	movw	r30, r28
    1cc4:	e2 58       	subi	r30, 0x82	; 130
    1cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc8:	80 81       	ld	r24, Z
    1cca:	91 81       	ldd	r25, Z+1	; 0x01
    1ccc:	00 97       	sbiw	r24, 0x00	; 0
    1cce:	d1 f6       	brne	.-76     	; 0x1c84 <CLCD_voidInit+0x6d4>
    1cd0:	4b c0       	rjmp	.+150    	; 0x1d68 <CLCD_voidInit+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	02 58       	subi	r16, 0x82	; 130
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e0 58       	subi	r30, 0x80	; 128
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	f8 01       	movw	r30, r16
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	de 01       	movw	r26, r28
    1cf6:	a6 58       	subi	r26, 0x86	; 134
    1cf8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cfa:	fe 01       	movw	r30, r28
    1cfc:	e2 58       	subi	r30, 0x82	; 130
    1cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1d00:	80 81       	ld	r24, Z
    1d02:	91 81       	ldd	r25, Z+1	; 0x01
    1d04:	11 96       	adiw	r26, 0x01	; 1
    1d06:	9c 93       	st	X, r25
    1d08:	8e 93       	st	-X, r24
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	e6 58       	subi	r30, 0x86	; 134
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	80 81       	ld	r24, Z
    1d12:	91 81       	ldd	r25, Z+1	; 0x01
    1d14:	01 97       	sbiw	r24, 0x01	; 1
    1d16:	f1 f7       	brne	.-4      	; 0x1d14 <CLCD_voidInit+0x764>
    1d18:	fe 01       	movw	r30, r28
    1d1a:	e6 58       	subi	r30, 0x86	; 134
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	80 83       	st	Z, r24
    1d22:	22 c0       	rjmp	.+68     	; 0x1d68 <CLCD_voidInit+0x7b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d24:	8e 01       	movw	r16, r28
    1d26:	08 57       	subi	r16, 0x78	; 120
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e7 57       	subi	r30, 0x77	; 119
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	cb 01       	movw	r24, r22
    1d40:	f8 01       	movw	r30, r16
    1d42:	80 83       	st	Z, r24
    1d44:	de 01       	movw	r26, r28
    1d46:	a7 58       	subi	r26, 0x87	; 135
    1d48:	bf 4f       	sbci	r27, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e8 57       	subi	r30, 0x78	; 120
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 81       	ld	r24, Z
    1d52:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d54:	fe 01       	movw	r30, r28
    1d56:	e7 58       	subi	r30, 0x87	; 135
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	80 81       	ld	r24, Z
    1d5c:	8a 95       	dec	r24
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <CLCD_voidInit+0x7ac>
    1d60:	fe 01       	movw	r30, r28
    1d62:	e7 58       	subi	r30, 0x87	; 135
    1d64:	ff 4f       	sbci	r31, 0xFF	; 255
    1d66:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x01);
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    1d6e:	fe 01       	movw	r30, r28
    1d70:	eb 58       	subi	r30, 0x8B	; 139
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	a6 e1       	ldi	r26, 0x16	; 22
    1d7a:	b3 e4       	ldi	r27, 0x43	; 67
    1d7c:	80 83       	st	Z, r24
    1d7e:	91 83       	std	Z+1, r25	; 0x01
    1d80:	a2 83       	std	Z+2, r26	; 0x02
    1d82:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d84:	8e 01       	movw	r16, r28
    1d86:	0f 58       	subi	r16, 0x8F	; 143
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	eb 58       	subi	r30, 0x8B	; 139
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	60 81       	ld	r22, Z
    1d92:	71 81       	ldd	r23, Z+1	; 0x01
    1d94:	82 81       	ldd	r24, Z+2	; 0x02
    1d96:	93 81       	ldd	r25, Z+3	; 0x03
    1d98:	2b ea       	ldi	r18, 0xAB	; 171
    1d9a:	3a ea       	ldi	r19, 0xAA	; 170
    1d9c:	4a e2       	ldi	r20, 0x2A	; 42
    1d9e:	50 e4       	ldi	r21, 0x40	; 64
    1da0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	f8 01       	movw	r30, r16
    1daa:	80 83       	st	Z, r24
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	a2 83       	std	Z+2, r26	; 0x02
    1db0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 58       	subi	r30, 0x8F	; 143
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	34 f4       	brge	.+12     	; 0x1ddc <CLCD_voidInit+0x82c>
		__ticks = 1;
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e0 59       	subi	r30, 0x90	; 144
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	80 83       	st	Z, r24
    1dda:	e0 c0       	rjmp	.+448    	; 0x1f9c <CLCD_voidInit+0x9ec>
	else if (__tmp > 255)
    1ddc:	fe 01       	movw	r30, r28
    1dde:	ef 58       	subi	r30, 0x8F	; 143
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	60 81       	ld	r22, Z
    1de4:	71 81       	ldd	r23, Z+1	; 0x01
    1de6:	82 81       	ldd	r24, Z+2	; 0x02
    1de8:	93 81       	ldd	r25, Z+3	; 0x03
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	4f e7       	ldi	r20, 0x7F	; 127
    1df0:	53 e4       	ldi	r21, 0x43	; 67
    1df2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1df6:	18 16       	cp	r1, r24
    1df8:	0c f0       	brlt	.+2      	; 0x1dfc <CLCD_voidInit+0x84c>
    1dfa:	c0 c0       	rjmp	.+384    	; 0x1f7c <CLCD_voidInit+0x9cc>
	{
		_delay_ms(__us / 1000.0);
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	eb 58       	subi	r30, 0x8B	; 139
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	60 81       	ld	r22, Z
    1e04:	71 81       	ldd	r23, Z+1	; 0x01
    1e06:	82 81       	ldd	r24, Z+2	; 0x02
    1e08:	93 81       	ldd	r25, Z+3	; 0x03
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	4a e7       	ldi	r20, 0x7A	; 122
    1e10:	54 e4       	ldi	r21, 0x44	; 68
    1e12:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e16:	dc 01       	movw	r26, r24
    1e18:	cb 01       	movw	r24, r22
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e4 59       	subi	r30, 0x94	; 148
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 83       	st	Z, r24
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	a2 83       	std	Z+2, r26	; 0x02
    1e26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	8e 01       	movw	r16, r28
    1e2a:	08 59       	subi	r16, 0x98	; 152
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e4 59       	subi	r30, 0x94	; 148
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a ef       	ldi	r20, 0xFA	; 250
    1e42:	54 e4       	ldi	r21, 0x44	; 68
    1e44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	a2 83       	std	Z+2, r26	; 0x02
    1e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e56:	fe 01       	movw	r30, r28
    1e58:	e8 59       	subi	r30, 0x98	; 152
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	44 f4       	brge	.+16     	; 0x1e84 <CLCD_voidInit+0x8d4>
		__ticks = 1;
    1e74:	fe 01       	movw	r30, r28
    1e76:	ea 59       	subi	r30, 0x9A	; 154
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	64 c0       	rjmp	.+200    	; 0x1f4c <CLCD_voidInit+0x99c>
	else if (__tmp > 65535)
    1e84:	fe 01       	movw	r30, r28
    1e86:	e8 59       	subi	r30, 0x98	; 152
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	0c f0       	brlt	.+2      	; 0x1ea4 <CLCD_voidInit+0x8f4>
    1ea2:	43 c0       	rjmp	.+134    	; 0x1f2a <CLCD_voidInit+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	e4 59       	subi	r30, 0x94	; 148
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8e 01       	movw	r16, r28
    1ec4:	0a 59       	subi	r16, 0x9A	; 154
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	1f c0       	rjmp	.+62     	; 0x1f1a <CLCD_voidInit+0x96a>
    1edc:	fe 01       	movw	r30, r28
    1ede:	ec 59       	subi	r30, 0x9C	; 156
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	88 ec       	ldi	r24, 0xC8	; 200
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1eea:	fe 01       	movw	r30, r28
    1eec:	ec 59       	subi	r30, 0x9C	; 156
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <CLCD_voidInit+0x944>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ec 59       	subi	r30, 0x9C	; 156
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	de 01       	movw	r26, r28
    1f04:	aa 59       	subi	r26, 0x9A	; 154
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	ea 59       	subi	r30, 0x9A	; 154
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	ea 59       	subi	r30, 0x9A	; 154
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	d1 f6       	brne	.-76     	; 0x1edc <CLCD_voidInit+0x92c>
    1f28:	4b c0       	rjmp	.+150    	; 0x1fc0 <CLCD_voidInit+0xa10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	0a 59       	subi	r16, 0x9A	; 154
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e8 59       	subi	r30, 0x98	; 152
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	de 01       	movw	r26, r28
    1f4e:	ae 59       	subi	r26, 0x9E	; 158
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	ea 59       	subi	r30, 0x9A	; 154
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	11 96       	adiw	r26, 0x01	; 1
    1f5e:	9c 93       	st	X, r25
    1f60:	8e 93       	st	-X, r24
    1f62:	fe 01       	movw	r30, r28
    1f64:	ee 59       	subi	r30, 0x9E	; 158
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	f1 f7       	brne	.-4      	; 0x1f6c <CLCD_voidInit+0x9bc>
    1f70:	fe 01       	movw	r30, r28
    1f72:	ee 59       	subi	r30, 0x9E	; 158
    1f74:	ff 4f       	sbci	r31, 0xFF	; 255
    1f76:	91 83       	std	Z+1, r25	; 0x01
    1f78:	80 83       	st	Z, r24
    1f7a:	22 c0       	rjmp	.+68     	; 0x1fc0 <CLCD_voidInit+0xa10>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7c:	8e 01       	movw	r16, r28
    1f7e:	00 59       	subi	r16, 0x90	; 144
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	ef 58       	subi	r30, 0x8F	; 143
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	f8 01       	movw	r30, r16
    1f9a:	80 83       	st	Z, r24
    1f9c:	de 01       	movw	r26, r28
    1f9e:	af 59       	subi	r26, 0x9F	; 159
    1fa0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e0 59       	subi	r30, 0x90	; 144
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 81       	ld	r24, Z
    1faa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fac:	fe 01       	movw	r30, r28
    1fae:	ef 59       	subi	r30, 0x9F	; 159
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	8a 95       	dec	r24
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <CLCD_voidInit+0xa04>
    1fb8:	fe 01       	movw	r30, r28
    1fba:	ef 59       	subi	r30, 0x9F	; 159
    1fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbe:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x02);
    1fc0:	82 e0       	ldi	r24, 0x02	; 2
    1fc2:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	e3 5a       	subi	r30, 0xA3	; 163
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a6 e1       	ldi	r26, 0x16	; 22
    1fd2:	b3 e4       	ldi	r27, 0x43	; 67
    1fd4:	80 83       	st	Z, r24
    1fd6:	91 83       	std	Z+1, r25	; 0x01
    1fd8:	a2 83       	std	Z+2, r26	; 0x02
    1fda:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fdc:	8e 01       	movw	r16, r28
    1fde:	07 5a       	subi	r16, 0xA7	; 167
    1fe0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fe2:	fe 01       	movw	r30, r28
    1fe4:	e3 5a       	subi	r30, 0xA3	; 163
    1fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe8:	60 81       	ld	r22, Z
    1fea:	71 81       	ldd	r23, Z+1	; 0x01
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	93 81       	ldd	r25, Z+3	; 0x03
    1ff0:	2b ea       	ldi	r18, 0xAB	; 171
    1ff2:	3a ea       	ldi	r19, 0xAA	; 170
    1ff4:	4a e2       	ldi	r20, 0x2A	; 42
    1ff6:	50 e4       	ldi	r21, 0x40	; 64
    1ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ffc:	dc 01       	movw	r26, r24
    1ffe:	cb 01       	movw	r24, r22
    2000:	f8 01       	movw	r30, r16
    2002:	80 83       	st	Z, r24
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	a2 83       	std	Z+2, r26	; 0x02
    2008:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    200a:	fe 01       	movw	r30, r28
    200c:	e7 5a       	subi	r30, 0xA7	; 167
    200e:	ff 4f       	sbci	r31, 0xFF	; 255
    2010:	60 81       	ld	r22, Z
    2012:	71 81       	ldd	r23, Z+1	; 0x01
    2014:	82 81       	ldd	r24, Z+2	; 0x02
    2016:	93 81       	ldd	r25, Z+3	; 0x03
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	34 f4       	brge	.+12     	; 0x2034 <CLCD_voidInit+0xa84>
		__ticks = 1;
    2028:	fe 01       	movw	r30, r28
    202a:	e8 5a       	subi	r30, 0xA8	; 168
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	80 83       	st	Z, r24
    2032:	e0 c0       	rjmp	.+448    	; 0x21f4 <CLCD_voidInit+0xc44>
	else if (__tmp > 255)
    2034:	fe 01       	movw	r30, r28
    2036:	e7 5a       	subi	r30, 0xA7	; 167
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	60 81       	ld	r22, Z
    203c:	71 81       	ldd	r23, Z+1	; 0x01
    203e:	82 81       	ldd	r24, Z+2	; 0x02
    2040:	93 81       	ldd	r25, Z+3	; 0x03
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4f e7       	ldi	r20, 0x7F	; 127
    2048:	53 e4       	ldi	r21, 0x43	; 67
    204a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    204e:	18 16       	cp	r1, r24
    2050:	0c f0       	brlt	.+2      	; 0x2054 <CLCD_voidInit+0xaa4>
    2052:	c0 c0       	rjmp	.+384    	; 0x21d4 <CLCD_voidInit+0xc24>
	{
		_delay_ms(__us / 1000.0);
    2054:	fe 01       	movw	r30, r28
    2056:	e3 5a       	subi	r30, 0xA3	; 163
    2058:	ff 4f       	sbci	r31, 0xFF	; 255
    205a:	60 81       	ld	r22, Z
    205c:	71 81       	ldd	r23, Z+1	; 0x01
    205e:	82 81       	ldd	r24, Z+2	; 0x02
    2060:	93 81       	ldd	r25, Z+3	; 0x03
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a e7       	ldi	r20, 0x7A	; 122
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	fe 01       	movw	r30, r28
    2074:	ec 5a       	subi	r30, 0xAC	; 172
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 83       	st	Z, r24
    207a:	91 83       	std	Z+1, r25	; 0x01
    207c:	a2 83       	std	Z+2, r26	; 0x02
    207e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	8e 01       	movw	r16, r28
    2082:	00 5b       	subi	r16, 0xB0	; 176
    2084:	1f 4f       	sbci	r17, 0xFF	; 255
    2086:	fe 01       	movw	r30, r28
    2088:	ec 5a       	subi	r30, 0xAC	; 172
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	60 81       	ld	r22, Z
    208e:	71 81       	ldd	r23, Z+1	; 0x01
    2090:	82 81       	ldd	r24, Z+2	; 0x02
    2092:	93 81       	ldd	r25, Z+3	; 0x03
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	4a ef       	ldi	r20, 0xFA	; 250
    209a:	54 e4       	ldi	r21, 0x44	; 68
    209c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20a0:	dc 01       	movw	r26, r24
    20a2:	cb 01       	movw	r24, r22
    20a4:	f8 01       	movw	r30, r16
    20a6:	80 83       	st	Z, r24
    20a8:	91 83       	std	Z+1, r25	; 0x01
    20aa:	a2 83       	std	Z+2, r26	; 0x02
    20ac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20ae:	fe 01       	movw	r30, r28
    20b0:	e0 5b       	subi	r30, 0xB0	; 176
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	60 81       	ld	r22, Z
    20b6:	71 81       	ldd	r23, Z+1	; 0x01
    20b8:	82 81       	ldd	r24, Z+2	; 0x02
    20ba:	93 81       	ldd	r25, Z+3	; 0x03
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	44 f4       	brge	.+16     	; 0x20dc <CLCD_voidInit+0xb2c>
		__ticks = 1;
    20cc:	fe 01       	movw	r30, r28
    20ce:	e2 5b       	subi	r30, 0xB2	; 178
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	91 83       	std	Z+1, r25	; 0x01
    20d8:	80 83       	st	Z, r24
    20da:	64 c0       	rjmp	.+200    	; 0x21a4 <CLCD_voidInit+0xbf4>
	else if (__tmp > 65535)
    20dc:	fe 01       	movw	r30, r28
    20de:	e0 5b       	subi	r30, 0xB0	; 176
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	60 81       	ld	r22, Z
    20e4:	71 81       	ldd	r23, Z+1	; 0x01
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	93 81       	ldd	r25, Z+3	; 0x03
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	3f ef       	ldi	r19, 0xFF	; 255
    20ee:	4f e7       	ldi	r20, 0x7F	; 127
    20f0:	57 e4       	ldi	r21, 0x47	; 71
    20f2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20f6:	18 16       	cp	r1, r24
    20f8:	0c f0       	brlt	.+2      	; 0x20fc <CLCD_voidInit+0xb4c>
    20fa:	43 c0       	rjmp	.+134    	; 0x2182 <CLCD_voidInit+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20fc:	fe 01       	movw	r30, r28
    20fe:	ec 5a       	subi	r30, 0xAC	; 172
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	60 81       	ld	r22, Z
    2104:	71 81       	ldd	r23, Z+1	; 0x01
    2106:	82 81       	ldd	r24, Z+2	; 0x02
    2108:	93 81       	ldd	r25, Z+3	; 0x03
    210a:	20 e0       	ldi	r18, 0x00	; 0
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	40 e2       	ldi	r20, 0x20	; 32
    2110:	51 e4       	ldi	r21, 0x41	; 65
    2112:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	8e 01       	movw	r16, r28
    211c:	02 5b       	subi	r16, 0xB2	; 178
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	f8 01       	movw	r30, r16
    212e:	91 83       	std	Z+1, r25	; 0x01
    2130:	80 83       	st	Z, r24
    2132:	1f c0       	rjmp	.+62     	; 0x2172 <CLCD_voidInit+0xbc2>
    2134:	fe 01       	movw	r30, r28
    2136:	e4 5b       	subi	r30, 0xB4	; 180
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	88 ec       	ldi	r24, 0xC8	; 200
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2142:	fe 01       	movw	r30, r28
    2144:	e4 5b       	subi	r30, 0xB4	; 180
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	80 81       	ld	r24, Z
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <CLCD_voidInit+0xb9c>
    2150:	fe 01       	movw	r30, r28
    2152:	e4 5b       	subi	r30, 0xB4	; 180
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    215a:	de 01       	movw	r26, r28
    215c:	a2 5b       	subi	r26, 0xB2	; 178
    215e:	bf 4f       	sbci	r27, 0xFF	; 255
    2160:	fe 01       	movw	r30, r28
    2162:	e2 5b       	subi	r30, 0xB2	; 178
    2164:	ff 4f       	sbci	r31, 0xFF	; 255
    2166:	80 81       	ld	r24, Z
    2168:	91 81       	ldd	r25, Z+1	; 0x01
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	11 96       	adiw	r26, 0x01	; 1
    216e:	9c 93       	st	X, r25
    2170:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	fe 01       	movw	r30, r28
    2174:	e2 5b       	subi	r30, 0xB2	; 178
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 81       	ld	r24, Z
    217a:	91 81       	ldd	r25, Z+1	; 0x01
    217c:	00 97       	sbiw	r24, 0x00	; 0
    217e:	d1 f6       	brne	.-76     	; 0x2134 <CLCD_voidInit+0xb84>
    2180:	4b c0       	rjmp	.+150    	; 0x2218 <CLCD_voidInit+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2182:	8e 01       	movw	r16, r28
    2184:	02 5b       	subi	r16, 0xB2	; 178
    2186:	1f 4f       	sbci	r17, 0xFF	; 255
    2188:	fe 01       	movw	r30, r28
    218a:	e0 5b       	subi	r30, 0xB0	; 176
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	60 81       	ld	r22, Z
    2190:	71 81       	ldd	r23, Z+1	; 0x01
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	93 81       	ldd	r25, Z+3	; 0x03
    2196:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	f8 01       	movw	r30, r16
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	de 01       	movw	r26, r28
    21a6:	a6 5b       	subi	r26, 0xB6	; 182
    21a8:	bf 4f       	sbci	r27, 0xFF	; 255
    21aa:	fe 01       	movw	r30, r28
    21ac:	e2 5b       	subi	r30, 0xB2	; 178
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	11 96       	adiw	r26, 0x01	; 1
    21b6:	9c 93       	st	X, r25
    21b8:	8e 93       	st	-X, r24
    21ba:	fe 01       	movw	r30, r28
    21bc:	e6 5b       	subi	r30, 0xB6	; 182
    21be:	ff 4f       	sbci	r31, 0xFF	; 255
    21c0:	80 81       	ld	r24, Z
    21c2:	91 81       	ldd	r25, Z+1	; 0x01
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <CLCD_voidInit+0xc14>
    21c8:	fe 01       	movw	r30, r28
    21ca:	e6 5b       	subi	r30, 0xB6	; 182
    21cc:	ff 4f       	sbci	r31, 0xFF	; 255
    21ce:	91 83       	std	Z+1, r25	; 0x01
    21d0:	80 83       	st	Z, r24
    21d2:	22 c0       	rjmp	.+68     	; 0x2218 <CLCD_voidInit+0xc68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21d4:	8e 01       	movw	r16, r28
    21d6:	08 5a       	subi	r16, 0xA8	; 168
    21d8:	1f 4f       	sbci	r17, 0xFF	; 255
    21da:	fe 01       	movw	r30, r28
    21dc:	e7 5a       	subi	r30, 0xA7	; 167
    21de:	ff 4f       	sbci	r31, 0xFF	; 255
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	f8 01       	movw	r30, r16
    21f2:	80 83       	st	Z, r24
    21f4:	de 01       	movw	r26, r28
    21f6:	a7 5b       	subi	r26, 0xB7	; 183
    21f8:	bf 4f       	sbci	r27, 0xFF	; 255
    21fa:	fe 01       	movw	r30, r28
    21fc:	e8 5a       	subi	r30, 0xA8	; 168
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2204:	fe 01       	movw	r30, r28
    2206:	e7 5b       	subi	r30, 0xB7	; 183
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	80 81       	ld	r24, Z
    220c:	8a 95       	dec	r24
    220e:	f1 f7       	brne	.-4      	; 0x220c <CLCD_voidInit+0xc5c>
    2210:	fe 01       	movw	r30, r28
    2212:	e7 5b       	subi	r30, 0xB7	; 183
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x06);
    2218:	86 e0       	ldi	r24, 0x06	; 6
    221a:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    221e:	fe 01       	movw	r30, r28
    2220:	eb 5b       	subi	r30, 0xBB	; 187
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a6 e1       	ldi	r26, 0x16	; 22
    222a:	b3 e4       	ldi	r27, 0x43	; 67
    222c:	80 83       	st	Z, r24
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	a2 83       	std	Z+2, r26	; 0x02
    2232:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2234:	8e 01       	movw	r16, r28
    2236:	0f 5b       	subi	r16, 0xBF	; 191
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	eb 5b       	subi	r30, 0xBB	; 187
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	2b ea       	ldi	r18, 0xAB	; 171
    224a:	3a ea       	ldi	r19, 0xAA	; 170
    224c:	4a e2       	ldi	r20, 0x2A	; 42
    224e:	50 e4       	ldi	r21, 0x40	; 64
    2250:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	80 83       	st	Z, r24
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	a2 83       	std	Z+2, r26	; 0x02
    2260:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2262:	fe 01       	movw	r30, r28
    2264:	ef 5b       	subi	r30, 0xBF	; 191
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	34 f4       	brge	.+12     	; 0x228c <CLCD_voidInit+0xcdc>
		__ticks = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	fe 01       	movw	r30, r28
    2284:	e0 5c       	subi	r30, 0xC0	; 192
    2286:	ff 4f       	sbci	r31, 0xFF	; 255
    2288:	80 83       	st	Z, r24
    228a:	9d c0       	rjmp	.+314    	; 0x23c6 <CLCD_voidInit+0xe16>
	else if (__tmp > 255)
    228c:	fe 01       	movw	r30, r28
    228e:	ef 5b       	subi	r30, 0xBF	; 191
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	60 81       	ld	r22, Z
    2294:	71 81       	ldd	r23, Z+1	; 0x01
    2296:	82 81       	ldd	r24, Z+2	; 0x02
    2298:	93 81       	ldd	r25, Z+3	; 0x03
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	4f e7       	ldi	r20, 0x7F	; 127
    22a0:	53 e4       	ldi	r21, 0x43	; 67
    22a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22a6:	18 16       	cp	r1, r24
    22a8:	0c f0       	brlt	.+2      	; 0x22ac <CLCD_voidInit+0xcfc>
    22aa:	7e c0       	rjmp	.+252    	; 0x23a8 <CLCD_voidInit+0xdf8>
	{
		_delay_ms(__us / 1000.0);
    22ac:	fe 01       	movw	r30, r28
    22ae:	eb 5b       	subi	r30, 0xBB	; 187
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	60 81       	ld	r22, Z
    22b4:	71 81       	ldd	r23, Z+1	; 0x01
    22b6:	82 81       	ldd	r24, Z+2	; 0x02
    22b8:	93 81       	ldd	r25, Z+3	; 0x03
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a e7       	ldi	r20, 0x7A	; 122
    22c0:	54 e4       	ldi	r21, 0x44	; 68
    22c2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8c af       	std	Y+60, r24	; 0x3c
    22cc:	9d af       	std	Y+61, r25	; 0x3d
    22ce:	ae af       	std	Y+62, r26	; 0x3e
    22d0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    22d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    22d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    22d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	4a ef       	ldi	r20, 0xFA	; 250
    22e0:	54 e4       	ldi	r21, 0x44	; 68
    22e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22e6:	dc 01       	movw	r26, r24
    22e8:	cb 01       	movw	r24, r22
    22ea:	88 af       	std	Y+56, r24	; 0x38
    22ec:	99 af       	std	Y+57, r25	; 0x39
    22ee:	aa af       	std	Y+58, r26	; 0x3a
    22f0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    22f2:	68 ad       	ldd	r22, Y+56	; 0x38
    22f4:	79 ad       	ldd	r23, Y+57	; 0x39
    22f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    22f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	5f e3       	ldi	r21, 0x3F	; 63
    2302:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2306:	88 23       	and	r24, r24
    2308:	2c f4       	brge	.+10     	; 0x2314 <CLCD_voidInit+0xd64>
		__ticks = 1;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	9f ab       	std	Y+55, r25	; 0x37
    2310:	8e ab       	std	Y+54, r24	; 0x36
    2312:	3f c0       	rjmp	.+126    	; 0x2392 <CLCD_voidInit+0xde2>
	else if (__tmp > 65535)
    2314:	68 ad       	ldd	r22, Y+56	; 0x38
    2316:	79 ad       	ldd	r23, Y+57	; 0x39
    2318:	8a ad       	ldd	r24, Y+58	; 0x3a
    231a:	9b ad       	ldd	r25, Y+59	; 0x3b
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	3f ef       	ldi	r19, 0xFF	; 255
    2320:	4f e7       	ldi	r20, 0x7F	; 127
    2322:	57 e4       	ldi	r21, 0x47	; 71
    2324:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2328:	18 16       	cp	r1, r24
    232a:	4c f5       	brge	.+82     	; 0x237e <CLCD_voidInit+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    232c:	6c ad       	ldd	r22, Y+60	; 0x3c
    232e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2330:	8e ad       	ldd	r24, Y+62	; 0x3e
    2332:	9f ad       	ldd	r25, Y+63	; 0x3f
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e2       	ldi	r20, 0x20	; 32
    233a:	51 e4       	ldi	r21, 0x41	; 65
    233c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2340:	dc 01       	movw	r26, r24
    2342:	cb 01       	movw	r24, r22
    2344:	bc 01       	movw	r22, r24
    2346:	cd 01       	movw	r24, r26
    2348:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    234c:	dc 01       	movw	r26, r24
    234e:	cb 01       	movw	r24, r22
    2350:	9f ab       	std	Y+55, r25	; 0x37
    2352:	8e ab       	std	Y+54, r24	; 0x36
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <CLCD_voidInit+0xdc4>
    2356:	88 ec       	ldi	r24, 0xC8	; 200
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	9d ab       	std	Y+53, r25	; 0x35
    235c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    235e:	8c a9       	ldd	r24, Y+52	; 0x34
    2360:	9d a9       	ldd	r25, Y+53	; 0x35
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	f1 f7       	brne	.-4      	; 0x2362 <CLCD_voidInit+0xdb2>
    2366:	9d ab       	std	Y+53, r25	; 0x35
    2368:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236a:	8e a9       	ldd	r24, Y+54	; 0x36
    236c:	9f a9       	ldd	r25, Y+55	; 0x37
    236e:	01 97       	sbiw	r24, 0x01	; 1
    2370:	9f ab       	std	Y+55, r25	; 0x37
    2372:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2374:	8e a9       	ldd	r24, Y+54	; 0x36
    2376:	9f a9       	ldd	r25, Y+55	; 0x37
    2378:	00 97       	sbiw	r24, 0x00	; 0
    237a:	69 f7       	brne	.-38     	; 0x2356 <CLCD_voidInit+0xda6>
    237c:	2d c0       	rjmp	.+90     	; 0x23d8 <CLCD_voidInit+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    237e:	68 ad       	ldd	r22, Y+56	; 0x38
    2380:	79 ad       	ldd	r23, Y+57	; 0x39
    2382:	8a ad       	ldd	r24, Y+58	; 0x3a
    2384:	9b ad       	ldd	r25, Y+59	; 0x3b
    2386:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    238a:	dc 01       	movw	r26, r24
    238c:	cb 01       	movw	r24, r22
    238e:	9f ab       	std	Y+55, r25	; 0x37
    2390:	8e ab       	std	Y+54, r24	; 0x36
    2392:	8e a9       	ldd	r24, Y+54	; 0x36
    2394:	9f a9       	ldd	r25, Y+55	; 0x37
    2396:	9b ab       	std	Y+51, r25	; 0x33
    2398:	8a ab       	std	Y+50, r24	; 0x32
    239a:	8a a9       	ldd	r24, Y+50	; 0x32
    239c:	9b a9       	ldd	r25, Y+51	; 0x33
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <CLCD_voidInit+0xdee>
    23a2:	9b ab       	std	Y+51, r25	; 0x33
    23a4:	8a ab       	std	Y+50, r24	; 0x32
    23a6:	18 c0       	rjmp	.+48     	; 0x23d8 <CLCD_voidInit+0xe28>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23a8:	fe 01       	movw	r30, r28
    23aa:	ef 5b       	subi	r30, 0xBF	; 191
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	60 81       	ld	r22, Z
    23b0:	71 81       	ldd	r23, Z+1	; 0x01
    23b2:	82 81       	ldd	r24, Z+2	; 0x02
    23b4:	93 81       	ldd	r25, Z+3	; 0x03
    23b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	fe 01       	movw	r30, r28
    23c0:	e0 5c       	subi	r30, 0xC0	; 192
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	80 83       	st	Z, r24
    23c6:	fe 01       	movw	r30, r28
    23c8:	e0 5c       	subi	r30, 0xC0	; 192
    23ca:	ff 4f       	sbci	r31, 0xFF	; 255
    23cc:	80 81       	ld	r24, Z
    23ce:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23d0:	89 a9       	ldd	r24, Y+49	; 0x31
    23d2:	8a 95       	dec	r24
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <CLCD_voidInit+0xe22>
    23d6:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(150);
	CLCD_voidSendCommand(0x0d);
    23d8:	8d e0       	ldi	r24, 0x0D	; 13
    23da:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	a6 e1       	ldi	r26, 0x16	; 22
    23e4:	b3 e4       	ldi	r27, 0x43	; 67
    23e6:	8d a7       	std	Y+45, r24	; 0x2d
    23e8:	9e a7       	std	Y+46, r25	; 0x2e
    23ea:	af a7       	std	Y+47, r26	; 0x2f
    23ec:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23ee:	6d a5       	ldd	r22, Y+45	; 0x2d
    23f0:	7e a5       	ldd	r23, Y+46	; 0x2e
    23f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    23f4:	98 a9       	ldd	r25, Y+48	; 0x30
    23f6:	2b ea       	ldi	r18, 0xAB	; 171
    23f8:	3a ea       	ldi	r19, 0xAA	; 170
    23fa:	4a e2       	ldi	r20, 0x2A	; 42
    23fc:	50 e4       	ldi	r21, 0x40	; 64
    23fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	89 a7       	std	Y+41, r24	; 0x29
    2408:	9a a7       	std	Y+42, r25	; 0x2a
    240a:	ab a7       	std	Y+43, r26	; 0x2b
    240c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    240e:	69 a5       	ldd	r22, Y+41	; 0x29
    2410:	7a a5       	ldd	r23, Y+42	; 0x2a
    2412:	8b a5       	ldd	r24, Y+43	; 0x2b
    2414:	9c a5       	ldd	r25, Y+44	; 0x2c
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e8       	ldi	r20, 0x80	; 128
    241c:	5f e3       	ldi	r21, 0x3F	; 63
    241e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2422:	88 23       	and	r24, r24
    2424:	1c f4       	brge	.+6      	; 0x242c <CLCD_voidInit+0xe7c>
		__ticks = 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	88 a7       	std	Y+40, r24	; 0x28
    242a:	91 c0       	rjmp	.+290    	; 0x254e <CLCD_voidInit+0xf9e>
	else if (__tmp > 255)
    242c:	69 a5       	ldd	r22, Y+41	; 0x29
    242e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2430:	8b a5       	ldd	r24, Y+43	; 0x2b
    2432:	9c a5       	ldd	r25, Y+44	; 0x2c
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	4f e7       	ldi	r20, 0x7F	; 127
    243a:	53 e4       	ldi	r21, 0x43	; 67
    243c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2440:	18 16       	cp	r1, r24
    2442:	0c f0       	brlt	.+2      	; 0x2446 <CLCD_voidInit+0xe96>
    2444:	7b c0       	rjmp	.+246    	; 0x253c <CLCD_voidInit+0xf8c>
	{
		_delay_ms(__us / 1000.0);
    2446:	6d a5       	ldd	r22, Y+45	; 0x2d
    2448:	7e a5       	ldd	r23, Y+46	; 0x2e
    244a:	8f a5       	ldd	r24, Y+47	; 0x2f
    244c:	98 a9       	ldd	r25, Y+48	; 0x30
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	4a e7       	ldi	r20, 0x7A	; 122
    2454:	54 e4       	ldi	r21, 0x44	; 68
    2456:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	8c a3       	std	Y+36, r24	; 0x24
    2460:	9d a3       	std	Y+37, r25	; 0x25
    2462:	ae a3       	std	Y+38, r26	; 0x26
    2464:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2466:	6c a1       	ldd	r22, Y+36	; 0x24
    2468:	7d a1       	ldd	r23, Y+37	; 0x25
    246a:	8e a1       	ldd	r24, Y+38	; 0x26
    246c:	9f a1       	ldd	r25, Y+39	; 0x27
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	4a ef       	ldi	r20, 0xFA	; 250
    2474:	54 e4       	ldi	r21, 0x44	; 68
    2476:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	88 a3       	std	Y+32, r24	; 0x20
    2480:	99 a3       	std	Y+33, r25	; 0x21
    2482:	aa a3       	std	Y+34, r26	; 0x22
    2484:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2486:	68 a1       	ldd	r22, Y+32	; 0x20
    2488:	79 a1       	ldd	r23, Y+33	; 0x21
    248a:	8a a1       	ldd	r24, Y+34	; 0x22
    248c:	9b a1       	ldd	r25, Y+35	; 0x23
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e8       	ldi	r20, 0x80	; 128
    2494:	5f e3       	ldi	r21, 0x3F	; 63
    2496:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    249a:	88 23       	and	r24, r24
    249c:	2c f4       	brge	.+10     	; 0x24a8 <CLCD_voidInit+0xef8>
		__ticks = 1;
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9f 8f       	std	Y+31, r25	; 0x1f
    24a4:	8e 8f       	std	Y+30, r24	; 0x1e
    24a6:	3f c0       	rjmp	.+126    	; 0x2526 <CLCD_voidInit+0xf76>
	else if (__tmp > 65535)
    24a8:	68 a1       	ldd	r22, Y+32	; 0x20
    24aa:	79 a1       	ldd	r23, Y+33	; 0x21
    24ac:	8a a1       	ldd	r24, Y+34	; 0x22
    24ae:	9b a1       	ldd	r25, Y+35	; 0x23
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	3f ef       	ldi	r19, 0xFF	; 255
    24b4:	4f e7       	ldi	r20, 0x7F	; 127
    24b6:	57 e4       	ldi	r21, 0x47	; 71
    24b8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24bc:	18 16       	cp	r1, r24
    24be:	4c f5       	brge	.+82     	; 0x2512 <CLCD_voidInit+0xf62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c0:	6c a1       	ldd	r22, Y+36	; 0x24
    24c2:	7d a1       	ldd	r23, Y+37	; 0x25
    24c4:	8e a1       	ldd	r24, Y+38	; 0x26
    24c6:	9f a1       	ldd	r25, Y+39	; 0x27
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	40 e2       	ldi	r20, 0x20	; 32
    24ce:	51 e4       	ldi	r21, 0x41	; 65
    24d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	bc 01       	movw	r22, r24
    24da:	cd 01       	movw	r24, r26
    24dc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	9f 8f       	std	Y+31, r25	; 0x1f
    24e6:	8e 8f       	std	Y+30, r24	; 0x1e
    24e8:	0f c0       	rjmp	.+30     	; 0x2508 <CLCD_voidInit+0xf58>
    24ea:	88 ec       	ldi	r24, 0xC8	; 200
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	9d 8f       	std	Y+29, r25	; 0x1d
    24f0:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24f4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	f1 f7       	brne	.-4      	; 0x24f6 <CLCD_voidInit+0xf46>
    24fa:	9d 8f       	std	Y+29, r25	; 0x1d
    24fc:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2500:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	9f 8f       	std	Y+31, r25	; 0x1f
    2506:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2508:	8e 8d       	ldd	r24, Y+30	; 0x1e
    250a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	69 f7       	brne	.-38     	; 0x24ea <CLCD_voidInit+0xf3a>
    2510:	24 c0       	rjmp	.+72     	; 0x255a <CLCD_voidInit+0xfaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2512:	68 a1       	ldd	r22, Y+32	; 0x20
    2514:	79 a1       	ldd	r23, Y+33	; 0x21
    2516:	8a a1       	ldd	r24, Y+34	; 0x22
    2518:	9b a1       	ldd	r25, Y+35	; 0x23
    251a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    251e:	dc 01       	movw	r26, r24
    2520:	cb 01       	movw	r24, r22
    2522:	9f 8f       	std	Y+31, r25	; 0x1f
    2524:	8e 8f       	std	Y+30, r24	; 0x1e
    2526:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2528:	9f 8d       	ldd	r25, Y+31	; 0x1f
    252a:	9b 8f       	std	Y+27, r25	; 0x1b
    252c:	8a 8f       	std	Y+26, r24	; 0x1a
    252e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2530:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2532:	01 97       	sbiw	r24, 0x01	; 1
    2534:	f1 f7       	brne	.-4      	; 0x2532 <CLCD_voidInit+0xf82>
    2536:	9b 8f       	std	Y+27, r25	; 0x1b
    2538:	8a 8f       	std	Y+26, r24	; 0x1a
    253a:	0f c0       	rjmp	.+30     	; 0x255a <CLCD_voidInit+0xfaa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    253c:	69 a5       	ldd	r22, Y+41	; 0x29
    253e:	7a a5       	ldd	r23, Y+42	; 0x2a
    2540:	8b a5       	ldd	r24, Y+43	; 0x2b
    2542:	9c a5       	ldd	r25, Y+44	; 0x2c
    2544:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2548:	dc 01       	movw	r26, r24
    254a:	cb 01       	movw	r24, r22
    254c:	88 a7       	std	Y+40, r24	; 0x28
    254e:	88 a5       	ldd	r24, Y+40	; 0x28
    2550:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2552:	89 8d       	ldd	r24, Y+25	; 0x19
    2554:	8a 95       	dec	r24
    2556:	f1 f7       	brne	.-4      	; 0x2554 <CLCD_voidInit+0xfa4>
    2558:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(150);
	CLCD_voidSendCommand(0x01);
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a6 e1       	ldi	r26, 0x16	; 22
    2566:	b3 e4       	ldi	r27, 0x43	; 67
    2568:	8d 8b       	std	Y+21, r24	; 0x15
    256a:	9e 8b       	std	Y+22, r25	; 0x16
    256c:	af 8b       	std	Y+23, r26	; 0x17
    256e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2570:	6d 89       	ldd	r22, Y+21	; 0x15
    2572:	7e 89       	ldd	r23, Y+22	; 0x16
    2574:	8f 89       	ldd	r24, Y+23	; 0x17
    2576:	98 8d       	ldd	r25, Y+24	; 0x18
    2578:	2b ea       	ldi	r18, 0xAB	; 171
    257a:	3a ea       	ldi	r19, 0xAA	; 170
    257c:	4a e2       	ldi	r20, 0x2A	; 42
    257e:	50 e4       	ldi	r21, 0x40	; 64
    2580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	89 8b       	std	Y+17, r24	; 0x11
    258a:	9a 8b       	std	Y+18, r25	; 0x12
    258c:	ab 8b       	std	Y+19, r26	; 0x13
    258e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2590:	69 89       	ldd	r22, Y+17	; 0x11
    2592:	7a 89       	ldd	r23, Y+18	; 0x12
    2594:	8b 89       	ldd	r24, Y+19	; 0x13
    2596:	9c 89       	ldd	r25, Y+20	; 0x14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e8       	ldi	r20, 0x80	; 128
    259e:	5f e3       	ldi	r21, 0x3F	; 63
    25a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	1c f4       	brge	.+6      	; 0x25ae <CLCD_voidInit+0xffe>
		__ticks = 1;
    25a8:	81 e0       	ldi	r24, 0x01	; 1
    25aa:	88 8b       	std	Y+16, r24	; 0x10
    25ac:	91 c0       	rjmp	.+290    	; 0x26d0 <CLCD_voidInit+0x1120>
	else if (__tmp > 255)
    25ae:	69 89       	ldd	r22, Y+17	; 0x11
    25b0:	7a 89       	ldd	r23, Y+18	; 0x12
    25b2:	8b 89       	ldd	r24, Y+19	; 0x13
    25b4:	9c 89       	ldd	r25, Y+20	; 0x14
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	53 e4       	ldi	r21, 0x43	; 67
    25be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <CLCD_voidInit+0x1018>
    25c6:	7b c0       	rjmp	.+246    	; 0x26be <CLCD_voidInit+0x110e>
	{
		_delay_ms(__us / 1000.0);
    25c8:	6d 89       	ldd	r22, Y+21	; 0x15
    25ca:	7e 89       	ldd	r23, Y+22	; 0x16
    25cc:	8f 89       	ldd	r24, Y+23	; 0x17
    25ce:	98 8d       	ldd	r25, Y+24	; 0x18
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a e7       	ldi	r20, 0x7A	; 122
    25d6:	54 e4       	ldi	r21, 0x44	; 68
    25d8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8c 87       	std	Y+12, r24	; 0x0c
    25e2:	9d 87       	std	Y+13, r25	; 0x0d
    25e4:	ae 87       	std	Y+14, r26	; 0x0e
    25e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    25ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	4a ef       	ldi	r20, 0xFA	; 250
    25f6:	54 e4       	ldi	r21, 0x44	; 68
    25f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	88 87       	std	Y+8, r24	; 0x08
    2602:	99 87       	std	Y+9, r25	; 0x09
    2604:	aa 87       	std	Y+10, r26	; 0x0a
    2606:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2608:	68 85       	ldd	r22, Y+8	; 0x08
    260a:	79 85       	ldd	r23, Y+9	; 0x09
    260c:	8a 85       	ldd	r24, Y+10	; 0x0a
    260e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	40 e8       	ldi	r20, 0x80	; 128
    2616:	5f e3       	ldi	r21, 0x3F	; 63
    2618:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    261c:	88 23       	and	r24, r24
    261e:	2c f4       	brge	.+10     	; 0x262a <CLCD_voidInit+0x107a>
		__ticks = 1;
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	90 e0       	ldi	r25, 0x00	; 0
    2624:	9f 83       	std	Y+7, r25	; 0x07
    2626:	8e 83       	std	Y+6, r24	; 0x06
    2628:	3f c0       	rjmp	.+126    	; 0x26a8 <CLCD_voidInit+0x10f8>
	else if (__tmp > 65535)
    262a:	68 85       	ldd	r22, Y+8	; 0x08
    262c:	79 85       	ldd	r23, Y+9	; 0x09
    262e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2630:	9b 85       	ldd	r25, Y+11	; 0x0b
    2632:	20 e0       	ldi	r18, 0x00	; 0
    2634:	3f ef       	ldi	r19, 0xFF	; 255
    2636:	4f e7       	ldi	r20, 0x7F	; 127
    2638:	57 e4       	ldi	r21, 0x47	; 71
    263a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    263e:	18 16       	cp	r1, r24
    2640:	4c f5       	brge	.+82     	; 0x2694 <CLCD_voidInit+0x10e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2642:	6c 85       	ldd	r22, Y+12	; 0x0c
    2644:	7d 85       	ldd	r23, Y+13	; 0x0d
    2646:	8e 85       	ldd	r24, Y+14	; 0x0e
    2648:	9f 85       	ldd	r25, Y+15	; 0x0f
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	40 e2       	ldi	r20, 0x20	; 32
    2650:	51 e4       	ldi	r21, 0x41	; 65
    2652:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	bc 01       	movw	r22, r24
    265c:	cd 01       	movw	r24, r26
    265e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2662:	dc 01       	movw	r26, r24
    2664:	cb 01       	movw	r24, r22
    2666:	9f 83       	std	Y+7, r25	; 0x07
    2668:	8e 83       	std	Y+6, r24	; 0x06
    266a:	0f c0       	rjmp	.+30     	; 0x268a <CLCD_voidInit+0x10da>
    266c:	88 ec       	ldi	r24, 0xC8	; 200
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	9d 83       	std	Y+5, r25	; 0x05
    2672:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2674:	8c 81       	ldd	r24, Y+4	; 0x04
    2676:	9d 81       	ldd	r25, Y+5	; 0x05
    2678:	01 97       	sbiw	r24, 0x01	; 1
    267a:	f1 f7       	brne	.-4      	; 0x2678 <CLCD_voidInit+0x10c8>
    267c:	9d 83       	std	Y+5, r25	; 0x05
    267e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2680:	8e 81       	ldd	r24, Y+6	; 0x06
    2682:	9f 81       	ldd	r25, Y+7	; 0x07
    2684:	01 97       	sbiw	r24, 0x01	; 1
    2686:	9f 83       	std	Y+7, r25	; 0x07
    2688:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    268a:	8e 81       	ldd	r24, Y+6	; 0x06
    268c:	9f 81       	ldd	r25, Y+7	; 0x07
    268e:	00 97       	sbiw	r24, 0x00	; 0
    2690:	69 f7       	brne	.-38     	; 0x266c <CLCD_voidInit+0x10bc>
    2692:	24 c0       	rjmp	.+72     	; 0x26dc <CLCD_voidInit+0x112c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2694:	68 85       	ldd	r22, Y+8	; 0x08
    2696:	79 85       	ldd	r23, Y+9	; 0x09
    2698:	8a 85       	ldd	r24, Y+10	; 0x0a
    269a:	9b 85       	ldd	r25, Y+11	; 0x0b
    269c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a0:	dc 01       	movw	r26, r24
    26a2:	cb 01       	movw	r24, r22
    26a4:	9f 83       	std	Y+7, r25	; 0x07
    26a6:	8e 83       	std	Y+6, r24	; 0x06
    26a8:	8e 81       	ldd	r24, Y+6	; 0x06
    26aa:	9f 81       	ldd	r25, Y+7	; 0x07
    26ac:	9b 83       	std	Y+3, r25	; 0x03
    26ae:	8a 83       	std	Y+2, r24	; 0x02
    26b0:	8a 81       	ldd	r24, Y+2	; 0x02
    26b2:	9b 81       	ldd	r25, Y+3	; 0x03
    26b4:	01 97       	sbiw	r24, 0x01	; 1
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <CLCD_voidInit+0x1104>
    26b8:	9b 83       	std	Y+3, r25	; 0x03
    26ba:	8a 83       	std	Y+2, r24	; 0x02
    26bc:	0f c0       	rjmp	.+30     	; 0x26dc <CLCD_voidInit+0x112c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26be:	69 89       	ldd	r22, Y+17	; 0x11
    26c0:	7a 89       	ldd	r23, Y+18	; 0x12
    26c2:	8b 89       	ldd	r24, Y+19	; 0x13
    26c4:	9c 89       	ldd	r25, Y+20	; 0x14
    26c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	88 8b       	std	Y+16, r24	; 0x10
    26d0:	88 89       	ldd	r24, Y+16	; 0x10
    26d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26d4:	89 81       	ldd	r24, Y+1	; 0x01
    26d6:	8a 95       	dec	r24
    26d8:	f1 f7       	brne	.-4      	; 0x26d6 <CLCD_voidInit+0x1126>
    26da:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
}
    26dc:	cc 53       	subi	r28, 0x3C	; 60
    26de:	df 4f       	sbci	r29, 0xFF	; 255
    26e0:	0f b6       	in	r0, 0x3f	; 63
    26e2:	f8 94       	cli
    26e4:	de bf       	out	0x3e, r29	; 62
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	cd bf       	out	0x3d, r28	; 61
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	1f 91       	pop	r17
    26f0:	0f 91       	pop	r16
    26f2:	08 95       	ret

000026f4 <CLCD_voidSendString>:

void CLCD_voidSendString(u8 *pvString)
{
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <CLCD_voidSendString+0x6>
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	9a 83       	std	Y+2, r25	; 0x02
    2700:	89 83       	std	Y+1, r24	; 0x01
    2702:	0a c0       	rjmp	.+20     	; 0x2718 <CLCD_voidSendString+0x24>
	while (*pvString !='\0')
	{
		CLCD_voidSendData(*pvString);
    2704:	e9 81       	ldd	r30, Y+1	; 0x01
    2706:	fa 81       	ldd	r31, Y+2	; 0x02
    2708:	80 81       	ld	r24, Z
    270a:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
		pvString++;
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	9a 81       	ldd	r25, Y+2	; 0x02
    2712:	01 96       	adiw	r24, 0x01	; 1
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
}

void CLCD_voidSendString(u8 *pvString)
{
	while (*pvString !='\0')
    2718:	e9 81       	ldd	r30, Y+1	; 0x01
    271a:	fa 81       	ldd	r31, Y+2	; 0x02
    271c:	80 81       	ld	r24, Z
    271e:	88 23       	and	r24, r24
    2720:	89 f7       	brne	.-30     	; 0x2704 <CLCD_voidSendString+0x10>
	{
		CLCD_voidSendData(*pvString);
		pvString++;
	}
}
    2722:	0f 90       	pop	r0
    2724:	0f 90       	pop	r0
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	08 95       	ret

0000272c <CLCD_voidGoToPosition>:

void CLCD_voidGoToPosition (u8 CLCD_uRow, u8 CLCD_u8Col)
{
    272c:	df 93       	push	r29
    272e:	cf 93       	push	r28
    2730:	00 d0       	rcall	.+0      	; 0x2732 <CLCD_voidGoToPosition+0x6>
    2732:	00 d0       	rcall	.+0      	; 0x2734 <CLCD_voidGoToPosition+0x8>
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	89 83       	std	Y+1, r24	; 0x01
    273a:	6a 83       	std	Y+2, r22	; 0x02
	switch(CLCD_uRow)
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	28 2f       	mov	r18, r24
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	3c 83       	std	Y+4, r19	; 0x04
    2744:	2b 83       	std	Y+3, r18	; 0x03
    2746:	8b 81       	ldd	r24, Y+3	; 0x03
    2748:	9c 81       	ldd	r25, Y+4	; 0x04
    274a:	81 30       	cpi	r24, 0x01	; 1
    274c:	91 05       	cpc	r25, r1
    274e:	d1 f0       	breq	.+52     	; 0x2784 <CLCD_voidGoToPosition+0x58>
    2750:	2b 81       	ldd	r18, Y+3	; 0x03
    2752:	3c 81       	ldd	r19, Y+4	; 0x04
    2754:	22 30       	cpi	r18, 0x02	; 2
    2756:	31 05       	cpc	r19, r1
    2758:	2c f4       	brge	.+10     	; 0x2764 <CLCD_voidGoToPosition+0x38>
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	00 97       	sbiw	r24, 0x00	; 0
    2760:	61 f0       	breq	.+24     	; 0x277a <CLCD_voidGoToPosition+0x4e>
    2762:	1e c0       	rjmp	.+60     	; 0x27a0 <CLCD_voidGoToPosition+0x74>
    2764:	2b 81       	ldd	r18, Y+3	; 0x03
    2766:	3c 81       	ldd	r19, Y+4	; 0x04
    2768:	22 30       	cpi	r18, 0x02	; 2
    276a:	31 05       	cpc	r19, r1
    276c:	81 f0       	breq	.+32     	; 0x278e <CLCD_voidGoToPosition+0x62>
    276e:	8b 81       	ldd	r24, Y+3	; 0x03
    2770:	9c 81       	ldd	r25, Y+4	; 0x04
    2772:	83 30       	cpi	r24, 0x03	; 3
    2774:	91 05       	cpc	r25, r1
    2776:	81 f0       	breq	.+32     	; 0x2798 <CLCD_voidGoToPosition+0x6c>
    2778:	13 c0       	rjmp	.+38     	; 0x27a0 <CLCD_voidGoToPosition+0x74>
	{
	case 0:
			CLCD_voidSendCommand(0x80 + CLCD_u8Col);break;
    277a:	8a 81       	ldd	r24, Y+2	; 0x02
    277c:	80 58       	subi	r24, 0x80	; 128
    277e:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    2782:	0e c0       	rjmp	.+28     	; 0x27a0 <CLCD_voidGoToPosition+0x74>
	case 1:
			CLCD_voidSendCommand(0xC0 + CLCD_u8Col);break;
    2784:	8a 81       	ldd	r24, Y+2	; 0x02
    2786:	80 54       	subi	r24, 0x40	; 64
    2788:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    278c:	09 c0       	rjmp	.+18     	; 0x27a0 <CLCD_voidGoToPosition+0x74>
	case 2:
			CLCD_voidSendCommand(0x94 + CLCD_u8Col);break;
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	8c 56       	subi	r24, 0x6C	; 108
    2792:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
    2796:	04 c0       	rjmp	.+8      	; 0x27a0 <CLCD_voidGoToPosition+0x74>
	case 3:
			CLCD_voidSendCommand(0xD4 + CLCD_u8Col);break;
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	8c 52       	subi	r24, 0x2C	; 44
    279c:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
	}
}
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar (u8 *pvPattern, u8 CLCD_u8BlockNum, u8 CLCD_u8x, u8 CLCD_u8y)
{
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	27 97       	sbiw	r28, 0x07	; 7
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    27c6:	6d 83       	std	Y+5, r22	; 0x05
    27c8:	4e 83       	std	Y+6, r20	; 0x06
    27ca:	2f 83       	std	Y+7, r18	; 0x07
	u8 CLCD_u8CGRAMAddress = 0, i = 0;
    27cc:	1a 82       	std	Y+2, r1	; 0x02
    27ce:	19 82       	std	Y+1, r1	; 0x01
	CLCD_u8CGRAMAddress = CLCD_u8BlockNum * 8;
    27d0:	8d 81       	ldd	r24, Y+5	; 0x05
    27d2:	88 2f       	mov	r24, r24
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	88 0f       	add	r24, r24
    27d8:	99 1f       	adc	r25, r25
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand (CLCD_u8CGRAMAddress+64);
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	80 5c       	subi	r24, 0xC0	; 192
    27e8:	0e 94 47 06 	call	0xc8e	; 0xc8e <CLCD_voidSendCommand>
	for (i = 0; i < 8; i++)
    27ec:	19 82       	std	Y+1, r1	; 0x01
    27ee:	0e c0       	rjmp	.+28     	; 0x280c <CLCD_voidWriteSpecialChar+0x5e>
	{
		CLCD_voidSendData(pvPattern[i]);
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	9c 81       	ldd	r25, Y+4	; 0x04
    27fa:	fc 01       	movw	r30, r24
    27fc:	e2 0f       	add	r30, r18
    27fe:	f3 1f       	adc	r31, r19
    2800:	80 81       	ld	r24, Z
    2802:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
void CLCD_voidWriteSpecialChar (u8 *pvPattern, u8 CLCD_u8BlockNum, u8 CLCD_u8x, u8 CLCD_u8y)
{
	u8 CLCD_u8CGRAMAddress = 0, i = 0;
	CLCD_u8CGRAMAddress = CLCD_u8BlockNum * 8;
	CLCD_voidSendCommand (CLCD_u8CGRAMAddress+64);
	for (i = 0; i < 8; i++)
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	8f 5f       	subi	r24, 0xFF	; 255
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	88 30       	cpi	r24, 0x08	; 8
    2810:	78 f3       	brcs	.-34     	; 0x27f0 <CLCD_voidWriteSpecialChar+0x42>
	{
		CLCD_voidSendData(pvPattern[i]);
	}
	CLCD_voidGoToPosition(CLCD_u8x, CLCD_u8y);
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	6f 81       	ldd	r22, Y+7	; 0x07
    2816:	0e 94 96 13 	call	0x272c	; 0x272c <CLCD_voidGoToPosition>
	CLCD_voidSendData(pvPattern);
    281a:	8b 81       	ldd	r24, Y+3	; 0x03
    281c:	9c 81       	ldd	r25, Y+4	; 0x04
    281e:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
}
    2822:	27 96       	adiw	r28, 0x07	; 7
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
    282e:	cf 91       	pop	r28
    2830:	df 91       	pop	r29
    2832:	08 95       	ret

00002834 <CLCD_voidSendNum>:

void CLCD_voidSendNum(u32 Num)
{
    2834:	df 93       	push	r29
    2836:	cf 93       	push	r28
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	2e 97       	sbiw	r28, 0x0e	; 14
    283e:	0f b6       	in	r0, 0x3f	; 63
    2840:	f8 94       	cli
    2842:	de bf       	out	0x3e, r29	; 62
    2844:	0f be       	out	0x3f, r0	; 63
    2846:	cd bf       	out	0x3d, r28	; 61
    2848:	9e 87       	std	Y+14, r25	; 0x0e
    284a:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr[10], i = 0, j = 0;
    284c:	1a 82       	std	Y+2, r1	; 0x02
    284e:	19 82       	std	Y+1, r1	; 0x01
	if (Num == 0)
    2850:	8d 85       	ldd	r24, Y+13	; 0x0d
    2852:	9e 85       	ldd	r25, Y+14	; 0x0e
    2854:	00 97       	sbiw	r24, 0x00	; 0
    2856:	11 f5       	brne	.+68     	; 0x289c <CLCD_voidSendNum+0x68>
	{
		CLCD_voidSendData('0');
    2858:	80 e3       	ldi	r24, 0x30	; 48
    285a:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
    285e:	39 c0       	rjmp	.+114    	; 0x28d2 <CLCD_voidSendNum+0x9e>
	}
	else
	{
		while(Num)
		{
			arr[i] = Num%10 + '0';
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	e8 2f       	mov	r30, r24
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	8d 85       	ldd	r24, Y+13	; 0x0d
    2868:	9e 85       	ldd	r25, Y+14	; 0x0e
    286a:	2a e0       	ldi	r18, 0x0A	; 10
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	b9 01       	movw	r22, r18
    2870:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__udivmodhi4>
    2874:	28 2f       	mov	r18, r24
    2876:	20 5d       	subi	r18, 0xD0	; 208
    2878:	ce 01       	movw	r24, r28
    287a:	03 96       	adiw	r24, 0x03	; 3
    287c:	e8 0f       	add	r30, r24
    287e:	f9 1f       	adc	r31, r25
    2880:	20 83       	st	Z, r18
			Num/=10;
    2882:	8d 85       	ldd	r24, Y+13	; 0x0d
    2884:	9e 85       	ldd	r25, Y+14	; 0x0e
    2886:	2a e0       	ldi	r18, 0x0A	; 10
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	b9 01       	movw	r22, r18
    288c:	0e 94 63 19 	call	0x32c6	; 0x32c6 <__udivmodhi4>
    2890:	cb 01       	movw	r24, r22
    2892:	9e 87       	std	Y+14, r25	; 0x0e
    2894:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Num)
    289c:	8d 85       	ldd	r24, Y+13	; 0x0d
    289e:	9e 85       	ldd	r25, Y+14	; 0x0e
    28a0:	00 97       	sbiw	r24, 0x00	; 0
    28a2:	f1 f6       	brne	.-68     	; 0x2860 <CLCD_voidSendNum+0x2c>
		{
			arr[i] = Num%10 + '0';
			Num/=10;
			i++;
		}
		for(j = i; j > 0; j--)
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	11 c0       	rjmp	.+34     	; 0x28cc <CLCD_voidSendNum+0x98>
		{
			CLCD_voidSendData(arr[j-1]);
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	9c 01       	movw	r18, r24
    28b2:	21 50       	subi	r18, 0x01	; 1
    28b4:	30 40       	sbci	r19, 0x00	; 0
    28b6:	ce 01       	movw	r24, r28
    28b8:	03 96       	adiw	r24, 0x03	; 3
    28ba:	fc 01       	movw	r30, r24
    28bc:	e2 0f       	add	r30, r18
    28be:	f3 1f       	adc	r31, r19
    28c0:	80 81       	ld	r24, Z
    28c2:	0e 94 92 08 	call	0x1124	; 0x1124 <CLCD_voidSendData>
		{
			arr[i] = Num%10 + '0';
			Num/=10;
			i++;
		}
		for(j = i; j > 0; j--)
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	81 50       	subi	r24, 0x01	; 1
    28ca:	89 83       	std	Y+1, r24	; 0x01
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	88 23       	and	r24, r24
    28d0:	61 f7       	brne	.-40     	; 0x28aa <CLCD_voidSendNum+0x76>
		{
			CLCD_voidSendData(arr[j-1]);
		}
	}
}
    28d2:	2e 96       	adiw	r28, 0x0e	; 14
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	f8 94       	cli
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	0f be       	out	0x3f, r0	; 63
    28dc:	cd bf       	out	0x3d, r28	; 61
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <DIO_voidSetPinDirection>:


                         /*************** PIN APIS ***************/

void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	27 97       	sbiw	r28, 0x07	; 7
    28ee:	0f b6       	in	r0, 0x3f	; 63
    28f0:	f8 94       	cli
    28f2:	de bf       	out	0x3e, r29	; 62
    28f4:	0f be       	out	0x3f, r0	; 63
    28f6:	cd bf       	out	0x3d, r28	; 61
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	6a 83       	std	Y+2, r22	; 0x02
    28fc:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	88 30       	cpi	r24, 0x08	; 8
    2902:	08 f0       	brcs	.+2      	; 0x2906 <DIO_voidSetPinDirection+0x22>
    2904:	ea c0       	rjmp	.+468    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
	{
		if(copy_u8PinDirection == DIO_PIN_OUTPUT)
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	09 f0       	breq	.+2      	; 0x290e <DIO_voidSetPinDirection+0x2a>
    290c:	6f c0       	rjmp	.+222    	; 0x29ec <DIO_voidSetPinDirection+0x108>
			switch(copy_u8PortId)
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	28 2f       	mov	r18, r24
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	3f 83       	std	Y+7, r19	; 0x07
    2916:	2e 83       	std	Y+6, r18	; 0x06
    2918:	8e 81       	ldd	r24, Y+6	; 0x06
    291a:	9f 81       	ldd	r25, Y+7	; 0x07
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	91 05       	cpc	r25, r1
    2920:	49 f1       	breq	.+82     	; 0x2974 <DIO_voidSetPinDirection+0x90>
    2922:	2e 81       	ldd	r18, Y+6	; 0x06
    2924:	3f 81       	ldd	r19, Y+7	; 0x07
    2926:	22 30       	cpi	r18, 0x02	; 2
    2928:	31 05       	cpc	r19, r1
    292a:	2c f4       	brge	.+10     	; 0x2936 <DIO_voidSetPinDirection+0x52>
    292c:	8e 81       	ldd	r24, Y+6	; 0x06
    292e:	9f 81       	ldd	r25, Y+7	; 0x07
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	61 f0       	breq	.+24     	; 0x294c <DIO_voidSetPinDirection+0x68>
    2934:	d2 c0       	rjmp	.+420    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
    2936:	2e 81       	ldd	r18, Y+6	; 0x06
    2938:	3f 81       	ldd	r19, Y+7	; 0x07
    293a:	22 30       	cpi	r18, 0x02	; 2
    293c:	31 05       	cpc	r19, r1
    293e:	71 f1       	breq	.+92     	; 0x299c <DIO_voidSetPinDirection+0xb8>
    2940:	8e 81       	ldd	r24, Y+6	; 0x06
    2942:	9f 81       	ldd	r25, Y+7	; 0x07
    2944:	83 30       	cpi	r24, 0x03	; 3
    2946:	91 05       	cpc	r25, r1
    2948:	e9 f1       	breq	.+122    	; 0x29c4 <DIO_voidSetPinDirection+0xe0>
    294a:	c7 c0       	rjmp	.+398    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:SET_BIT(DDRA,copy_u8PinId);break;
    294c:	aa e3       	ldi	r26, 0x3A	; 58
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	ea e3       	ldi	r30, 0x3A	; 58
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	48 2f       	mov	r20, r24
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	28 2f       	mov	r18, r24
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	02 2e       	mov	r0, r18
    2964:	02 c0       	rjmp	.+4      	; 0x296a <DIO_voidSetPinDirection+0x86>
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	0a 94       	dec	r0
    296c:	e2 f7       	brpl	.-8      	; 0x2966 <DIO_voidSetPinDirection+0x82>
    296e:	84 2b       	or	r24, r20
    2970:	8c 93       	st	X, r24
    2972:	b3 c0       	rjmp	.+358    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:SET_BIT(DDRB,copy_u8PinId);break;
    2974:	a7 e3       	ldi	r26, 0x37	; 55
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e7 e3       	ldi	r30, 0x37	; 55
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	48 2f       	mov	r20, r24
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	02 2e       	mov	r0, r18
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <DIO_voidSetPinDirection+0xae>
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	0a 94       	dec	r0
    2994:	e2 f7       	brpl	.-8      	; 0x298e <DIO_voidSetPinDirection+0xaa>
    2996:	84 2b       	or	r24, r20
    2998:	8c 93       	st	X, r24
    299a:	9f c0       	rjmp	.+318    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:SET_BIT(DDRC,copy_u8PinId);break;
    299c:	a4 e3       	ldi	r26, 0x34	; 52
    299e:	b0 e0       	ldi	r27, 0x00	; 0
    29a0:	e4 e3       	ldi	r30, 0x34	; 52
    29a2:	f0 e0       	ldi	r31, 0x00	; 0
    29a4:	80 81       	ld	r24, Z
    29a6:	48 2f       	mov	r20, r24
    29a8:	8a 81       	ldd	r24, Y+2	; 0x02
    29aa:	28 2f       	mov	r18, r24
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	02 2e       	mov	r0, r18
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <DIO_voidSetPinDirection+0xd6>
    29b6:	88 0f       	add	r24, r24
    29b8:	99 1f       	adc	r25, r25
    29ba:	0a 94       	dec	r0
    29bc:	e2 f7       	brpl	.-8      	; 0x29b6 <DIO_voidSetPinDirection+0xd2>
    29be:	84 2b       	or	r24, r20
    29c0:	8c 93       	st	X, r24
    29c2:	8b c0       	rjmp	.+278    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:SET_BIT(DDRD,copy_u8PinId);break;
    29c4:	a1 e3       	ldi	r26, 0x31	; 49
    29c6:	b0 e0       	ldi	r27, 0x00	; 0
    29c8:	e1 e3       	ldi	r30, 0x31	; 49
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	48 2f       	mov	r20, r24
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	02 2e       	mov	r0, r18
    29dc:	02 c0       	rjmp	.+4      	; 0x29e2 <DIO_voidSetPinDirection+0xfe>
    29de:	88 0f       	add	r24, r24
    29e0:	99 1f       	adc	r25, r25
    29e2:	0a 94       	dec	r0
    29e4:	e2 f7       	brpl	.-8      	; 0x29de <DIO_voidSetPinDirection+0xfa>
    29e6:	84 2b       	or	r24, r20
    29e8:	8c 93       	st	X, r24
    29ea:	77 c0       	rjmp	.+238    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			}
		else if(copy_u8PinDirection == DIO_PIN_INPUT)
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	88 23       	and	r24, r24
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <DIO_voidSetPinDirection+0x110>
    29f2:	73 c0       	rjmp	.+230    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			switch(copy_u8PortId)
    29f4:	89 81       	ldd	r24, Y+1	; 0x01
    29f6:	28 2f       	mov	r18, r24
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	3d 83       	std	Y+5, r19	; 0x05
    29fc:	2c 83       	std	Y+4, r18	; 0x04
    29fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2a00:	9d 81       	ldd	r25, Y+5	; 0x05
    2a02:	81 30       	cpi	r24, 0x01	; 1
    2a04:	91 05       	cpc	r25, r1
    2a06:	59 f1       	breq	.+86     	; 0x2a5e <DIO_voidSetPinDirection+0x17a>
    2a08:	2c 81       	ldd	r18, Y+4	; 0x04
    2a0a:	3d 81       	ldd	r19, Y+5	; 0x05
    2a0c:	22 30       	cpi	r18, 0x02	; 2
    2a0e:	31 05       	cpc	r19, r1
    2a10:	2c f4       	brge	.+10     	; 0x2a1c <DIO_voidSetPinDirection+0x138>
    2a12:	8c 81       	ldd	r24, Y+4	; 0x04
    2a14:	9d 81       	ldd	r25, Y+5	; 0x05
    2a16:	00 97       	sbiw	r24, 0x00	; 0
    2a18:	69 f0       	breq	.+26     	; 0x2a34 <DIO_voidSetPinDirection+0x150>
    2a1a:	5f c0       	rjmp	.+190    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
    2a1c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a1e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a20:	22 30       	cpi	r18, 0x02	; 2
    2a22:	31 05       	cpc	r19, r1
    2a24:	89 f1       	breq	.+98     	; 0x2a88 <DIO_voidSetPinDirection+0x1a4>
    2a26:	8c 81       	ldd	r24, Y+4	; 0x04
    2a28:	9d 81       	ldd	r25, Y+5	; 0x05
    2a2a:	83 30       	cpi	r24, 0x03	; 3
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	09 f4       	brne	.+2      	; 0x2a32 <DIO_voidSetPinDirection+0x14e>
    2a30:	40 c0       	rjmp	.+128    	; 0x2ab2 <DIO_voidSetPinDirection+0x1ce>
    2a32:	53 c0       	rjmp	.+166    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:CLR_BIT(DDRA,copy_u8PinId);break;
    2a34:	aa e3       	ldi	r26, 0x3A	; 58
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	ea e3       	ldi	r30, 0x3A	; 58
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	48 2f       	mov	r20, r24
    2a40:	8a 81       	ldd	r24, Y+2	; 0x02
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	02 2e       	mov	r0, r18
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <DIO_voidSetPinDirection+0x16e>
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	0a 94       	dec	r0
    2a54:	e2 f7       	brpl	.-8      	; 0x2a4e <DIO_voidSetPinDirection+0x16a>
    2a56:	80 95       	com	r24
    2a58:	84 23       	and	r24, r20
    2a5a:	8c 93       	st	X, r24
    2a5c:	3e c0       	rjmp	.+124    	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:CLR_BIT(DDRB,copy_u8PinId);break;
    2a5e:	a7 e3       	ldi	r26, 0x37	; 55
    2a60:	b0 e0       	ldi	r27, 0x00	; 0
    2a62:	e7 e3       	ldi	r30, 0x37	; 55
    2a64:	f0 e0       	ldi	r31, 0x00	; 0
    2a66:	80 81       	ld	r24, Z
    2a68:	48 2f       	mov	r20, r24
    2a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	02 2e       	mov	r0, r18
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <DIO_voidSetPinDirection+0x198>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	0a 94       	dec	r0
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <DIO_voidSetPinDirection+0x194>
    2a80:	80 95       	com	r24
    2a82:	84 23       	and	r24, r20
    2a84:	8c 93       	st	X, r24
    2a86:	29 c0       	rjmp	.+82     	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:CLR_BIT(DDRC,copy_u8PinId);break;
    2a88:	a4 e3       	ldi	r26, 0x34	; 52
    2a8a:	b0 e0       	ldi	r27, 0x00	; 0
    2a8c:	e4 e3       	ldi	r30, 0x34	; 52
    2a8e:	f0 e0       	ldi	r31, 0x00	; 0
    2a90:	80 81       	ld	r24, Z
    2a92:	48 2f       	mov	r20, r24
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	28 2f       	mov	r18, r24
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	02 2e       	mov	r0, r18
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <DIO_voidSetPinDirection+0x1c2>
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	0a 94       	dec	r0
    2aa8:	e2 f7       	brpl	.-8      	; 0x2aa2 <DIO_voidSetPinDirection+0x1be>
    2aaa:	80 95       	com	r24
    2aac:	84 23       	and	r24, r20
    2aae:	8c 93       	st	X, r24
    2ab0:	14 c0       	rjmp	.+40     	; 0x2ada <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:CLR_BIT(DDRD,copy_u8PinId);break;
    2ab2:	a1 e3       	ldi	r26, 0x31	; 49
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	e1 e3       	ldi	r30, 0x31	; 49
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	48 2f       	mov	r20, r24
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	02 2e       	mov	r0, r18
    2aca:	02 c0       	rjmp	.+4      	; 0x2ad0 <DIO_voidSetPinDirection+0x1ec>
    2acc:	88 0f       	add	r24, r24
    2ace:	99 1f       	adc	r25, r25
    2ad0:	0a 94       	dec	r0
    2ad2:	e2 f7       	brpl	.-8      	; 0x2acc <DIO_voidSetPinDirection+0x1e8>
    2ad4:	80 95       	com	r24
    2ad6:	84 23       	and	r24, r20
    2ad8:	8c 93       	st	X, r24
			}
	}

}
    2ada:	27 96       	adiw	r28, 0x07	; 7
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	27 97       	sbiw	r28, 0x07	; 7
    2af6:	0f b6       	in	r0, 0x3f	; 63
    2af8:	f8 94       	cli
    2afa:	de bf       	out	0x3e, r29	; 62
    2afc:	0f be       	out	0x3f, r0	; 63
    2afe:	cd bf       	out	0x3d, r28	; 61
    2b00:	89 83       	std	Y+1, r24	; 0x01
    2b02:	6a 83       	std	Y+2, r22	; 0x02
    2b04:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    2b06:	8a 81       	ldd	r24, Y+2	; 0x02
    2b08:	88 30       	cpi	r24, 0x08	; 8
    2b0a:	08 f0       	brcs	.+2      	; 0x2b0e <DIO_voidSetPinValue+0x22>
    2b0c:	ee c0       	rjmp	.+476    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
	{
		if(copy_u8PinValue == DIO_PIN_HIGH)
    2b0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <DIO_voidSetPinValue+0x2a>
    2b14:	6f c0       	rjmp	.+222    	; 0x2bf4 <DIO_voidSetPinValue+0x108>
		{
			switch(copy_u8PortId)
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	3f 83       	std	Y+7, r19	; 0x07
    2b1e:	2e 83       	std	Y+6, r18	; 0x06
    2b20:	8e 81       	ldd	r24, Y+6	; 0x06
    2b22:	9f 81       	ldd	r25, Y+7	; 0x07
    2b24:	81 30       	cpi	r24, 0x01	; 1
    2b26:	91 05       	cpc	r25, r1
    2b28:	49 f1       	breq	.+82     	; 0x2b7c <DIO_voidSetPinValue+0x90>
    2b2a:	2e 81       	ldd	r18, Y+6	; 0x06
    2b2c:	3f 81       	ldd	r19, Y+7	; 0x07
    2b2e:	22 30       	cpi	r18, 0x02	; 2
    2b30:	31 05       	cpc	r19, r1
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <DIO_voidSetPinValue+0x52>
    2b34:	8e 81       	ldd	r24, Y+6	; 0x06
    2b36:	9f 81       	ldd	r25, Y+7	; 0x07
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	61 f0       	breq	.+24     	; 0x2b54 <DIO_voidSetPinValue+0x68>
    2b3c:	d6 c0       	rjmp	.+428    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
    2b3e:	2e 81       	ldd	r18, Y+6	; 0x06
    2b40:	3f 81       	ldd	r19, Y+7	; 0x07
    2b42:	22 30       	cpi	r18, 0x02	; 2
    2b44:	31 05       	cpc	r19, r1
    2b46:	71 f1       	breq	.+92     	; 0x2ba4 <DIO_voidSetPinValue+0xb8>
    2b48:	8e 81       	ldd	r24, Y+6	; 0x06
    2b4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b4c:	83 30       	cpi	r24, 0x03	; 3
    2b4e:	91 05       	cpc	r25, r1
    2b50:	e9 f1       	breq	.+122    	; 0x2bcc <DIO_voidSetPinValue+0xe0>
    2b52:	cb c0       	rjmp	.+406    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA:SET_BIT(PORTA,copy_u8PinId);break;
    2b54:	ab e3       	ldi	r26, 0x3B	; 59
    2b56:	b0 e0       	ldi	r27, 0x00	; 0
    2b58:	eb e3       	ldi	r30, 0x3B	; 59
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	80 81       	ld	r24, Z
    2b5e:	48 2f       	mov	r20, r24
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	28 2f       	mov	r18, r24
    2b64:	30 e0       	ldi	r19, 0x00	; 0
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	02 2e       	mov	r0, r18
    2b6c:	02 c0       	rjmp	.+4      	; 0x2b72 <DIO_voidSetPinValue+0x86>
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	0a 94       	dec	r0
    2b74:	e2 f7       	brpl	.-8      	; 0x2b6e <DIO_voidSetPinValue+0x82>
    2b76:	84 2b       	or	r24, r20
    2b78:	8c 93       	st	X, r24
    2b7a:	b7 c0       	rjmp	.+366    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTB:SET_BIT(PORTB,copy_u8PinId);break;
    2b7c:	a8 e3       	ldi	r26, 0x38	; 56
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e8 e3       	ldi	r30, 0x38	; 56
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	48 2f       	mov	r20, r24
    2b88:	8a 81       	ldd	r24, Y+2	; 0x02
    2b8a:	28 2f       	mov	r18, r24
    2b8c:	30 e0       	ldi	r19, 0x00	; 0
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	02 2e       	mov	r0, r18
    2b94:	02 c0       	rjmp	.+4      	; 0x2b9a <DIO_voidSetPinValue+0xae>
    2b96:	88 0f       	add	r24, r24
    2b98:	99 1f       	adc	r25, r25
    2b9a:	0a 94       	dec	r0
    2b9c:	e2 f7       	brpl	.-8      	; 0x2b96 <DIO_voidSetPinValue+0xaa>
    2b9e:	84 2b       	or	r24, r20
    2ba0:	8c 93       	st	X, r24
    2ba2:	a3 c0       	rjmp	.+326    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTC:SET_BIT(PORTC,copy_u8PinId);break;
    2ba4:	a5 e3       	ldi	r26, 0x35	; 53
    2ba6:	b0 e0       	ldi	r27, 0x00	; 0
    2ba8:	e5 e3       	ldi	r30, 0x35	; 53
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	80 81       	ld	r24, Z
    2bae:	48 2f       	mov	r20, r24
    2bb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb2:	28 2f       	mov	r18, r24
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	02 2e       	mov	r0, r18
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <DIO_voidSetPinValue+0xd6>
    2bbe:	88 0f       	add	r24, r24
    2bc0:	99 1f       	adc	r25, r25
    2bc2:	0a 94       	dec	r0
    2bc4:	e2 f7       	brpl	.-8      	; 0x2bbe <DIO_voidSetPinValue+0xd2>
    2bc6:	84 2b       	or	r24, r20
    2bc8:	8c 93       	st	X, r24
    2bca:	8f c0       	rjmp	.+286    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTD:SET_BIT(PORTD,copy_u8PinId);break;
    2bcc:	a2 e3       	ldi	r26, 0x32	; 50
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	e2 e3       	ldi	r30, 0x32	; 50
    2bd2:	f0 e0       	ldi	r31, 0x00	; 0
    2bd4:	80 81       	ld	r24, Z
    2bd6:	48 2f       	mov	r20, r24
    2bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	02 2e       	mov	r0, r18
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <DIO_voidSetPinValue+0xfe>
    2be6:	88 0f       	add	r24, r24
    2be8:	99 1f       	adc	r25, r25
    2bea:	0a 94       	dec	r0
    2bec:	e2 f7       	brpl	.-8      	; 0x2be6 <DIO_voidSetPinValue+0xfa>
    2bee:	84 2b       	or	r24, r20
    2bf0:	8c 93       	st	X, r24
    2bf2:	7b c0       	rjmp	.+246    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
			}
		}

		else if(copy_u8PinId<=7)
    2bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf6:	88 30       	cpi	r24, 0x08	; 8
    2bf8:	08 f0       	brcs	.+2      	; 0x2bfc <DIO_voidSetPinValue+0x110>
    2bfa:	77 c0       	rjmp	.+238    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
		{
			if(copy_u8PinValue == DIO_PIN_LOW)
    2bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    2bfe:	88 23       	and	r24, r24
    2c00:	09 f0       	breq	.+2      	; 0x2c04 <DIO_voidSetPinValue+0x118>
    2c02:	73 c0       	rjmp	.+230    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
			{
				switch(copy_u8PortId)
    2c04:	89 81       	ldd	r24, Y+1	; 0x01
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	3d 83       	std	Y+5, r19	; 0x05
    2c0c:	2c 83       	std	Y+4, r18	; 0x04
    2c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c10:	9d 81       	ldd	r25, Y+5	; 0x05
    2c12:	81 30       	cpi	r24, 0x01	; 1
    2c14:	91 05       	cpc	r25, r1
    2c16:	59 f1       	breq	.+86     	; 0x2c6e <DIO_voidSetPinValue+0x182>
    2c18:	2c 81       	ldd	r18, Y+4	; 0x04
    2c1a:	3d 81       	ldd	r19, Y+5	; 0x05
    2c1c:	22 30       	cpi	r18, 0x02	; 2
    2c1e:	31 05       	cpc	r19, r1
    2c20:	2c f4       	brge	.+10     	; 0x2c2c <DIO_voidSetPinValue+0x140>
    2c22:	8c 81       	ldd	r24, Y+4	; 0x04
    2c24:	9d 81       	ldd	r25, Y+5	; 0x05
    2c26:	00 97       	sbiw	r24, 0x00	; 0
    2c28:	69 f0       	breq	.+26     	; 0x2c44 <DIO_voidSetPinValue+0x158>
    2c2a:	5f c0       	rjmp	.+190    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
    2c2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2c2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2c30:	22 30       	cpi	r18, 0x02	; 2
    2c32:	31 05       	cpc	r19, r1
    2c34:	89 f1       	breq	.+98     	; 0x2c98 <DIO_voidSetPinValue+0x1ac>
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3a:	83 30       	cpi	r24, 0x03	; 3
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <DIO_voidSetPinValue+0x156>
    2c40:	40 c0       	rjmp	.+128    	; 0x2cc2 <DIO_voidSetPinValue+0x1d6>
    2c42:	53 c0       	rjmp	.+166    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
				{
				case DIO_PORTA:CLR_BIT(PORTA,copy_u8PinId);break;
    2c44:	ab e3       	ldi	r26, 0x3B	; 59
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	eb e3       	ldi	r30, 0x3B	; 59
    2c4a:	f0 e0       	ldi	r31, 0x00	; 0
    2c4c:	80 81       	ld	r24, Z
    2c4e:	48 2f       	mov	r20, r24
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	28 2f       	mov	r18, r24
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	02 2e       	mov	r0, r18
    2c5c:	02 c0       	rjmp	.+4      	; 0x2c62 <DIO_voidSetPinValue+0x176>
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	0a 94       	dec	r0
    2c64:	e2 f7       	brpl	.-8      	; 0x2c5e <DIO_voidSetPinValue+0x172>
    2c66:	80 95       	com	r24
    2c68:	84 23       	and	r24, r20
    2c6a:	8c 93       	st	X, r24
    2c6c:	3e c0       	rjmp	.+124    	; 0x2cea <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTB:CLR_BIT(PORTB,copy_u8PinId);break;
    2c6e:	a8 e3       	ldi	r26, 0x38	; 56
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	e8 e3       	ldi	r30, 0x38	; 56
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	48 2f       	mov	r20, r24
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	02 2e       	mov	r0, r18
    2c86:	02 c0       	rjmp	.+4      	; 0x2c8c <DIO_voidSetPinValue+0x1a0>
    2c88:	88 0f       	add	r24, r24
    2c8a:	99 1f       	adc	r25, r25
    2c8c:	0a 94       	dec	r0
    2c8e:	e2 f7       	brpl	.-8      	; 0x2c88 <DIO_voidSetPinValue+0x19c>
    2c90:	80 95       	com	r24
    2c92:	84 23       	and	r24, r20
    2c94:	8c 93       	st	X, r24
    2c96:	29 c0       	rjmp	.+82     	; 0x2cea <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTC:CLR_BIT(PORTC,copy_u8PinId);break;
    2c98:	a5 e3       	ldi	r26, 0x35	; 53
    2c9a:	b0 e0       	ldi	r27, 0x00	; 0
    2c9c:	e5 e3       	ldi	r30, 0x35	; 53
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	48 2f       	mov	r20, r24
    2ca4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca6:	28 2f       	mov	r18, r24
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	02 2e       	mov	r0, r18
    2cb0:	02 c0       	rjmp	.+4      	; 0x2cb6 <DIO_voidSetPinValue+0x1ca>
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	0a 94       	dec	r0
    2cb8:	e2 f7       	brpl	.-8      	; 0x2cb2 <DIO_voidSetPinValue+0x1c6>
    2cba:	80 95       	com	r24
    2cbc:	84 23       	and	r24, r20
    2cbe:	8c 93       	st	X, r24
    2cc0:	14 c0       	rjmp	.+40     	; 0x2cea <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTD:CLR_BIT(PORTD,copy_u8PinId);break;
    2cc2:	a2 e3       	ldi	r26, 0x32	; 50
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	e2 e3       	ldi	r30, 0x32	; 50
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	48 2f       	mov	r20, r24
    2cce:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd0:	28 2f       	mov	r18, r24
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	02 2e       	mov	r0, r18
    2cda:	02 c0       	rjmp	.+4      	; 0x2ce0 <DIO_voidSetPinValue+0x1f4>
    2cdc:	88 0f       	add	r24, r24
    2cde:	99 1f       	adc	r25, r25
    2ce0:	0a 94       	dec	r0
    2ce2:	e2 f7       	brpl	.-8      	; 0x2cdc <DIO_voidSetPinValue+0x1f0>
    2ce4:	80 95       	com	r24
    2ce6:	84 23       	and	r24, r20
    2ce8:	8c 93       	st	X, r24
				}
			}
		}
	}
}
    2cea:	27 96       	adiw	r28, 0x07	; 7
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	f8 94       	cli
    2cf0:	de bf       	out	0x3e, r29	; 62
    2cf2:	0f be       	out	0x3f, r0	; 63
    2cf4:	cd bf       	out	0x3d, r28	; 61
    2cf6:	cf 91       	pop	r28
    2cf8:	df 91       	pop	r29
    2cfa:	08 95       	ret

00002cfc <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 *copy_pu8_PinValue)
{
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <DIO_voidGetPinValue+0x6>
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <DIO_voidGetPinValue+0x8>
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <DIO_voidGetPinValue+0xa>
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	6a 83       	std	Y+2, r22	; 0x02
    2d0e:	5c 83       	std	Y+4, r21	; 0x04
    2d10:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    2d12:	8a 81       	ldd	r24, Y+2	; 0x02
    2d14:	88 30       	cpi	r24, 0x08	; 8
    2d16:	08 f0       	brcs	.+2      	; 0x2d1a <DIO_voidGetPinValue+0x1e>
    2d18:	70 c0       	rjmp	.+224    	; 0x2dfa <DIO_voidGetPinValue+0xfe>
	{
		switch(copy_u8PortId)
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	3e 83       	std	Y+6, r19	; 0x06
    2d22:	2d 83       	std	Y+5, r18	; 0x05
    2d24:	4d 81       	ldd	r20, Y+5	; 0x05
    2d26:	5e 81       	ldd	r21, Y+6	; 0x06
    2d28:	41 30       	cpi	r20, 0x01	; 1
    2d2a:	51 05       	cpc	r21, r1
    2d2c:	59 f1       	breq	.+86     	; 0x2d84 <DIO_voidGetPinValue+0x88>
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	91 05       	cpc	r25, r1
    2d36:	34 f4       	brge	.+12     	; 0x2d44 <DIO_voidGetPinValue+0x48>
    2d38:	2d 81       	ldd	r18, Y+5	; 0x05
    2d3a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d3c:	21 15       	cp	r18, r1
    2d3e:	31 05       	cpc	r19, r1
    2d40:	69 f0       	breq	.+26     	; 0x2d5c <DIO_voidGetPinValue+0x60>
    2d42:	5b c0       	rjmp	.+182    	; 0x2dfa <DIO_voidGetPinValue+0xfe>
    2d44:	4d 81       	ldd	r20, Y+5	; 0x05
    2d46:	5e 81       	ldd	r21, Y+6	; 0x06
    2d48:	42 30       	cpi	r20, 0x02	; 2
    2d4a:	51 05       	cpc	r21, r1
    2d4c:	79 f1       	breq	.+94     	; 0x2dac <DIO_voidGetPinValue+0xb0>
    2d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d50:	9e 81       	ldd	r25, Y+6	; 0x06
    2d52:	83 30       	cpi	r24, 0x03	; 3
    2d54:	91 05       	cpc	r25, r1
    2d56:	09 f4       	brne	.+2      	; 0x2d5a <DIO_voidGetPinValue+0x5e>
    2d58:	3d c0       	rjmp	.+122    	; 0x2dd4 <DIO_voidGetPinValue+0xd8>
    2d5a:	4f c0       	rjmp	.+158    	; 0x2dfa <DIO_voidGetPinValue+0xfe>
		{
		case DIO_PORTA:*copy_pu8_PinValue = GET_BIT(PINA,copy_u8PinId);break;
    2d5c:	e9 e3       	ldi	r30, 0x39	; 57
    2d5e:	f0 e0       	ldi	r31, 0x00	; 0
    2d60:	80 81       	ld	r24, Z
    2d62:	28 2f       	mov	r18, r24
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	8a 81       	ldd	r24, Y+2	; 0x02
    2d68:	88 2f       	mov	r24, r24
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	a9 01       	movw	r20, r18
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <DIO_voidGetPinValue+0x78>
    2d70:	55 95       	asr	r21
    2d72:	47 95       	ror	r20
    2d74:	8a 95       	dec	r24
    2d76:	e2 f7       	brpl	.-8      	; 0x2d70 <DIO_voidGetPinValue+0x74>
    2d78:	ca 01       	movw	r24, r20
    2d7a:	81 70       	andi	r24, 0x01	; 1
    2d7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d80:	80 83       	st	Z, r24
    2d82:	3b c0       	rjmp	.+118    	; 0x2dfa <DIO_voidGetPinValue+0xfe>
		case DIO_PORTB:*copy_pu8_PinValue = GET_BIT(PINB,copy_u8PinId);break;
    2d84:	e6 e3       	ldi	r30, 0x36	; 54
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	80 81       	ld	r24, Z
    2d8a:	28 2f       	mov	r18, r24
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d90:	88 2f       	mov	r24, r24
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	a9 01       	movw	r20, r18
    2d96:	02 c0       	rjmp	.+4      	; 0x2d9c <DIO_voidGetPinValue+0xa0>
    2d98:	55 95       	asr	r21
    2d9a:	47 95       	ror	r20
    2d9c:	8a 95       	dec	r24
    2d9e:	e2 f7       	brpl	.-8      	; 0x2d98 <DIO_voidGetPinValue+0x9c>
    2da0:	ca 01       	movw	r24, r20
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	eb 81       	ldd	r30, Y+3	; 0x03
    2da6:	fc 81       	ldd	r31, Y+4	; 0x04
    2da8:	80 83       	st	Z, r24
    2daa:	27 c0       	rjmp	.+78     	; 0x2dfa <DIO_voidGetPinValue+0xfe>
		case DIO_PORTC:*copy_pu8_PinValue = GET_BIT(PINC,copy_u8PinId);break;
    2dac:	e3 e3       	ldi	r30, 0x33	; 51
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	88 2f       	mov	r24, r24
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	a9 01       	movw	r20, r18
    2dbe:	02 c0       	rjmp	.+4      	; 0x2dc4 <DIO_voidGetPinValue+0xc8>
    2dc0:	55 95       	asr	r21
    2dc2:	47 95       	ror	r20
    2dc4:	8a 95       	dec	r24
    2dc6:	e2 f7       	brpl	.-8      	; 0x2dc0 <DIO_voidGetPinValue+0xc4>
    2dc8:	ca 01       	movw	r24, r20
    2dca:	81 70       	andi	r24, 0x01	; 1
    2dcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dce:	fc 81       	ldd	r31, Y+4	; 0x04
    2dd0:	80 83       	st	Z, r24
    2dd2:	13 c0       	rjmp	.+38     	; 0x2dfa <DIO_voidGetPinValue+0xfe>
		case DIO_PORTD:*copy_pu8_PinValue = GET_BIT(PIND,copy_u8PinId);break;
    2dd4:	e0 e3       	ldi	r30, 0x30	; 48
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	80 81       	ld	r24, Z
    2dda:	28 2f       	mov	r18, r24
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	8a 81       	ldd	r24, Y+2	; 0x02
    2de0:	88 2f       	mov	r24, r24
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	a9 01       	movw	r20, r18
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <DIO_voidGetPinValue+0xf0>
    2de8:	55 95       	asr	r21
    2dea:	47 95       	ror	r20
    2dec:	8a 95       	dec	r24
    2dee:	e2 f7       	brpl	.-8      	; 0x2de8 <DIO_voidGetPinValue+0xec>
    2df0:	ca 01       	movw	r24, r20
    2df2:	81 70       	andi	r24, 0x01	; 1
    2df4:	eb 81       	ldd	r30, Y+3	; 0x03
    2df6:	fc 81       	ldd	r31, Y+4	; 0x04
    2df8:	80 83       	st	Z, r24
		}
	}
}
    2dfa:	26 96       	adiw	r28, 0x06	; 6
    2dfc:	0f b6       	in	r0, 0x3f	; 63
    2dfe:	f8 94       	cli
    2e00:	de bf       	out	0x3e, r29	; 62
    2e02:	0f be       	out	0x3f, r0	; 63
    2e04:	cd bf       	out	0x3d, r28	; 61
    2e06:	cf 91       	pop	r28
    2e08:	df 91       	pop	r29
    2e0a:	08 95       	ret

00002e0c <DIO_voidTogglePinValue>:
	}
	return Local_u8Reading;
}*/

void DIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <DIO_voidTogglePinValue+0x6>
    2e12:	00 d0       	rcall	.+0      	; 0x2e14 <DIO_voidTogglePinValue+0x8>
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	89 83       	std	Y+1, r24	; 0x01
    2e1a:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    2e1c:	89 81       	ldd	r24, Y+1	; 0x01
    2e1e:	28 2f       	mov	r18, r24
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	3c 83       	std	Y+4, r19	; 0x04
    2e24:	2b 83       	std	Y+3, r18	; 0x03
    2e26:	8b 81       	ldd	r24, Y+3	; 0x03
    2e28:	9c 81       	ldd	r25, Y+4	; 0x04
    2e2a:	81 30       	cpi	r24, 0x01	; 1
    2e2c:	91 05       	cpc	r25, r1
    2e2e:	49 f1       	breq	.+82     	; 0x2e82 <DIO_voidTogglePinValue+0x76>
    2e30:	2b 81       	ldd	r18, Y+3	; 0x03
    2e32:	3c 81       	ldd	r19, Y+4	; 0x04
    2e34:	22 30       	cpi	r18, 0x02	; 2
    2e36:	31 05       	cpc	r19, r1
    2e38:	2c f4       	brge	.+10     	; 0x2e44 <DIO_voidTogglePinValue+0x38>
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	00 97       	sbiw	r24, 0x00	; 0
    2e40:	61 f0       	breq	.+24     	; 0x2e5a <DIO_voidTogglePinValue+0x4e>
    2e42:	5a c0       	rjmp	.+180    	; 0x2ef8 <DIO_voidTogglePinValue+0xec>
    2e44:	2b 81       	ldd	r18, Y+3	; 0x03
    2e46:	3c 81       	ldd	r19, Y+4	; 0x04
    2e48:	22 30       	cpi	r18, 0x02	; 2
    2e4a:	31 05       	cpc	r19, r1
    2e4c:	71 f1       	breq	.+92     	; 0x2eaa <DIO_voidTogglePinValue+0x9e>
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	9c 81       	ldd	r25, Y+4	; 0x04
    2e52:	83 30       	cpi	r24, 0x03	; 3
    2e54:	91 05       	cpc	r25, r1
    2e56:	e9 f1       	breq	.+122    	; 0x2ed2 <DIO_voidTogglePinValue+0xc6>
    2e58:	4f c0       	rjmp	.+158    	; 0x2ef8 <DIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA: TOG_BIT(PORTA, copy_u8PinId); break;
    2e5a:	ab e3       	ldi	r26, 0x3B	; 59
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	eb e3       	ldi	r30, 0x3B	; 59
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	80 81       	ld	r24, Z
    2e64:	48 2f       	mov	r20, r24
    2e66:	8a 81       	ldd	r24, Y+2	; 0x02
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	81 e0       	ldi	r24, 0x01	; 1
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	02 2e       	mov	r0, r18
    2e72:	02 c0       	rjmp	.+4      	; 0x2e78 <DIO_voidTogglePinValue+0x6c>
    2e74:	88 0f       	add	r24, r24
    2e76:	99 1f       	adc	r25, r25
    2e78:	0a 94       	dec	r0
    2e7a:	e2 f7       	brpl	.-8      	; 0x2e74 <DIO_voidTogglePinValue+0x68>
    2e7c:	84 27       	eor	r24, r20
    2e7e:	8c 93       	st	X, r24
    2e80:	3b c0       	rjmp	.+118    	; 0x2ef8 <DIO_voidTogglePinValue+0xec>
	case DIO_PORTB: TOG_BIT(PORTB, copy_u8PinId); break;
    2e82:	a8 e3       	ldi	r26, 0x38	; 56
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	e8 e3       	ldi	r30, 0x38	; 56
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	48 2f       	mov	r20, r24
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	28 2f       	mov	r18, r24
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	02 2e       	mov	r0, r18
    2e9a:	02 c0       	rjmp	.+4      	; 0x2ea0 <DIO_voidTogglePinValue+0x94>
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	0a 94       	dec	r0
    2ea2:	e2 f7       	brpl	.-8      	; 0x2e9c <DIO_voidTogglePinValue+0x90>
    2ea4:	84 27       	eor	r24, r20
    2ea6:	8c 93       	st	X, r24
    2ea8:	27 c0       	rjmp	.+78     	; 0x2ef8 <DIO_voidTogglePinValue+0xec>
	case DIO_PORTC: TOG_BIT(PORTC, copy_u8PinId); break;
    2eaa:	a5 e3       	ldi	r26, 0x35	; 53
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	e5 e3       	ldi	r30, 0x35	; 53
    2eb0:	f0 e0       	ldi	r31, 0x00	; 0
    2eb2:	80 81       	ld	r24, Z
    2eb4:	48 2f       	mov	r20, r24
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	28 2f       	mov	r18, r24
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	02 2e       	mov	r0, r18
    2ec2:	02 c0       	rjmp	.+4      	; 0x2ec8 <DIO_voidTogglePinValue+0xbc>
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	0a 94       	dec	r0
    2eca:	e2 f7       	brpl	.-8      	; 0x2ec4 <DIO_voidTogglePinValue+0xb8>
    2ecc:	84 27       	eor	r24, r20
    2ece:	8c 93       	st	X, r24
    2ed0:	13 c0       	rjmp	.+38     	; 0x2ef8 <DIO_voidTogglePinValue+0xec>
	case DIO_PORTD: TOG_BIT(PORTD, copy_u8PinId); break;
    2ed2:	a2 e3       	ldi	r26, 0x32	; 50
    2ed4:	b0 e0       	ldi	r27, 0x00	; 0
    2ed6:	e2 e3       	ldi	r30, 0x32	; 50
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	80 81       	ld	r24, Z
    2edc:	48 2f       	mov	r20, r24
    2ede:	8a 81       	ldd	r24, Y+2	; 0x02
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	02 2e       	mov	r0, r18
    2eea:	02 c0       	rjmp	.+4      	; 0x2ef0 <DIO_voidTogglePinValue+0xe4>
    2eec:	88 0f       	add	r24, r24
    2eee:	99 1f       	adc	r25, r25
    2ef0:	0a 94       	dec	r0
    2ef2:	e2 f7       	brpl	.-8      	; 0x2eec <DIO_voidTogglePinValue+0xe0>
    2ef4:	84 27       	eor	r24, r20
    2ef6:	8c 93       	st	X, r24
	}
}
    2ef8:	0f 90       	pop	r0
    2efa:	0f 90       	pop	r0
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	cf 91       	pop	r28
    2f02:	df 91       	pop	r29
    2f04:	08 95       	ret

00002f06 <DIO_voidActivePinInPullUpResistance>:

void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    2f06:	df 93       	push	r29
    2f08:	cf 93       	push	r28
    2f0a:	00 d0       	rcall	.+0      	; 0x2f0c <DIO_voidActivePinInPullUpResistance+0x6>
    2f0c:	00 d0       	rcall	.+0      	; 0x2f0e <DIO_voidActivePinInPullUpResistance+0x8>
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	89 83       	std	Y+1, r24	; 0x01
    2f14:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	3c 83       	std	Y+4, r19	; 0x04
    2f1e:	2b 83       	std	Y+3, r18	; 0x03
    2f20:	8b 81       	ldd	r24, Y+3	; 0x03
    2f22:	9c 81       	ldd	r25, Y+4	; 0x04
    2f24:	81 30       	cpi	r24, 0x01	; 1
    2f26:	91 05       	cpc	r25, r1
    2f28:	49 f1       	breq	.+82     	; 0x2f7c <DIO_voidActivePinInPullUpResistance+0x76>
    2f2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2e:	22 30       	cpi	r18, 0x02	; 2
    2f30:	31 05       	cpc	r19, r1
    2f32:	2c f4       	brge	.+10     	; 0x2f3e <DIO_voidActivePinInPullUpResistance+0x38>
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	00 97       	sbiw	r24, 0x00	; 0
    2f3a:	61 f0       	breq	.+24     	; 0x2f54 <DIO_voidActivePinInPullUpResistance+0x4e>
    2f3c:	5a c0       	rjmp	.+180    	; 0x2ff2 <DIO_voidActivePinInPullUpResistance+0xec>
    2f3e:	2b 81       	ldd	r18, Y+3	; 0x03
    2f40:	3c 81       	ldd	r19, Y+4	; 0x04
    2f42:	22 30       	cpi	r18, 0x02	; 2
    2f44:	31 05       	cpc	r19, r1
    2f46:	71 f1       	breq	.+92     	; 0x2fa4 <DIO_voidActivePinInPullUpResistance+0x9e>
    2f48:	8b 81       	ldd	r24, Y+3	; 0x03
    2f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4c:	83 30       	cpi	r24, 0x03	; 3
    2f4e:	91 05       	cpc	r25, r1
    2f50:	e9 f1       	breq	.+122    	; 0x2fcc <DIO_voidActivePinInPullUpResistance+0xc6>
    2f52:	4f c0       	rjmp	.+158    	; 0x2ff2 <DIO_voidActivePinInPullUpResistance+0xec>
	{
	case DIO_PORTA: SET_BIT(PORTA, copy_u8PinId); break;
    2f54:	ab e3       	ldi	r26, 0x3B	; 59
    2f56:	b0 e0       	ldi	r27, 0x00	; 0
    2f58:	eb e3       	ldi	r30, 0x3B	; 59
    2f5a:	f0 e0       	ldi	r31, 0x00	; 0
    2f5c:	80 81       	ld	r24, Z
    2f5e:	48 2f       	mov	r20, r24
    2f60:	8a 81       	ldd	r24, Y+2	; 0x02
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	81 e0       	ldi	r24, 0x01	; 1
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	02 2e       	mov	r0, r18
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <DIO_voidActivePinInPullUpResistance+0x6c>
    2f6e:	88 0f       	add	r24, r24
    2f70:	99 1f       	adc	r25, r25
    2f72:	0a 94       	dec	r0
    2f74:	e2 f7       	brpl	.-8      	; 0x2f6e <DIO_voidActivePinInPullUpResistance+0x68>
    2f76:	84 2b       	or	r24, r20
    2f78:	8c 93       	st	X, r24
    2f7a:	3b c0       	rjmp	.+118    	; 0x2ff2 <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTB: SET_BIT(PORTB, copy_u8PinId); break;
    2f7c:	a8 e3       	ldi	r26, 0x38	; 56
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e8 e3       	ldi	r30, 0x38	; 56
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	80 81       	ld	r24, Z
    2f86:	48 2f       	mov	r20, r24
    2f88:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	02 2e       	mov	r0, r18
    2f94:	02 c0       	rjmp	.+4      	; 0x2f9a <DIO_voidActivePinInPullUpResistance+0x94>
    2f96:	88 0f       	add	r24, r24
    2f98:	99 1f       	adc	r25, r25
    2f9a:	0a 94       	dec	r0
    2f9c:	e2 f7       	brpl	.-8      	; 0x2f96 <DIO_voidActivePinInPullUpResistance+0x90>
    2f9e:	84 2b       	or	r24, r20
    2fa0:	8c 93       	st	X, r24
    2fa2:	27 c0       	rjmp	.+78     	; 0x2ff2 <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTC: SET_BIT(PORTC, copy_u8PinId); break;
    2fa4:	a5 e3       	ldi	r26, 0x35	; 53
    2fa6:	b0 e0       	ldi	r27, 0x00	; 0
    2fa8:	e5 e3       	ldi	r30, 0x35	; 53
    2faa:	f0 e0       	ldi	r31, 0x00	; 0
    2fac:	80 81       	ld	r24, Z
    2fae:	48 2f       	mov	r20, r24
    2fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb2:	28 2f       	mov	r18, r24
    2fb4:	30 e0       	ldi	r19, 0x00	; 0
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	02 2e       	mov	r0, r18
    2fbc:	02 c0       	rjmp	.+4      	; 0x2fc2 <DIO_voidActivePinInPullUpResistance+0xbc>
    2fbe:	88 0f       	add	r24, r24
    2fc0:	99 1f       	adc	r25, r25
    2fc2:	0a 94       	dec	r0
    2fc4:	e2 f7       	brpl	.-8      	; 0x2fbe <DIO_voidActivePinInPullUpResistance+0xb8>
    2fc6:	84 2b       	or	r24, r20
    2fc8:	8c 93       	st	X, r24
    2fca:	13 c0       	rjmp	.+38     	; 0x2ff2 <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTD: SET_BIT(PORTD, copy_u8PinId); break;
    2fcc:	a2 e3       	ldi	r26, 0x32	; 50
    2fce:	b0 e0       	ldi	r27, 0x00	; 0
    2fd0:	e2 e3       	ldi	r30, 0x32	; 50
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	80 81       	ld	r24, Z
    2fd6:	48 2f       	mov	r20, r24
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	28 2f       	mov	r18, r24
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	02 2e       	mov	r0, r18
    2fe4:	02 c0       	rjmp	.+4      	; 0x2fea <DIO_voidActivePinInPullUpResistance+0xe4>
    2fe6:	88 0f       	add	r24, r24
    2fe8:	99 1f       	adc	r25, r25
    2fea:	0a 94       	dec	r0
    2fec:	e2 f7       	brpl	.-8      	; 0x2fe6 <DIO_voidActivePinInPullUpResistance+0xe0>
    2fee:	84 2b       	or	r24, r20
    2ff0:	8c 93       	st	X, r24
	}
}
    2ff2:	0f 90       	pop	r0
    2ff4:	0f 90       	pop	r0
    2ff6:	0f 90       	pop	r0
    2ff8:	0f 90       	pop	r0
    2ffa:	cf 91       	pop	r28
    2ffc:	df 91       	pop	r29
    2ffe:	08 95       	ret

00003000 <DIO_voidSetPortDirection>:


                      /*************** PORT APIS ***************/

void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	00 d0       	rcall	.+0      	; 0x3006 <DIO_voidSetPortDirection+0x6>
    3006:	00 d0       	rcall	.+0      	; 0x3008 <DIO_voidSetPortDirection+0x8>
    3008:	cd b7       	in	r28, 0x3d	; 61
    300a:	de b7       	in	r29, 0x3e	; 62
    300c:	89 83       	std	Y+1, r24	; 0x01
    300e:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	3c 83       	std	Y+4, r19	; 0x04
    3018:	2b 83       	std	Y+3, r18	; 0x03
    301a:	8b 81       	ldd	r24, Y+3	; 0x03
    301c:	9c 81       	ldd	r25, Y+4	; 0x04
    301e:	81 30       	cpi	r24, 0x01	; 1
    3020:	91 05       	cpc	r25, r1
    3022:	d1 f0       	breq	.+52     	; 0x3058 <DIO_voidSetPortDirection+0x58>
    3024:	2b 81       	ldd	r18, Y+3	; 0x03
    3026:	3c 81       	ldd	r19, Y+4	; 0x04
    3028:	22 30       	cpi	r18, 0x02	; 2
    302a:	31 05       	cpc	r19, r1
    302c:	2c f4       	brge	.+10     	; 0x3038 <DIO_voidSetPortDirection+0x38>
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	00 97       	sbiw	r24, 0x00	; 0
    3034:	61 f0       	breq	.+24     	; 0x304e <DIO_voidSetPortDirection+0x4e>
    3036:	1e c0       	rjmp	.+60     	; 0x3074 <DIO_voidSetPortDirection+0x74>
    3038:	2b 81       	ldd	r18, Y+3	; 0x03
    303a:	3c 81       	ldd	r19, Y+4	; 0x04
    303c:	22 30       	cpi	r18, 0x02	; 2
    303e:	31 05       	cpc	r19, r1
    3040:	81 f0       	breq	.+32     	; 0x3062 <DIO_voidSetPortDirection+0x62>
    3042:	8b 81       	ldd	r24, Y+3	; 0x03
    3044:	9c 81       	ldd	r25, Y+4	; 0x04
    3046:	83 30       	cpi	r24, 0x03	; 3
    3048:	91 05       	cpc	r25, r1
    304a:	81 f0       	breq	.+32     	; 0x306c <DIO_voidSetPortDirection+0x6c>
    304c:	13 c0       	rjmp	.+38     	; 0x3074 <DIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA = copy_u8PortDirection;break;
    304e:	ea e3       	ldi	r30, 0x3A	; 58
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	80 83       	st	Z, r24
    3056:	0e c0       	rjmp	.+28     	; 0x3074 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:DDRB = copy_u8PortDirection;break;
    3058:	e7 e3       	ldi	r30, 0x37	; 55
    305a:	f0 e0       	ldi	r31, 0x00	; 0
    305c:	8a 81       	ldd	r24, Y+2	; 0x02
    305e:	80 83       	st	Z, r24
    3060:	09 c0       	rjmp	.+18     	; 0x3074 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:DDRC = copy_u8PortDirection;break;
    3062:	e4 e3       	ldi	r30, 0x34	; 52
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	8a 81       	ldd	r24, Y+2	; 0x02
    3068:	80 83       	st	Z, r24
    306a:	04 c0       	rjmp	.+8      	; 0x3074 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:DDRD = copy_u8PortDirection;break;
    306c:	e1 e3       	ldi	r30, 0x31	; 49
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	8a 81       	ldd	r24, Y+2	; 0x02
    3072:	80 83       	st	Z, r24
	}
}
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	cf 91       	pop	r28
    307e:	df 91       	pop	r29
    3080:	08 95       	ret

00003082 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    3082:	df 93       	push	r29
    3084:	cf 93       	push	r28
    3086:	00 d0       	rcall	.+0      	; 0x3088 <DIO_voidSetPortValue+0x6>
    3088:	00 d0       	rcall	.+0      	; 0x308a <DIO_voidSetPortValue+0x8>
    308a:	cd b7       	in	r28, 0x3d	; 61
    308c:	de b7       	in	r29, 0x3e	; 62
    308e:	89 83       	std	Y+1, r24	; 0x01
    3090:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	28 2f       	mov	r18, r24
    3096:	30 e0       	ldi	r19, 0x00	; 0
    3098:	3c 83       	std	Y+4, r19	; 0x04
    309a:	2b 83       	std	Y+3, r18	; 0x03
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	9c 81       	ldd	r25, Y+4	; 0x04
    30a0:	81 30       	cpi	r24, 0x01	; 1
    30a2:	91 05       	cpc	r25, r1
    30a4:	d1 f0       	breq	.+52     	; 0x30da <DIO_voidSetPortValue+0x58>
    30a6:	2b 81       	ldd	r18, Y+3	; 0x03
    30a8:	3c 81       	ldd	r19, Y+4	; 0x04
    30aa:	22 30       	cpi	r18, 0x02	; 2
    30ac:	31 05       	cpc	r19, r1
    30ae:	2c f4       	brge	.+10     	; 0x30ba <DIO_voidSetPortValue+0x38>
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	00 97       	sbiw	r24, 0x00	; 0
    30b6:	61 f0       	breq	.+24     	; 0x30d0 <DIO_voidSetPortValue+0x4e>
    30b8:	1e c0       	rjmp	.+60     	; 0x30f6 <DIO_voidSetPortValue+0x74>
    30ba:	2b 81       	ldd	r18, Y+3	; 0x03
    30bc:	3c 81       	ldd	r19, Y+4	; 0x04
    30be:	22 30       	cpi	r18, 0x02	; 2
    30c0:	31 05       	cpc	r19, r1
    30c2:	81 f0       	breq	.+32     	; 0x30e4 <DIO_voidSetPortValue+0x62>
    30c4:	8b 81       	ldd	r24, Y+3	; 0x03
    30c6:	9c 81       	ldd	r25, Y+4	; 0x04
    30c8:	83 30       	cpi	r24, 0x03	; 3
    30ca:	91 05       	cpc	r25, r1
    30cc:	81 f0       	breq	.+32     	; 0x30ee <DIO_voidSetPortValue+0x6c>
    30ce:	13 c0       	rjmp	.+38     	; 0x30f6 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA = copy_u8PortValue;break;
    30d0:	eb e3       	ldi	r30, 0x3B	; 59
    30d2:	f0 e0       	ldi	r31, 0x00	; 0
    30d4:	8a 81       	ldd	r24, Y+2	; 0x02
    30d6:	80 83       	st	Z, r24
    30d8:	0e c0       	rjmp	.+28     	; 0x30f6 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:PORTB = copy_u8PortValue;break;
    30da:	e8 e3       	ldi	r30, 0x38	; 56
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	80 83       	st	Z, r24
    30e2:	09 c0       	rjmp	.+18     	; 0x30f6 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:PORTC = copy_u8PortValue;break;
    30e4:	e5 e3       	ldi	r30, 0x35	; 53
    30e6:	f0 e0       	ldi	r31, 0x00	; 0
    30e8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ea:	80 83       	st	Z, r24
    30ec:	04 c0       	rjmp	.+8      	; 0x30f6 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:PORTD = copy_u8PortValue;break;
    30ee:	e2 e3       	ldi	r30, 0x32	; 50
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	80 83       	st	Z, r24
	}
}
    30f6:	0f 90       	pop	r0
    30f8:	0f 90       	pop	r0
    30fa:	0f 90       	pop	r0
    30fc:	0f 90       	pop	r0
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <DIO_voidGetPortValue>:

void DIO_voidGetPortValue(u8 copy_u8PortId, u8 *copy_pu8_PinValue)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	00 d0       	rcall	.+0      	; 0x310a <DIO_voidGetPortValue+0x6>
    310a:	00 d0       	rcall	.+0      	; 0x310c <DIO_voidGetPortValue+0x8>
    310c:	0f 92       	push	r0
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	89 83       	std	Y+1, r24	; 0x01
    3114:	7b 83       	std	Y+3, r23	; 0x03
    3116:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	28 2f       	mov	r18, r24
    311c:	30 e0       	ldi	r19, 0x00	; 0
    311e:	3d 83       	std	Y+5, r19	; 0x05
    3120:	2c 83       	std	Y+4, r18	; 0x04
    3122:	8c 81       	ldd	r24, Y+4	; 0x04
    3124:	9d 81       	ldd	r25, Y+5	; 0x05
    3126:	81 30       	cpi	r24, 0x01	; 1
    3128:	91 05       	cpc	r25, r1
    312a:	e1 f0       	breq	.+56     	; 0x3164 <DIO_voidGetPortValue+0x60>
    312c:	2c 81       	ldd	r18, Y+4	; 0x04
    312e:	3d 81       	ldd	r19, Y+5	; 0x05
    3130:	22 30       	cpi	r18, 0x02	; 2
    3132:	31 05       	cpc	r19, r1
    3134:	2c f4       	brge	.+10     	; 0x3140 <DIO_voidGetPortValue+0x3c>
    3136:	8c 81       	ldd	r24, Y+4	; 0x04
    3138:	9d 81       	ldd	r25, Y+5	; 0x05
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	61 f0       	breq	.+24     	; 0x3156 <DIO_voidGetPortValue+0x52>
    313e:	26 c0       	rjmp	.+76     	; 0x318c <DIO_voidGetPortValue+0x88>
    3140:	2c 81       	ldd	r18, Y+4	; 0x04
    3142:	3d 81       	ldd	r19, Y+5	; 0x05
    3144:	22 30       	cpi	r18, 0x02	; 2
    3146:	31 05       	cpc	r19, r1
    3148:	a1 f0       	breq	.+40     	; 0x3172 <DIO_voidGetPortValue+0x6e>
    314a:	8c 81       	ldd	r24, Y+4	; 0x04
    314c:	9d 81       	ldd	r25, Y+5	; 0x05
    314e:	83 30       	cpi	r24, 0x03	; 3
    3150:	91 05       	cpc	r25, r1
    3152:	b1 f0       	breq	.+44     	; 0x3180 <DIO_voidGetPortValue+0x7c>
    3154:	1b c0       	rjmp	.+54     	; 0x318c <DIO_voidGetPortValue+0x88>
	{
	case DIO_PORTA: *copy_pu8_PinValue = PORTA;break;
    3156:	eb e3       	ldi	r30, 0x3B	; 59
    3158:	f0 e0       	ldi	r31, 0x00	; 0
    315a:	80 81       	ld	r24, Z
    315c:	ea 81       	ldd	r30, Y+2	; 0x02
    315e:	fb 81       	ldd	r31, Y+3	; 0x03
    3160:	80 83       	st	Z, r24
    3162:	14 c0       	rjmp	.+40     	; 0x318c <DIO_voidGetPortValue+0x88>
	case DIO_PORTB: *copy_pu8_PinValue = PORTB;break;
    3164:	e8 e3       	ldi	r30, 0x38	; 56
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	80 81       	ld	r24, Z
    316a:	ea 81       	ldd	r30, Y+2	; 0x02
    316c:	fb 81       	ldd	r31, Y+3	; 0x03
    316e:	80 83       	st	Z, r24
    3170:	0d c0       	rjmp	.+26     	; 0x318c <DIO_voidGetPortValue+0x88>
	case DIO_PORTC: *copy_pu8_PinValue = PORTC;break;
    3172:	e5 e3       	ldi	r30, 0x35	; 53
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	ea 81       	ldd	r30, Y+2	; 0x02
    317a:	fb 81       	ldd	r31, Y+3	; 0x03
    317c:	80 83       	st	Z, r24
    317e:	06 c0       	rjmp	.+12     	; 0x318c <DIO_voidGetPortValue+0x88>
	case DIO_PORTD: *copy_pu8_PinValue = PORTD;break;
    3180:	e2 e3       	ldi	r30, 0x32	; 50
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	80 81       	ld	r24, Z
    3186:	ea 81       	ldd	r30, Y+2	; 0x02
    3188:	fb 81       	ldd	r31, Y+3	; 0x03
    318a:	80 83       	st	Z, r24
	}
}
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	cf 91       	pop	r28
    3198:	df 91       	pop	r29
    319a:	08 95       	ret

0000319c <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue(u8 copy_u8PortId)
{
    319c:	df 93       	push	r29
    319e:	cf 93       	push	r28
    31a0:	00 d0       	rcall	.+0      	; 0x31a2 <DIO_voidTogglePortValue+0x6>
    31a2:	0f 92       	push	r0
    31a4:	cd b7       	in	r28, 0x3d	; 61
    31a6:	de b7       	in	r29, 0x3e	; 62
    31a8:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	3b 83       	std	Y+3, r19	; 0x03
    31b2:	2a 83       	std	Y+2, r18	; 0x02
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	81 30       	cpi	r24, 0x01	; 1
    31ba:	91 05       	cpc	r25, r1
    31bc:	e9 f0       	breq	.+58     	; 0x31f8 <DIO_voidTogglePortValue+0x5c>
    31be:	2a 81       	ldd	r18, Y+2	; 0x02
    31c0:	3b 81       	ldd	r19, Y+3	; 0x03
    31c2:	22 30       	cpi	r18, 0x02	; 2
    31c4:	31 05       	cpc	r19, r1
    31c6:	2c f4       	brge	.+10     	; 0x31d2 <DIO_voidTogglePortValue+0x36>
    31c8:	8a 81       	ldd	r24, Y+2	; 0x02
    31ca:	9b 81       	ldd	r25, Y+3	; 0x03
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	61 f0       	breq	.+24     	; 0x31e8 <DIO_voidTogglePortValue+0x4c>
    31d0:	2a c0       	rjmp	.+84     	; 0x3226 <DIO_voidTogglePortValue+0x8a>
    31d2:	2a 81       	ldd	r18, Y+2	; 0x02
    31d4:	3b 81       	ldd	r19, Y+3	; 0x03
    31d6:	22 30       	cpi	r18, 0x02	; 2
    31d8:	31 05       	cpc	r19, r1
    31da:	b1 f0       	breq	.+44     	; 0x3208 <DIO_voidTogglePortValue+0x6c>
    31dc:	8a 81       	ldd	r24, Y+2	; 0x02
    31de:	9b 81       	ldd	r25, Y+3	; 0x03
    31e0:	83 30       	cpi	r24, 0x03	; 3
    31e2:	91 05       	cpc	r25, r1
    31e4:	c9 f0       	breq	.+50     	; 0x3218 <DIO_voidTogglePortValue+0x7c>
    31e6:	1f c0       	rjmp	.+62     	; 0x3226 <DIO_voidTogglePortValue+0x8a>
	{
	case DIO_PORTA: PORTA^=DIO_PORT_HIGH;break;
    31e8:	ab e3       	ldi	r26, 0x3B	; 59
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	eb e3       	ldi	r30, 0x3B	; 59
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	80 95       	com	r24
    31f4:	8c 93       	st	X, r24
    31f6:	17 c0       	rjmp	.+46     	; 0x3226 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTB: PORTB^=DIO_PORT_HIGH;break;
    31f8:	a8 e3       	ldi	r26, 0x38	; 56
    31fa:	b0 e0       	ldi	r27, 0x00	; 0
    31fc:	e8 e3       	ldi	r30, 0x38	; 56
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	80 81       	ld	r24, Z
    3202:	80 95       	com	r24
    3204:	8c 93       	st	X, r24
    3206:	0f c0       	rjmp	.+30     	; 0x3226 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTC: PORTC^=DIO_PORT_HIGH;break;
    3208:	a5 e3       	ldi	r26, 0x35	; 53
    320a:	b0 e0       	ldi	r27, 0x00	; 0
    320c:	e5 e3       	ldi	r30, 0x35	; 53
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	80 95       	com	r24
    3214:	8c 93       	st	X, r24
    3216:	07 c0       	rjmp	.+14     	; 0x3226 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTD: PORTD^=DIO_PORT_HIGH;break;
    3218:	a2 e3       	ldi	r26, 0x32	; 50
    321a:	b0 e0       	ldi	r27, 0x00	; 0
    321c:	e2 e3       	ldi	r30, 0x32	; 50
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	80 95       	com	r24
    3224:	8c 93       	st	X, r24
	}
}
    3226:	0f 90       	pop	r0
    3228:	0f 90       	pop	r0
    322a:	0f 90       	pop	r0
    322c:	cf 91       	pop	r28
    322e:	df 91       	pop	r29
    3230:	08 95       	ret

00003232 <DIO_voidActivePortInPullUpResistance>:

void DIO_voidActivePortInPullUpResistance(u8 copy_u8PortId)
{
    3232:	df 93       	push	r29
    3234:	cf 93       	push	r28
    3236:	00 d0       	rcall	.+0      	; 0x3238 <DIO_voidActivePortInPullUpResistance+0x6>
    3238:	0f 92       	push	r0
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	3b 83       	std	Y+3, r19	; 0x03
    3248:	2a 83       	std	Y+2, r18	; 0x02
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	91 05       	cpc	r25, r1
    3252:	d1 f0       	breq	.+52     	; 0x3288 <DIO_voidActivePortInPullUpResistance+0x56>
    3254:	2a 81       	ldd	r18, Y+2	; 0x02
    3256:	3b 81       	ldd	r19, Y+3	; 0x03
    3258:	22 30       	cpi	r18, 0x02	; 2
    325a:	31 05       	cpc	r19, r1
    325c:	2c f4       	brge	.+10     	; 0x3268 <DIO_voidActivePortInPullUpResistance+0x36>
    325e:	8a 81       	ldd	r24, Y+2	; 0x02
    3260:	9b 81       	ldd	r25, Y+3	; 0x03
    3262:	00 97       	sbiw	r24, 0x00	; 0
    3264:	61 f0       	breq	.+24     	; 0x327e <DIO_voidActivePortInPullUpResistance+0x4c>
    3266:	1e c0       	rjmp	.+60     	; 0x32a4 <DIO_voidActivePortInPullUpResistance+0x72>
    3268:	2a 81       	ldd	r18, Y+2	; 0x02
    326a:	3b 81       	ldd	r19, Y+3	; 0x03
    326c:	22 30       	cpi	r18, 0x02	; 2
    326e:	31 05       	cpc	r19, r1
    3270:	81 f0       	breq	.+32     	; 0x3292 <DIO_voidActivePortInPullUpResistance+0x60>
    3272:	8a 81       	ldd	r24, Y+2	; 0x02
    3274:	9b 81       	ldd	r25, Y+3	; 0x03
    3276:	83 30       	cpi	r24, 0x03	; 3
    3278:	91 05       	cpc	r25, r1
    327a:	81 f0       	breq	.+32     	; 0x329c <DIO_voidActivePortInPullUpResistance+0x6a>
    327c:	13 c0       	rjmp	.+38     	; 0x32a4 <DIO_voidActivePortInPullUpResistance+0x72>
	{
	case DIO_PORTA: PORTA = DIO_PORT_HIGH;break;
    327e:	eb e3       	ldi	r30, 0x3B	; 59
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	8f ef       	ldi	r24, 0xFF	; 255
    3284:	80 83       	st	Z, r24
    3286:	0e c0       	rjmp	.+28     	; 0x32a4 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTB: PORTB = DIO_PORT_HIGH;break;
    3288:	e8 e3       	ldi	r30, 0x38	; 56
    328a:	f0 e0       	ldi	r31, 0x00	; 0
    328c:	8f ef       	ldi	r24, 0xFF	; 255
    328e:	80 83       	st	Z, r24
    3290:	09 c0       	rjmp	.+18     	; 0x32a4 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTC: PORTC = DIO_PORT_HIGH;break;
    3292:	e5 e3       	ldi	r30, 0x35	; 53
    3294:	f0 e0       	ldi	r31, 0x00	; 0
    3296:	8f ef       	ldi	r24, 0xFF	; 255
    3298:	80 83       	st	Z, r24
    329a:	04 c0       	rjmp	.+8      	; 0x32a4 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTD: PORTD = DIO_PORT_HIGH;break;
    329c:	e2 e3       	ldi	r30, 0x32	; 50
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	8f ef       	ldi	r24, 0xFF	; 255
    32a2:	80 83       	st	Z, r24
	}
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <main>:
#include "CLCD_interface.h"
#include "CLCD_config.h"
#include "util/delay.h"

void main (void)
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidInit();
    32b8:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <CLCD_voidInit>
	//CLCD_voidSendData('A');

	/*CLCD_voidGoToPosition(0,5);
	CLCD_voidSendString("AMIRA");*/

	CLCD_voidSendNum(215);
    32bc:	87 ed       	ldi	r24, 0xD7	; 215
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	0e 94 1a 14 	call	0x2834	; 0x2834 <CLCD_voidSendNum>
    32c4:	ff cf       	rjmp	.-2      	; 0x32c4 <main+0x14>

000032c6 <__udivmodhi4>:
    32c6:	aa 1b       	sub	r26, r26
    32c8:	bb 1b       	sub	r27, r27
    32ca:	51 e1       	ldi	r21, 0x11	; 17
    32cc:	07 c0       	rjmp	.+14     	; 0x32dc <__udivmodhi4_ep>

000032ce <__udivmodhi4_loop>:
    32ce:	aa 1f       	adc	r26, r26
    32d0:	bb 1f       	adc	r27, r27
    32d2:	a6 17       	cp	r26, r22
    32d4:	b7 07       	cpc	r27, r23
    32d6:	10 f0       	brcs	.+4      	; 0x32dc <__udivmodhi4_ep>
    32d8:	a6 1b       	sub	r26, r22
    32da:	b7 0b       	sbc	r27, r23

000032dc <__udivmodhi4_ep>:
    32dc:	88 1f       	adc	r24, r24
    32de:	99 1f       	adc	r25, r25
    32e0:	5a 95       	dec	r21
    32e2:	a9 f7       	brne	.-22     	; 0x32ce <__udivmodhi4_loop>
    32e4:	80 95       	com	r24
    32e6:	90 95       	com	r25
    32e8:	bc 01       	movw	r22, r24
    32ea:	cd 01       	movw	r24, r26
    32ec:	08 95       	ret

000032ee <__prologue_saves__>:
    32ee:	2f 92       	push	r2
    32f0:	3f 92       	push	r3
    32f2:	4f 92       	push	r4
    32f4:	5f 92       	push	r5
    32f6:	6f 92       	push	r6
    32f8:	7f 92       	push	r7
    32fa:	8f 92       	push	r8
    32fc:	9f 92       	push	r9
    32fe:	af 92       	push	r10
    3300:	bf 92       	push	r11
    3302:	cf 92       	push	r12
    3304:	df 92       	push	r13
    3306:	ef 92       	push	r14
    3308:	ff 92       	push	r15
    330a:	0f 93       	push	r16
    330c:	1f 93       	push	r17
    330e:	cf 93       	push	r28
    3310:	df 93       	push	r29
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62
    3316:	ca 1b       	sub	r28, r26
    3318:	db 0b       	sbc	r29, r27
    331a:	0f b6       	in	r0, 0x3f	; 63
    331c:	f8 94       	cli
    331e:	de bf       	out	0x3e, r29	; 62
    3320:	0f be       	out	0x3f, r0	; 63
    3322:	cd bf       	out	0x3d, r28	; 61
    3324:	09 94       	ijmp

00003326 <__epilogue_restores__>:
    3326:	2a 88       	ldd	r2, Y+18	; 0x12
    3328:	39 88       	ldd	r3, Y+17	; 0x11
    332a:	48 88       	ldd	r4, Y+16	; 0x10
    332c:	5f 84       	ldd	r5, Y+15	; 0x0f
    332e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3330:	7d 84       	ldd	r7, Y+13	; 0x0d
    3332:	8c 84       	ldd	r8, Y+12	; 0x0c
    3334:	9b 84       	ldd	r9, Y+11	; 0x0b
    3336:	aa 84       	ldd	r10, Y+10	; 0x0a
    3338:	b9 84       	ldd	r11, Y+9	; 0x09
    333a:	c8 84       	ldd	r12, Y+8	; 0x08
    333c:	df 80       	ldd	r13, Y+7	; 0x07
    333e:	ee 80       	ldd	r14, Y+6	; 0x06
    3340:	fd 80       	ldd	r15, Y+5	; 0x05
    3342:	0c 81       	ldd	r16, Y+4	; 0x04
    3344:	1b 81       	ldd	r17, Y+3	; 0x03
    3346:	aa 81       	ldd	r26, Y+2	; 0x02
    3348:	b9 81       	ldd	r27, Y+1	; 0x01
    334a:	ce 0f       	add	r28, r30
    334c:	d1 1d       	adc	r29, r1
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	f8 94       	cli
    3352:	de bf       	out	0x3e, r29	; 62
    3354:	0f be       	out	0x3f, r0	; 63
    3356:	cd bf       	out	0x3d, r28	; 61
    3358:	ed 01       	movw	r28, r26
    335a:	08 95       	ret

0000335c <_exit>:
    335c:	f8 94       	cli

0000335e <__stop_program>:
    335e:	ff cf       	rjmp	.-2      	; 0x335e <__stop_program>
