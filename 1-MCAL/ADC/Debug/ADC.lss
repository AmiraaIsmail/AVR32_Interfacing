
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003728  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00003728  0000379c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000022ec  00000000  00000000  000037a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c6c  00000000  00000000  00005a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000066fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  0000685c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000069eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00008a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00009b31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000aab4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  0000ac34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000aef6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b784  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 21 1b 	call	0x3642	; 0x3642 <main>
      7a:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 63 1b 	jmp	0x36c6	; 0x36c6 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 7f 1b 	jmp	0x36fe	; 0x36fe <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_voidInit>:
#include "BIT_MATH.h"
#include "ADC_register.h"
#include "ADC_interface.h"

void ADC_voidInit(u8 copy_u8ReferenceVoltage)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <ADC_voidInit+0x6>
     c94:	0f 92       	push	r0
     c96:	cd b7       	in	r28, 0x3d	; 61
     c98:	de b7       	in	r29, 0x3e	; 62
     c9a:	89 83       	std	Y+1, r24	; 0x01
	//REFERENCE VOLTAGE
	switch(copy_u8ReferenceVoltage)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	3b 83       	std	Y+3, r19	; 0x03
     ca4:	2a 83       	std	Y+2, r18	; 0x02
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	9b 81       	ldd	r25, Y+3	; 0x03
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	91 05       	cpc	r25, r1
     cae:	c9 f0       	breq	.+50     	; 0xce2 <ADC_voidInit+0x54>
     cb0:	2a 81       	ldd	r18, Y+2	; 0x02
     cb2:	3b 81       	ldd	r19, Y+3	; 0x03
     cb4:	23 30       	cpi	r18, 0x03	; 3
     cb6:	31 05       	cpc	r19, r1
     cb8:	19 f1       	breq	.+70     	; 0xd00 <ADC_voidInit+0x72>
     cba:	8a 81       	ldd	r24, Y+2	; 0x02
     cbc:	9b 81       	ldd	r25, Y+3	; 0x03
     cbe:	81 30       	cpi	r24, 0x01	; 1
     cc0:	91 05       	cpc	r25, r1
     cc2:	61 f5       	brne	.+88     	; 0xd1c <ADC_voidInit+0x8e>
	{
	case ADC_REFERENCE_AVCC:
		CLR_BIT(ADMUX_REG, REFS1);
     cc4:	a7 e2       	ldi	r26, 0x27	; 39
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e7 e2       	ldi	r30, 0x27	; 39
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8f 77       	andi	r24, 0x7F	; 127
     cd0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG, REFS0);
     cd2:	a7 e2       	ldi	r26, 0x27	; 39
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e7 e2       	ldi	r30, 0x27	; 39
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	8c 93       	st	X, r24
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <ADC_voidInit+0x8e>
		break;
	case ADC_REFERENCE_AREF:
		CLR_BIT(ADMUX_REG, REFS1);
     ce2:	a7 e2       	ldi	r26, 0x27	; 39
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e7 e2       	ldi	r30, 0x27	; 39
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	8f 77       	andi	r24, 0x7F	; 127
     cee:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG, REFS0);
     cf0:	a7 e2       	ldi	r26, 0x27	; 39
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e7 e2       	ldi	r30, 0x27	; 39
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	8f 7b       	andi	r24, 0xBF	; 191
     cfc:	8c 93       	st	X, r24
     cfe:	0e c0       	rjmp	.+28     	; 0xd1c <ADC_voidInit+0x8e>
		break;
	case ADC_REFERENCE_INTERNAL:  	//Vref = 2.56V internal
		SET_BIT(ADMUX_REG, REFS1);
     d00:	a7 e2       	ldi	r26, 0x27	; 39
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e7 e2       	ldi	r30, 0x27	; 39
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	80 68       	ori	r24, 0x80	; 128
     d0c:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG, REFS0);
     d0e:	a7 e2       	ldi	r26, 0x27	; 39
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e7 e2       	ldi	r30, 0x27	; 39
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	80 64       	ori	r24, 0x40	; 64
     d1a:	8c 93       	st	X, r24
		break;
	}

	//RIGHT ADJUSTEMENT
	CLR_BIT(ADMUX_REG, ADLAR);
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	8f 7d       	andi	r24, 0xDF	; 223
     d28:	8c 93       	st	X, r24

	//PRESCALER 128
	SET_BIT(ADCSRA_REG, ADPS0);
     d2a:	a6 e2       	ldi	r26, 0x26	; 38
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e6 e2       	ldi	r30, 0x26	; 38
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	81 60       	ori	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS1);
     d38:	a6 e2       	ldi	r26, 0x26	; 38
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	e6 e2       	ldi	r30, 0x26	; 38
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	82 60       	ori	r24, 0x02	; 2
     d44:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG, ADPS2);
     d46:	a6 e2       	ldi	r26, 0x26	; 38
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e6 e2       	ldi	r30, 0x26	; 38
     d4c:	f0 e0       	ldi	r31, 0x00	; 0
     d4e:	80 81       	ld	r24, Z
     d50:	84 60       	ori	r24, 0x04	; 4
     d52:	8c 93       	st	X, r24

	//DISABLE INTERRUPT
	CLR_BIT(ADCSRA_REG, ADIE);
     d54:	a6 e2       	ldi	r26, 0x26	; 38
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	e6 e2       	ldi	r30, 0x26	; 38
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	87 7f       	andi	r24, 0xF7	; 247
     d60:	8c 93       	st	X, r24

	//DISABLE AUTO TRIGGER
	CLR_BIT(ADCSRA_REG, ADATE);
     d62:	a6 e2       	ldi	r26, 0x26	; 38
     d64:	b0 e0       	ldi	r27, 0x00	; 0
     d66:	e6 e2       	ldi	r30, 0x26	; 38
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	8f 7d       	andi	r24, 0xDF	; 223
     d6e:	8c 93       	st	X, r24

	//ENABLE ADC
	SET_BIT(ADCSRA_REG, ADEN);
     d70:	a6 e2       	ldi	r26, 0x26	; 38
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e6 e2       	ldi	r30, 0x26	; 38
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	80 68       	ori	r24, 0x80	; 128
     d7c:	8c 93       	st	X, r24
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	0f 90       	pop	r0
     d84:	cf 91       	pop	r28
     d86:	df 91       	pop	r29
     d88:	08 95       	ret

00000d8a <ADC_u8ReadDigitalValue>:

void ADC_u8ReadDigitalValue (u8 copy_u8ChannelNumber, u16* copy_pu16DigitalValue)
{
     d8a:	df 93       	push	r29
     d8c:	cf 93       	push	r28
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <ADC_u8ReadDigitalValue+0x6>
     d90:	0f 92       	push	r0
     d92:	cd b7       	in	r28, 0x3d	; 61
     d94:	de b7       	in	r29, 0x3e	; 62
     d96:	89 83       	std	Y+1, r24	; 0x01
     d98:	7b 83       	std	Y+3, r23	; 0x03
     d9a:	6a 83       	std	Y+2, r22	; 0x02
	if ((copy_pu16DigitalValue != NULL)&&(copy_u8ChannelNumber < 32))
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	9b 81       	ldd	r25, Y+3	; 0x03
     da0:	00 97       	sbiw	r24, 0x00	; 0
     da2:	99 f1       	breq	.+102    	; 0xe0a <ADC_u8ReadDigitalValue+0x80>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	80 32       	cpi	r24, 0x20	; 32
     da8:	80 f5       	brcc	.+96     	; 0xe0a <ADC_u8ReadDigitalValue+0x80>
	{
		//CLEAR ADMUX BITS
		ADMUX_REG &= 0b11100000;       //0b11100000 = 0xE0
     daa:	a7 e2       	ldi	r26, 0x27	; 39
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e2       	ldi	r30, 0x27	; 39
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	80 7e       	andi	r24, 0xE0	; 224
     db6:	8c 93       	st	X, r24

		//SET THE REQUIRED CHANNEL
		ADMUX_REG |= copy_u8ChannelNumber;
     db8:	a7 e2       	ldi	r26, 0x27	; 39
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	e7 e2       	ldi	r30, 0x27	; 39
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	90 81       	ld	r25, Z
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	89 2b       	or	r24, r25
     dc6:	8c 93       	st	X, r24

		//START CONVERSION
		SET_BIT(ADCSRA_REG, ADSC);
     dc8:	a6 e2       	ldi	r26, 0x26	; 38
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e6 e2       	ldi	r30, 0x26	; 38
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	80 64       	ori	r24, 0x40	; 64
     dd4:	8c 93       	st	X, r24

		//BUSY WAIT
		while(GET_BIT(ADCSRA_REG, ADIF) == 0);
     dd6:	e6 e2       	ldi	r30, 0x26	; 38
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	82 95       	swap	r24
     dde:	8f 70       	andi	r24, 0x0F	; 15
     de0:	88 2f       	mov	r24, r24
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	81 70       	andi	r24, 0x01	; 1
     de6:	90 70       	andi	r25, 0x00	; 0
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	a9 f3       	breq	.-22     	; 0xdd6 <ADC_u8ReadDigitalValue+0x4c>

		//CLR FLAG
		SET_BIT(ADCSRA_REG, ADIF);
     dec:	a6 e2       	ldi	r26, 0x26	; 38
     dee:	b0 e0       	ldi	r27, 0x00	; 0
     df0:	e6 e2       	ldi	r30, 0x26	; 38
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
     df6:	80 61       	ori	r24, 0x10	; 16
     df8:	8c 93       	st	X, r24

		//READ DATA
		*copy_pu16DigitalValue = ADC_u16_REG;
     dfa:	e4 e2       	ldi	r30, 0x24	; 36
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	91 81       	ldd	r25, Z+1	; 0x01
     e02:	ea 81       	ldd	r30, Y+2	; 0x02
     e04:	fb 81       	ldd	r31, Y+3	; 0x03
     e06:	91 83       	std	Z+1, r25	; 0x01
     e08:	80 83       	st	Z, r24
	}
	else
	{
		//
	}
}
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	08 95       	ret

00000e16 <CLCD_voidSendCommand>:
#include "CLCD_config.h"
#include "util/delay.h"


void CLCD_voidSendCommand(u8 CLCD_u8Command)
{
     e16:	df 93       	push	r29
     e18:	cf 93       	push	r28
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	e9 97       	sbiw	r28, 0x39	; 57
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	89 af       	std	Y+57, r24	; 0x39
	// RW low
	//DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_LOW);
	// RS low
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_LOW);
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	63 e0       	ldi	r22, 0x03	; 3
     e30:	40 e0       	ldi	r20, 0x00	; 0
     e32:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	// EN high
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	62 e0       	ldi	r22, 0x02	; 2
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>

#if	(LCD_MODE	==	LCD_4BIT)
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Command,4)));
     e40:	89 ad       	ldd	r24, Y+57	; 0x39
     e42:	82 95       	swap	r24
     e44:	8f 70       	andi	r24, 0x0F	; 15
     e46:	98 2f       	mov	r25, r24
     e48:	91 70       	andi	r25, 0x01	; 1
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	49 2f       	mov	r20, r25
     e50:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Command,5)));
     e54:	89 ad       	ldd	r24, Y+57	; 0x39
     e56:	82 95       	swap	r24
     e58:	86 95       	lsr	r24
     e5a:	87 70       	andi	r24, 0x07	; 7
     e5c:	98 2f       	mov	r25, r24
     e5e:	91 70       	andi	r25, 0x01	; 1
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	61 e0       	ldi	r22, 0x01	; 1
     e64:	49 2f       	mov	r20, r25
     e66:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Command,6)));
     e6a:	89 ad       	ldd	r24, Y+57	; 0x39
     e6c:	82 95       	swap	r24
     e6e:	86 95       	lsr	r24
     e70:	86 95       	lsr	r24
     e72:	83 70       	andi	r24, 0x03	; 3
     e74:	98 2f       	mov	r25, r24
     e76:	91 70       	andi	r25, 0x01	; 1
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	49 2f       	mov	r20, r25
     e7e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Command,7)));
     e82:	89 ad       	ldd	r24, Y+57	; 0x39
     e84:	98 2f       	mov	r25, r24
     e86:	99 1f       	adc	r25, r25
     e88:	99 27       	eor	r25, r25
     e8a:	99 1f       	adc	r25, r25
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	64 e0       	ldi	r22, 0x04	; 4
     e90:	49 2f       	mov	r20, r25
     e92:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	41 e0       	ldi	r20, 0x01	; 1
     e9c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
     ea0:	80 e0       	ldi	r24, 0x00	; 0
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	a0 e8       	ldi	r26, 0x80	; 128
     ea6:	bf e3       	ldi	r27, 0x3F	; 63
     ea8:	8d ab       	std	Y+53, r24	; 0x35
     eaa:	9e ab       	std	Y+54, r25	; 0x36
     eac:	af ab       	std	Y+55, r26	; 0x37
     eae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     eb0:	6d a9       	ldd	r22, Y+53	; 0x35
     eb2:	7e a9       	ldd	r23, Y+54	; 0x36
     eb4:	8f a9       	ldd	r24, Y+55	; 0x37
     eb6:	98 ad       	ldd	r25, Y+56	; 0x38
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	4a e7       	ldi	r20, 0x7A	; 122
     ebe:	55 e4       	ldi	r21, 0x45	; 69
     ec0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	89 ab       	std	Y+49, r24	; 0x31
     eca:	9a ab       	std	Y+50, r25	; 0x32
     ecc:	ab ab       	std	Y+51, r26	; 0x33
     ece:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ed0:	69 a9       	ldd	r22, Y+49	; 0x31
     ed2:	7a a9       	ldd	r23, Y+50	; 0x32
     ed4:	8b a9       	ldd	r24, Y+51	; 0x33
     ed6:	9c a9       	ldd	r25, Y+52	; 0x34
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e8       	ldi	r20, 0x80	; 128
     ede:	5f e3       	ldi	r21, 0x3F	; 63
     ee0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     ee4:	88 23       	and	r24, r24
     ee6:	2c f4       	brge	.+10     	; 0xef2 <CLCD_voidSendCommand+0xdc>
		__ticks = 1;
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	98 ab       	std	Y+48, r25	; 0x30
     eee:	8f a7       	std	Y+47, r24	; 0x2f
     ef0:	3f c0       	rjmp	.+126    	; 0xf70 <CLCD_voidSendCommand+0x15a>
	else if (__tmp > 65535)
     ef2:	69 a9       	ldd	r22, Y+49	; 0x31
     ef4:	7a a9       	ldd	r23, Y+50	; 0x32
     ef6:	8b a9       	ldd	r24, Y+51	; 0x33
     ef8:	9c a9       	ldd	r25, Y+52	; 0x34
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	3f ef       	ldi	r19, 0xFF	; 255
     efe:	4f e7       	ldi	r20, 0x7F	; 127
     f00:	57 e4       	ldi	r21, 0x47	; 71
     f02:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     f06:	18 16       	cp	r1, r24
     f08:	4c f5       	brge	.+82     	; 0xf5c <CLCD_voidSendCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f0a:	6d a9       	ldd	r22, Y+53	; 0x35
     f0c:	7e a9       	ldd	r23, Y+54	; 0x36
     f0e:	8f a9       	ldd	r24, Y+55	; 0x37
     f10:	98 ad       	ldd	r25, Y+56	; 0x38
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	40 e2       	ldi	r20, 0x20	; 32
     f18:	51 e4       	ldi	r21, 0x41	; 65
     f1a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	bc 01       	movw	r22, r24
     f24:	cd 01       	movw	r24, r26
     f26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	98 ab       	std	Y+48, r25	; 0x30
     f30:	8f a7       	std	Y+47, r24	; 0x2f
     f32:	0f c0       	rjmp	.+30     	; 0xf52 <CLCD_voidSendCommand+0x13c>
     f34:	80 e9       	ldi	r24, 0x90	; 144
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	9e a7       	std	Y+46, r25	; 0x2e
     f3a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f3c:	8d a5       	ldd	r24, Y+45	; 0x2d
     f3e:	9e a5       	ldd	r25, Y+46	; 0x2e
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <CLCD_voidSendCommand+0x12a>
     f44:	9e a7       	std	Y+46, r25	; 0x2e
     f46:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f48:	8f a5       	ldd	r24, Y+47	; 0x2f
     f4a:	98 a9       	ldd	r25, Y+48	; 0x30
     f4c:	01 97       	sbiw	r24, 0x01	; 1
     f4e:	98 ab       	std	Y+48, r25	; 0x30
     f50:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f52:	8f a5       	ldd	r24, Y+47	; 0x2f
     f54:	98 a9       	ldd	r25, Y+48	; 0x30
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	69 f7       	brne	.-38     	; 0xf34 <CLCD_voidSendCommand+0x11e>
     f5a:	14 c0       	rjmp	.+40     	; 0xf84 <CLCD_voidSendCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f5c:	69 a9       	ldd	r22, Y+49	; 0x31
     f5e:	7a a9       	ldd	r23, Y+50	; 0x32
     f60:	8b a9       	ldd	r24, Y+51	; 0x33
     f62:	9c a9       	ldd	r25, Y+52	; 0x34
     f64:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	98 ab       	std	Y+48, r25	; 0x30
     f6e:	8f a7       	std	Y+47, r24	; 0x2f
     f70:	8f a5       	ldd	r24, Y+47	; 0x2f
     f72:	98 a9       	ldd	r25, Y+48	; 0x30
     f74:	9c a7       	std	Y+44, r25	; 0x2c
     f76:	8b a7       	std	Y+43, r24	; 0x2b
     f78:	8b a5       	ldd	r24, Y+43	; 0x2b
     f7a:	9c a5       	ldd	r25, Y+44	; 0x2c
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	f1 f7       	brne	.-4      	; 0xf7c <CLCD_voidSendCommand+0x166>
     f80:	9c a7       	std	Y+44, r25	; 0x2c
     f82:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	62 e0       	ldi	r22, 0x02	; 2
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
     f8e:	80 e0       	ldi	r24, 0x00	; 0
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	a0 e8       	ldi	r26, 0x80	; 128
     f94:	bf e3       	ldi	r27, 0x3F	; 63
     f96:	8f a3       	std	Y+39, r24	; 0x27
     f98:	98 a7       	std	Y+40, r25	; 0x28
     f9a:	a9 a7       	std	Y+41, r26	; 0x29
     f9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f9e:	6f a1       	ldd	r22, Y+39	; 0x27
     fa0:	78 a5       	ldd	r23, Y+40	; 0x28
     fa2:	89 a5       	ldd	r24, Y+41	; 0x29
     fa4:	9a a5       	ldd	r25, Y+42	; 0x2a
     fa6:	20 e0       	ldi	r18, 0x00	; 0
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	4a e7       	ldi	r20, 0x7A	; 122
     fac:	55 e4       	ldi	r21, 0x45	; 69
     fae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	8b a3       	std	Y+35, r24	; 0x23
     fb8:	9c a3       	std	Y+36, r25	; 0x24
     fba:	ad a3       	std	Y+37, r26	; 0x25
     fbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     fbe:	6b a1       	ldd	r22, Y+35	; 0x23
     fc0:	7c a1       	ldd	r23, Y+36	; 0x24
     fc2:	8d a1       	ldd	r24, Y+37	; 0x25
     fc4:	9e a1       	ldd	r25, Y+38	; 0x26
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e8       	ldi	r20, 0x80	; 128
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	2c f4       	brge	.+10     	; 0xfe0 <CLCD_voidSendCommand+0x1ca>
		__ticks = 1;
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9a a3       	std	Y+34, r25	; 0x22
     fdc:	89 a3       	std	Y+33, r24	; 0x21
     fde:	3f c0       	rjmp	.+126    	; 0x105e <CLCD_voidSendCommand+0x248>
	else if (__tmp > 65535)
     fe0:	6b a1       	ldd	r22, Y+35	; 0x23
     fe2:	7c a1       	ldd	r23, Y+36	; 0x24
     fe4:	8d a1       	ldd	r24, Y+37	; 0x25
     fe6:	9e a1       	ldd	r25, Y+38	; 0x26
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	4f e7       	ldi	r20, 0x7F	; 127
     fee:	57 e4       	ldi	r21, 0x47	; 71
     ff0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
     ff4:	18 16       	cp	r1, r24
     ff6:	4c f5       	brge	.+82     	; 0x104a <CLCD_voidSendCommand+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ff8:	6f a1       	ldd	r22, Y+39	; 0x27
     ffa:	78 a5       	ldd	r23, Y+40	; 0x28
     ffc:	89 a5       	ldd	r24, Y+41	; 0x29
     ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e2       	ldi	r20, 0x20	; 32
    1006:	51 e4       	ldi	r21, 0x41	; 65
    1008:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	bc 01       	movw	r22, r24
    1012:	cd 01       	movw	r24, r26
    1014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1018:	dc 01       	movw	r26, r24
    101a:	cb 01       	movw	r24, r22
    101c:	9a a3       	std	Y+34, r25	; 0x22
    101e:	89 a3       	std	Y+33, r24	; 0x21
    1020:	0f c0       	rjmp	.+30     	; 0x1040 <CLCD_voidSendCommand+0x22a>
    1022:	80 e9       	ldi	r24, 0x90	; 144
    1024:	91 e0       	ldi	r25, 0x01	; 1
    1026:	98 a3       	std	Y+32, r25	; 0x20
    1028:	8f 8f       	std	Y+31, r24	; 0x1f
    102a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    102c:	98 a1       	ldd	r25, Y+32	; 0x20
    102e:	01 97       	sbiw	r24, 0x01	; 1
    1030:	f1 f7       	brne	.-4      	; 0x102e <CLCD_voidSendCommand+0x218>
    1032:	98 a3       	std	Y+32, r25	; 0x20
    1034:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1036:	89 a1       	ldd	r24, Y+33	; 0x21
    1038:	9a a1       	ldd	r25, Y+34	; 0x22
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	9a a3       	std	Y+34, r25	; 0x22
    103e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1040:	89 a1       	ldd	r24, Y+33	; 0x21
    1042:	9a a1       	ldd	r25, Y+34	; 0x22
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	69 f7       	brne	.-38     	; 0x1022 <CLCD_voidSendCommand+0x20c>
    1048:	14 c0       	rjmp	.+40     	; 0x1072 <CLCD_voidSendCommand+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    104a:	6b a1       	ldd	r22, Y+35	; 0x23
    104c:	7c a1       	ldd	r23, Y+36	; 0x24
    104e:	8d a1       	ldd	r24, Y+37	; 0x25
    1050:	9e a1       	ldd	r25, Y+38	; 0x26
    1052:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	9a a3       	std	Y+34, r25	; 0x22
    105c:	89 a3       	std	Y+33, r24	; 0x21
    105e:	89 a1       	ldd	r24, Y+33	; 0x21
    1060:	9a a1       	ldd	r25, Y+34	; 0x22
    1062:	9e 8f       	std	Y+30, r25	; 0x1e
    1064:	8d 8f       	std	Y+29, r24	; 0x1d
    1066:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1068:	9e 8d       	ldd	r25, Y+30	; 0x1e
    106a:	01 97       	sbiw	r24, 0x01	; 1
    106c:	f1 f7       	brne	.-4      	; 0x106a <CLCD_voidSendCommand+0x254>
    106e:	9e 8f       	std	Y+30, r25	; 0x1e
    1070:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Command,0)));
    1072:	89 ad       	ldd	r24, Y+57	; 0x39
    1074:	98 2f       	mov	r25, r24
    1076:	91 70       	andi	r25, 0x01	; 1
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	60 e0       	ldi	r22, 0x00	; 0
    107c:	49 2f       	mov	r20, r25
    107e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Command,1)));
    1082:	89 ad       	ldd	r24, Y+57	; 0x39
    1084:	86 95       	lsr	r24
    1086:	98 2f       	mov	r25, r24
    1088:	91 70       	andi	r25, 0x01	; 1
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	49 2f       	mov	r20, r25
    1090:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Command,2)));
    1094:	89 ad       	ldd	r24, Y+57	; 0x39
    1096:	86 95       	lsr	r24
    1098:	86 95       	lsr	r24
    109a:	98 2f       	mov	r25, r24
    109c:	91 70       	andi	r25, 0x01	; 1
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	62 e0       	ldi	r22, 0x02	; 2
    10a2:	49 2f       	mov	r20, r25
    10a4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Command,3)));
    10a8:	89 ad       	ldd	r24, Y+57	; 0x39
    10aa:	86 95       	lsr	r24
    10ac:	86 95       	lsr	r24
    10ae:	86 95       	lsr	r24
    10b0:	98 2f       	mov	r25, r24
    10b2:	91 70       	andi	r25, 0x01	; 1
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	64 e0       	ldi	r22, 0x04	; 4
    10b8:	49 2f       	mov	r20, r25
    10ba:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	62 e0       	ldi	r22, 0x02	; 2
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    10c8:	80 e0       	ldi	r24, 0x00	; 0
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	a0 e8       	ldi	r26, 0x80	; 128
    10ce:	bf e3       	ldi	r27, 0x3F	; 63
    10d0:	89 8f       	std	Y+25, r24	; 0x19
    10d2:	9a 8f       	std	Y+26, r25	; 0x1a
    10d4:	ab 8f       	std	Y+27, r26	; 0x1b
    10d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d8:	69 8d       	ldd	r22, Y+25	; 0x19
    10da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10e0:	20 e0       	ldi	r18, 0x00	; 0
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	4a e7       	ldi	r20, 0x7A	; 122
    10e6:	55 e4       	ldi	r21, 0x45	; 69
    10e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ec:	dc 01       	movw	r26, r24
    10ee:	cb 01       	movw	r24, r22
    10f0:	8d 8b       	std	Y+21, r24	; 0x15
    10f2:	9e 8b       	std	Y+22, r25	; 0x16
    10f4:	af 8b       	std	Y+23, r26	; 0x17
    10f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10f8:	6d 89       	ldd	r22, Y+21	; 0x15
    10fa:	7e 89       	ldd	r23, Y+22	; 0x16
    10fc:	8f 89       	ldd	r24, Y+23	; 0x17
    10fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e8       	ldi	r20, 0x80	; 128
    1106:	5f e3       	ldi	r21, 0x3F	; 63
    1108:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    110c:	88 23       	and	r24, r24
    110e:	2c f4       	brge	.+10     	; 0x111a <CLCD_voidSendCommand+0x304>
		__ticks = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	9c 8b       	std	Y+20, r25	; 0x14
    1116:	8b 8b       	std	Y+19, r24	; 0x13
    1118:	3f c0       	rjmp	.+126    	; 0x1198 <CLCD_voidSendCommand+0x382>
	else if (__tmp > 65535)
    111a:	6d 89       	ldd	r22, Y+21	; 0x15
    111c:	7e 89       	ldd	r23, Y+22	; 0x16
    111e:	8f 89       	ldd	r24, Y+23	; 0x17
    1120:	98 8d       	ldd	r25, Y+24	; 0x18
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	3f ef       	ldi	r19, 0xFF	; 255
    1126:	4f e7       	ldi	r20, 0x7F	; 127
    1128:	57 e4       	ldi	r21, 0x47	; 71
    112a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    112e:	18 16       	cp	r1, r24
    1130:	4c f5       	brge	.+82     	; 0x1184 <CLCD_voidSendCommand+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1132:	69 8d       	ldd	r22, Y+25	; 0x19
    1134:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1136:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1138:	9c 8d       	ldd	r25, Y+28	; 0x1c
    113a:	20 e0       	ldi	r18, 0x00	; 0
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	40 e2       	ldi	r20, 0x20	; 32
    1140:	51 e4       	ldi	r21, 0x41	; 65
    1142:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1146:	dc 01       	movw	r26, r24
    1148:	cb 01       	movw	r24, r22
    114a:	bc 01       	movw	r22, r24
    114c:	cd 01       	movw	r24, r26
    114e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1152:	dc 01       	movw	r26, r24
    1154:	cb 01       	movw	r24, r22
    1156:	9c 8b       	std	Y+20, r25	; 0x14
    1158:	8b 8b       	std	Y+19, r24	; 0x13
    115a:	0f c0       	rjmp	.+30     	; 0x117a <CLCD_voidSendCommand+0x364>
    115c:	80 e9       	ldi	r24, 0x90	; 144
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	9a 8b       	std	Y+18, r25	; 0x12
    1162:	89 8b       	std	Y+17, r24	; 0x11
    1164:	89 89       	ldd	r24, Y+17	; 0x11
    1166:	9a 89       	ldd	r25, Y+18	; 0x12
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <CLCD_voidSendCommand+0x352>
    116c:	9a 8b       	std	Y+18, r25	; 0x12
    116e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1170:	8b 89       	ldd	r24, Y+19	; 0x13
    1172:	9c 89       	ldd	r25, Y+20	; 0x14
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	9c 8b       	std	Y+20, r25	; 0x14
    1178:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    117a:	8b 89       	ldd	r24, Y+19	; 0x13
    117c:	9c 89       	ldd	r25, Y+20	; 0x14
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	69 f7       	brne	.-38     	; 0x115c <CLCD_voidSendCommand+0x346>
    1182:	14 c0       	rjmp	.+40     	; 0x11ac <CLCD_voidSendCommand+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1184:	6d 89       	ldd	r22, Y+21	; 0x15
    1186:	7e 89       	ldd	r23, Y+22	; 0x16
    1188:	8f 89       	ldd	r24, Y+23	; 0x17
    118a:	98 8d       	ldd	r25, Y+24	; 0x18
    118c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	8b 89       	ldd	r24, Y+19	; 0x13
    119a:	9c 89       	ldd	r25, Y+20	; 0x14
    119c:	98 8b       	std	Y+16, r25	; 0x10
    119e:	8f 87       	std	Y+15, r24	; 0x0f
    11a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a2:	98 89       	ldd	r25, Y+16	; 0x10
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <CLCD_voidSendCommand+0x38e>
    11a8:	98 8b       	std	Y+16, r25	; 0x10
    11aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	62 e0       	ldi	r22, 0x02	; 2
    11b0:	40 e0       	ldi	r20, 0x00	; 0
    11b2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a0 e8       	ldi	r26, 0x80	; 128
    11bc:	bf e3       	ldi	r27, 0x3F	; 63
    11be:	8b 87       	std	Y+11, r24	; 0x0b
    11c0:	9c 87       	std	Y+12, r25	; 0x0c
    11c2:	ad 87       	std	Y+13, r26	; 0x0d
    11c4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    11cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	4a e7       	ldi	r20, 0x7A	; 122
    11d4:	55 e4       	ldi	r21, 0x45	; 69
    11d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	8f 83       	std	Y+7, r24	; 0x07
    11e0:	98 87       	std	Y+8, r25	; 0x08
    11e2:	a9 87       	std	Y+9, r26	; 0x09
    11e4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11e6:	6f 81       	ldd	r22, Y+7	; 0x07
    11e8:	78 85       	ldd	r23, Y+8	; 0x08
    11ea:	89 85       	ldd	r24, Y+9	; 0x09
    11ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e8       	ldi	r20, 0x80	; 128
    11f4:	5f e3       	ldi	r21, 0x3F	; 63
    11f6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    11fa:	88 23       	and	r24, r24
    11fc:	2c f4       	brge	.+10     	; 0x1208 <CLCD_voidSendCommand+0x3f2>
		__ticks = 1;
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	9e 83       	std	Y+6, r25	; 0x06
    1204:	8d 83       	std	Y+5, r24	; 0x05
    1206:	3f c0       	rjmp	.+126    	; 0x1286 <CLCD_voidSendCommand+0x470>
	else if (__tmp > 65535)
    1208:	6f 81       	ldd	r22, Y+7	; 0x07
    120a:	78 85       	ldd	r23, Y+8	; 0x08
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	3f ef       	ldi	r19, 0xFF	; 255
    1214:	4f e7       	ldi	r20, 0x7F	; 127
    1216:	57 e4       	ldi	r21, 0x47	; 71
    1218:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    121c:	18 16       	cp	r1, r24
    121e:	4c f5       	brge	.+82     	; 0x1272 <CLCD_voidSendCommand+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1220:	6b 85       	ldd	r22, Y+11	; 0x0b
    1222:	7c 85       	ldd	r23, Y+12	; 0x0c
    1224:	8d 85       	ldd	r24, Y+13	; 0x0d
    1226:	9e 85       	ldd	r25, Y+14	; 0x0e
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e2       	ldi	r20, 0x20	; 32
    122e:	51 e4       	ldi	r21, 0x41	; 65
    1230:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	8d 83       	std	Y+5, r24	; 0x05
    1248:	0f c0       	rjmp	.+30     	; 0x1268 <CLCD_voidSendCommand+0x452>
    124a:	80 e9       	ldi	r24, 0x90	; 144
    124c:	91 e0       	ldi	r25, 0x01	; 1
    124e:	9c 83       	std	Y+4, r25	; 0x04
    1250:	8b 83       	std	Y+3, r24	; 0x03
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	f1 f7       	brne	.-4      	; 0x1256 <CLCD_voidSendCommand+0x440>
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	9e 83       	std	Y+6, r25	; 0x06
    1266:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	69 f7       	brne	.-38     	; 0x124a <CLCD_voidSendCommand+0x434>
    1270:	14 c0       	rjmp	.+40     	; 0x129a <CLCD_voidSendCommand+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1272:	6f 81       	ldd	r22, Y+7	; 0x07
    1274:	78 85       	ldd	r23, Y+8	; 0x08
    1276:	89 85       	ldd	r24, Y+9	; 0x09
    1278:	9a 85       	ldd	r25, Y+10	; 0x0a
    127a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	8d 81       	ldd	r24, Y+5	; 0x05
    1288:	9e 81       	ldd	r25, Y+6	; 0x06
    128a:	9a 83       	std	Y+2, r25	; 0x02
    128c:	89 83       	std	Y+1, r24	; 0x01
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	9a 81       	ldd	r25, Y+2	; 0x02
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	f1 f7       	brne	.-4      	; 0x1292 <CLCD_voidSendCommand+0x47c>
    1296:	9a 83       	std	Y+2, r25	; 0x02
    1298:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
	_delay_ms(1);

#endif
}
    129a:	e9 96       	adiw	r28, 0x39	; 57
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <CLCD_voidSendData>:

void CLCD_voidSendData(u8 CLCD_u8Data)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	e9 97       	sbiw	r28, 0x39	; 57
    12b6:	0f b6       	in	r0, 0x3f	; 63
    12b8:	f8 94       	cli
    12ba:	de bf       	out	0x3e, r29	; 62
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	cd bf       	out	0x3d, r28	; 61
    12c0:	89 af       	std	Y+57, r24	; 0x39
	//Set RS = 1
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_HIGH);
    12c2:	80 e0       	ldi	r24, 0x00	; 0
    12c4:	63 e0       	ldi	r22, 0x03	; 3
    12c6:	41 e0       	ldi	r20, 0x01	; 1
    12c8:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	// EN high
	//DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);

	//Send Command
#if	(LCD_MODE	==	LCD_4BIT)
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Data,4)));
    12cc:	89 ad       	ldd	r24, Y+57	; 0x39
    12ce:	82 95       	swap	r24
    12d0:	8f 70       	andi	r24, 0x0F	; 15
    12d2:	98 2f       	mov	r25, r24
    12d4:	91 70       	andi	r25, 0x01	; 1
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	49 2f       	mov	r20, r25
    12dc:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Data,5)));
    12e0:	89 ad       	ldd	r24, Y+57	; 0x39
    12e2:	82 95       	swap	r24
    12e4:	86 95       	lsr	r24
    12e6:	87 70       	andi	r24, 0x07	; 7
    12e8:	98 2f       	mov	r25, r24
    12ea:	91 70       	andi	r25, 0x01	; 1
    12ec:	81 e0       	ldi	r24, 0x01	; 1
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	49 2f       	mov	r20, r25
    12f2:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Data,6)));
    12f6:	89 ad       	ldd	r24, Y+57	; 0x39
    12f8:	82 95       	swap	r24
    12fa:	86 95       	lsr	r24
    12fc:	86 95       	lsr	r24
    12fe:	83 70       	andi	r24, 0x03	; 3
    1300:	98 2f       	mov	r25, r24
    1302:	91 70       	andi	r25, 0x01	; 1
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	62 e0       	ldi	r22, 0x02	; 2
    1308:	49 2f       	mov	r20, r25
    130a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Data,7)));
    130e:	89 ad       	ldd	r24, Y+57	; 0x39
    1310:	98 2f       	mov	r25, r24
    1312:	99 1f       	adc	r25, r25
    1314:	99 27       	eor	r25, r25
    1316:	99 1f       	adc	r25, r25
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	64 e0       	ldi	r22, 0x04	; 4
    131c:	49 2f       	mov	r20, r25
    131e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e8       	ldi	r26, 0x80	; 128
    1332:	bf e3       	ldi	r27, 0x3F	; 63
    1334:	8d ab       	std	Y+53, r24	; 0x35
    1336:	9e ab       	std	Y+54, r25	; 0x36
    1338:	af ab       	std	Y+55, r26	; 0x37
    133a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133c:	6d a9       	ldd	r22, Y+53	; 0x35
    133e:	7e a9       	ldd	r23, Y+54	; 0x36
    1340:	8f a9       	ldd	r24, Y+55	; 0x37
    1342:	98 ad       	ldd	r25, Y+56	; 0x38
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	4a e7       	ldi	r20, 0x7A	; 122
    134a:	55 e4       	ldi	r21, 0x45	; 69
    134c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	89 ab       	std	Y+49, r24	; 0x31
    1356:	9a ab       	std	Y+50, r25	; 0x32
    1358:	ab ab       	std	Y+51, r26	; 0x33
    135a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    135c:	69 a9       	ldd	r22, Y+49	; 0x31
    135e:	7a a9       	ldd	r23, Y+50	; 0x32
    1360:	8b a9       	ldd	r24, Y+51	; 0x33
    1362:	9c a9       	ldd	r25, Y+52	; 0x34
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1370:	88 23       	and	r24, r24
    1372:	2c f4       	brge	.+10     	; 0x137e <CLCD_voidSendData+0xd2>
		__ticks = 1;
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	98 ab       	std	Y+48, r25	; 0x30
    137a:	8f a7       	std	Y+47, r24	; 0x2f
    137c:	3f c0       	rjmp	.+126    	; 0x13fc <CLCD_voidSendData+0x150>
	else if (__tmp > 65535)
    137e:	69 a9       	ldd	r22, Y+49	; 0x31
    1380:	7a a9       	ldd	r23, Y+50	; 0x32
    1382:	8b a9       	ldd	r24, Y+51	; 0x33
    1384:	9c a9       	ldd	r25, Y+52	; 0x34
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1392:	18 16       	cp	r1, r24
    1394:	4c f5       	brge	.+82     	; 0x13e8 <CLCD_voidSendData+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1396:	6d a9       	ldd	r22, Y+53	; 0x35
    1398:	7e a9       	ldd	r23, Y+54	; 0x36
    139a:	8f a9       	ldd	r24, Y+55	; 0x37
    139c:	98 ad       	ldd	r25, Y+56	; 0x38
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	40 e2       	ldi	r20, 0x20	; 32
    13a4:	51 e4       	ldi	r21, 0x41	; 65
    13a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13aa:	dc 01       	movw	r26, r24
    13ac:	cb 01       	movw	r24, r22
    13ae:	bc 01       	movw	r22, r24
    13b0:	cd 01       	movw	r24, r26
    13b2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	98 ab       	std	Y+48, r25	; 0x30
    13bc:	8f a7       	std	Y+47, r24	; 0x2f
    13be:	0f c0       	rjmp	.+30     	; 0x13de <CLCD_voidSendData+0x132>
    13c0:	80 e9       	ldi	r24, 0x90	; 144
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	9e a7       	std	Y+46, r25	; 0x2e
    13c6:	8d a7       	std	Y+45, r24	; 0x2d
    13c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    13ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <CLCD_voidSendData+0x120>
    13d0:	9e a7       	std	Y+46, r25	; 0x2e
    13d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d6:	98 a9       	ldd	r25, Y+48	; 0x30
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	98 ab       	std	Y+48, r25	; 0x30
    13dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13de:	8f a5       	ldd	r24, Y+47	; 0x2f
    13e0:	98 a9       	ldd	r25, Y+48	; 0x30
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	69 f7       	brne	.-38     	; 0x13c0 <CLCD_voidSendData+0x114>
    13e6:	14 c0       	rjmp	.+40     	; 0x1410 <CLCD_voidSendData+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e8:	69 a9       	ldd	r22, Y+49	; 0x31
    13ea:	7a a9       	ldd	r23, Y+50	; 0x32
    13ec:	8b a9       	ldd	r24, Y+51	; 0x33
    13ee:	9c a9       	ldd	r25, Y+52	; 0x34
    13f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13f4:	dc 01       	movw	r26, r24
    13f6:	cb 01       	movw	r24, r22
    13f8:	98 ab       	std	Y+48, r25	; 0x30
    13fa:	8f a7       	std	Y+47, r24	; 0x2f
    13fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1400:	9c a7       	std	Y+44, r25	; 0x2c
    1402:	8b a7       	std	Y+43, r24	; 0x2b
    1404:	8b a5       	ldd	r24, Y+43	; 0x2b
    1406:	9c a5       	ldd	r25, Y+44	; 0x2c
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	f1 f7       	brne	.-4      	; 0x1408 <CLCD_voidSendData+0x15c>
    140c:	9c a7       	std	Y+44, r25	; 0x2c
    140e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	40 e0       	ldi	r20, 0x00	; 0
    1416:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	a0 e8       	ldi	r26, 0x80	; 128
    1420:	bf e3       	ldi	r27, 0x3F	; 63
    1422:	8f a3       	std	Y+39, r24	; 0x27
    1424:	98 a7       	std	Y+40, r25	; 0x28
    1426:	a9 a7       	std	Y+41, r26	; 0x29
    1428:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142a:	6f a1       	ldd	r22, Y+39	; 0x27
    142c:	78 a5       	ldd	r23, Y+40	; 0x28
    142e:	89 a5       	ldd	r24, Y+41	; 0x29
    1430:	9a a5       	ldd	r25, Y+42	; 0x2a
    1432:	20 e0       	ldi	r18, 0x00	; 0
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	4a e7       	ldi	r20, 0x7A	; 122
    1438:	55 e4       	ldi	r21, 0x45	; 69
    143a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    143e:	dc 01       	movw	r26, r24
    1440:	cb 01       	movw	r24, r22
    1442:	8b a3       	std	Y+35, r24	; 0x23
    1444:	9c a3       	std	Y+36, r25	; 0x24
    1446:	ad a3       	std	Y+37, r26	; 0x25
    1448:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    144a:	6b a1       	ldd	r22, Y+35	; 0x23
    144c:	7c a1       	ldd	r23, Y+36	; 0x24
    144e:	8d a1       	ldd	r24, Y+37	; 0x25
    1450:	9e a1       	ldd	r25, Y+38	; 0x26
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	30 e0       	ldi	r19, 0x00	; 0
    1456:	40 e8       	ldi	r20, 0x80	; 128
    1458:	5f e3       	ldi	r21, 0x3F	; 63
    145a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    145e:	88 23       	and	r24, r24
    1460:	2c f4       	brge	.+10     	; 0x146c <CLCD_voidSendData+0x1c0>
		__ticks = 1;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9a a3       	std	Y+34, r25	; 0x22
    1468:	89 a3       	std	Y+33, r24	; 0x21
    146a:	3f c0       	rjmp	.+126    	; 0x14ea <CLCD_voidSendData+0x23e>
	else if (__tmp > 65535)
    146c:	6b a1       	ldd	r22, Y+35	; 0x23
    146e:	7c a1       	ldd	r23, Y+36	; 0x24
    1470:	8d a1       	ldd	r24, Y+37	; 0x25
    1472:	9e a1       	ldd	r25, Y+38	; 0x26
    1474:	20 e0       	ldi	r18, 0x00	; 0
    1476:	3f ef       	ldi	r19, 0xFF	; 255
    1478:	4f e7       	ldi	r20, 0x7F	; 127
    147a:	57 e4       	ldi	r21, 0x47	; 71
    147c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1480:	18 16       	cp	r1, r24
    1482:	4c f5       	brge	.+82     	; 0x14d6 <CLCD_voidSendData+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1484:	6f a1       	ldd	r22, Y+39	; 0x27
    1486:	78 a5       	ldd	r23, Y+40	; 0x28
    1488:	89 a5       	ldd	r24, Y+41	; 0x29
    148a:	9a a5       	ldd	r25, Y+42	; 0x2a
    148c:	20 e0       	ldi	r18, 0x00	; 0
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e2       	ldi	r20, 0x20	; 32
    1492:	51 e4       	ldi	r21, 0x41	; 65
    1494:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1498:	dc 01       	movw	r26, r24
    149a:	cb 01       	movw	r24, r22
    149c:	bc 01       	movw	r22, r24
    149e:	cd 01       	movw	r24, r26
    14a0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14a4:	dc 01       	movw	r26, r24
    14a6:	cb 01       	movw	r24, r22
    14a8:	9a a3       	std	Y+34, r25	; 0x22
    14aa:	89 a3       	std	Y+33, r24	; 0x21
    14ac:	0f c0       	rjmp	.+30     	; 0x14cc <CLCD_voidSendData+0x220>
    14ae:	80 e9       	ldi	r24, 0x90	; 144
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	98 a3       	std	Y+32, r25	; 0x20
    14b4:	8f 8f       	std	Y+31, r24	; 0x1f
    14b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14b8:	98 a1       	ldd	r25, Y+32	; 0x20
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <CLCD_voidSendData+0x20e>
    14be:	98 a3       	std	Y+32, r25	; 0x20
    14c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c2:	89 a1       	ldd	r24, Y+33	; 0x21
    14c4:	9a a1       	ldd	r25, Y+34	; 0x22
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	9a a3       	std	Y+34, r25	; 0x22
    14ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14cc:	89 a1       	ldd	r24, Y+33	; 0x21
    14ce:	9a a1       	ldd	r25, Y+34	; 0x22
    14d0:	00 97       	sbiw	r24, 0x00	; 0
    14d2:	69 f7       	brne	.-38     	; 0x14ae <CLCD_voidSendData+0x202>
    14d4:	14 c0       	rjmp	.+40     	; 0x14fe <CLCD_voidSendData+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d6:	6b a1       	ldd	r22, Y+35	; 0x23
    14d8:	7c a1       	ldd	r23, Y+36	; 0x24
    14da:	8d a1       	ldd	r24, Y+37	; 0x25
    14dc:	9e a1       	ldd	r25, Y+38	; 0x26
    14de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14e2:	dc 01       	movw	r26, r24
    14e4:	cb 01       	movw	r24, r22
    14e6:	9a a3       	std	Y+34, r25	; 0x22
    14e8:	89 a3       	std	Y+33, r24	; 0x21
    14ea:	89 a1       	ldd	r24, Y+33	; 0x21
    14ec:	9a a1       	ldd	r25, Y+34	; 0x22
    14ee:	9e 8f       	std	Y+30, r25	; 0x1e
    14f0:	8d 8f       	std	Y+29, r24	; 0x1d
    14f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	f1 f7       	brne	.-4      	; 0x14f6 <CLCD_voidSendData+0x24a>
    14fa:	9e 8f       	std	Y+30, r25	; 0x1e
    14fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN0,(GET_BIT(CLCD_u8Data,0)));
    14fe:	89 ad       	ldd	r24, Y+57	; 0x39
    1500:	98 2f       	mov	r25, r24
    1502:	91 70       	andi	r25, 0x01	; 1
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	60 e0       	ldi	r22, 0x00	; 0
    1508:	49 2f       	mov	r20, r25
    150a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN1,(GET_BIT(CLCD_u8Data,1)));
    150e:	89 ad       	ldd	r24, Y+57	; 0x39
    1510:	86 95       	lsr	r24
    1512:	98 2f       	mov	r25, r24
    1514:	91 70       	andi	r25, 0x01	; 1
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	49 2f       	mov	r20, r25
    151c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN2,(GET_BIT(CLCD_u8Data,2)));
    1520:	89 ad       	ldd	r24, Y+57	; 0x39
    1522:	86 95       	lsr	r24
    1524:	86 95       	lsr	r24
    1526:	98 2f       	mov	r25, r24
    1528:	91 70       	andi	r25, 0x01	; 1
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	49 2f       	mov	r20, r25
    1530:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CLCD_PORT,DIO_PIN4,(GET_BIT(CLCD_u8Data,3)));
    1534:	89 ad       	ldd	r24, Y+57	; 0x39
    1536:	86 95       	lsr	r24
    1538:	86 95       	lsr	r24
    153a:	86 95       	lsr	r24
    153c:	98 2f       	mov	r25, r24
    153e:	91 70       	andi	r25, 0x01	; 1
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	64 e0       	ldi	r22, 0x04	; 4
    1544:	49 2f       	mov	r20, r25
    1546:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
	//Enable pulse
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_HIGH);
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	62 e0       	ldi	r22, 0x02	; 2
    154e:	41 e0       	ldi	r20, 0x01	; 1
    1550:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	a0 e8       	ldi	r26, 0x80	; 128
    155a:	bf e3       	ldi	r27, 0x3F	; 63
    155c:	89 8f       	std	Y+25, r24	; 0x19
    155e:	9a 8f       	std	Y+26, r25	; 0x1a
    1560:	ab 8f       	std	Y+27, r26	; 0x1b
    1562:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1564:	69 8d       	ldd	r22, Y+25	; 0x19
    1566:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1568:	8b 8d       	ldd	r24, Y+27	; 0x1b
    156a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	4a e7       	ldi	r20, 0x7A	; 122
    1572:	55 e4       	ldi	r21, 0x45	; 69
    1574:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1578:	dc 01       	movw	r26, r24
    157a:	cb 01       	movw	r24, r22
    157c:	8d 8b       	std	Y+21, r24	; 0x15
    157e:	9e 8b       	std	Y+22, r25	; 0x16
    1580:	af 8b       	std	Y+23, r26	; 0x17
    1582:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1584:	6d 89       	ldd	r22, Y+21	; 0x15
    1586:	7e 89       	ldd	r23, Y+22	; 0x16
    1588:	8f 89       	ldd	r24, Y+23	; 0x17
    158a:	98 8d       	ldd	r25, Y+24	; 0x18
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	40 e8       	ldi	r20, 0x80	; 128
    1592:	5f e3       	ldi	r21, 0x3F	; 63
    1594:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1598:	88 23       	and	r24, r24
    159a:	2c f4       	brge	.+10     	; 0x15a6 <CLCD_voidSendData+0x2fa>
		__ticks = 1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9c 8b       	std	Y+20, r25	; 0x14
    15a2:	8b 8b       	std	Y+19, r24	; 0x13
    15a4:	3f c0       	rjmp	.+126    	; 0x1624 <CLCD_voidSendData+0x378>
	else if (__tmp > 65535)
    15a6:	6d 89       	ldd	r22, Y+21	; 0x15
    15a8:	7e 89       	ldd	r23, Y+22	; 0x16
    15aa:	8f 89       	ldd	r24, Y+23	; 0x17
    15ac:	98 8d       	ldd	r25, Y+24	; 0x18
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	3f ef       	ldi	r19, 0xFF	; 255
    15b2:	4f e7       	ldi	r20, 0x7F	; 127
    15b4:	57 e4       	ldi	r21, 0x47	; 71
    15b6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    15ba:	18 16       	cp	r1, r24
    15bc:	4c f5       	brge	.+82     	; 0x1610 <CLCD_voidSendData+0x364>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15be:	69 8d       	ldd	r22, Y+25	; 0x19
    15c0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    15c2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    15c4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    15c6:	20 e0       	ldi	r18, 0x00	; 0
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	40 e2       	ldi	r20, 0x20	; 32
    15cc:	51 e4       	ldi	r21, 0x41	; 65
    15ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15d2:	dc 01       	movw	r26, r24
    15d4:	cb 01       	movw	r24, r22
    15d6:	bc 01       	movw	r22, r24
    15d8:	cd 01       	movw	r24, r26
    15da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	9c 8b       	std	Y+20, r25	; 0x14
    15e4:	8b 8b       	std	Y+19, r24	; 0x13
    15e6:	0f c0       	rjmp	.+30     	; 0x1606 <CLCD_voidSendData+0x35a>
    15e8:	80 e9       	ldi	r24, 0x90	; 144
    15ea:	91 e0       	ldi	r25, 0x01	; 1
    15ec:	9a 8b       	std	Y+18, r25	; 0x12
    15ee:	89 8b       	std	Y+17, r24	; 0x11
    15f0:	89 89       	ldd	r24, Y+17	; 0x11
    15f2:	9a 89       	ldd	r25, Y+18	; 0x12
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <CLCD_voidSendData+0x348>
    15f8:	9a 8b       	std	Y+18, r25	; 0x12
    15fa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fc:	8b 89       	ldd	r24, Y+19	; 0x13
    15fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1600:	01 97       	sbiw	r24, 0x01	; 1
    1602:	9c 8b       	std	Y+20, r25	; 0x14
    1604:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1606:	8b 89       	ldd	r24, Y+19	; 0x13
    1608:	9c 89       	ldd	r25, Y+20	; 0x14
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	69 f7       	brne	.-38     	; 0x15e8 <CLCD_voidSendData+0x33c>
    160e:	14 c0       	rjmp	.+40     	; 0x1638 <CLCD_voidSendData+0x38c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1610:	6d 89       	ldd	r22, Y+21	; 0x15
    1612:	7e 89       	ldd	r23, Y+22	; 0x16
    1614:	8f 89       	ldd	r24, Y+23	; 0x17
    1616:	98 8d       	ldd	r25, Y+24	; 0x18
    1618:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    161c:	dc 01       	movw	r26, r24
    161e:	cb 01       	movw	r24, r22
    1620:	9c 8b       	std	Y+20, r25	; 0x14
    1622:	8b 8b       	std	Y+19, r24	; 0x13
    1624:	8b 89       	ldd	r24, Y+19	; 0x13
    1626:	9c 89       	ldd	r25, Y+20	; 0x14
    1628:	98 8b       	std	Y+16, r25	; 0x10
    162a:	8f 87       	std	Y+15, r24	; 0x0f
    162c:	8f 85       	ldd	r24, Y+15	; 0x0f
    162e:	98 89       	ldd	r25, Y+16	; 0x10
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <CLCD_voidSendData+0x384>
    1634:	98 8b       	std	Y+16, r25	; 0x10
    1636:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	62 e0       	ldi	r22, 0x02	; 2
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	a0 e8       	ldi	r26, 0x80	; 128
    1648:	bf e3       	ldi	r27, 0x3F	; 63
    164a:	8b 87       	std	Y+11, r24	; 0x0b
    164c:	9c 87       	std	Y+12, r25	; 0x0c
    164e:	ad 87       	std	Y+13, r26	; 0x0d
    1650:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1652:	6b 85       	ldd	r22, Y+11	; 0x0b
    1654:	7c 85       	ldd	r23, Y+12	; 0x0c
    1656:	8d 85       	ldd	r24, Y+13	; 0x0d
    1658:	9e 85       	ldd	r25, Y+14	; 0x0e
    165a:	20 e0       	ldi	r18, 0x00	; 0
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	4a e7       	ldi	r20, 0x7A	; 122
    1660:	55 e4       	ldi	r21, 0x45	; 69
    1662:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	8f 83       	std	Y+7, r24	; 0x07
    166c:	98 87       	std	Y+8, r25	; 0x08
    166e:	a9 87       	std	Y+9, r26	; 0x09
    1670:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1672:	6f 81       	ldd	r22, Y+7	; 0x07
    1674:	78 85       	ldd	r23, Y+8	; 0x08
    1676:	89 85       	ldd	r24, Y+9	; 0x09
    1678:	9a 85       	ldd	r25, Y+10	; 0x0a
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e8       	ldi	r20, 0x80	; 128
    1680:	5f e3       	ldi	r21, 0x3F	; 63
    1682:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1686:	88 23       	and	r24, r24
    1688:	2c f4       	brge	.+10     	; 0x1694 <CLCD_voidSendData+0x3e8>
		__ticks = 1;
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9e 83       	std	Y+6, r25	; 0x06
    1690:	8d 83       	std	Y+5, r24	; 0x05
    1692:	3f c0       	rjmp	.+126    	; 0x1712 <CLCD_voidSendData+0x466>
	else if (__tmp > 65535)
    1694:	6f 81       	ldd	r22, Y+7	; 0x07
    1696:	78 85       	ldd	r23, Y+8	; 0x08
    1698:	89 85       	ldd	r24, Y+9	; 0x09
    169a:	9a 85       	ldd	r25, Y+10	; 0x0a
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	57 e4       	ldi	r21, 0x47	; 71
    16a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	4c f5       	brge	.+82     	; 0x16fe <CLCD_voidSendData+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e2       	ldi	r20, 0x20	; 32
    16ba:	51 e4       	ldi	r21, 0x41	; 65
    16bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	bc 01       	movw	r22, r24
    16c6:	cd 01       	movw	r24, r26
    16c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	0f c0       	rjmp	.+30     	; 0x16f4 <CLCD_voidSendData+0x448>
    16d6:	80 e9       	ldi	r24, 0x90	; 144
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	01 97       	sbiw	r24, 0x01	; 1
    16e4:	f1 f7       	brne	.-4      	; 0x16e2 <CLCD_voidSendData+0x436>
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ea:	8d 81       	ldd	r24, Y+5	; 0x05
    16ec:	9e 81       	ldd	r25, Y+6	; 0x06
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	9e 83       	std	Y+6, r25	; 0x06
    16f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16f4:	8d 81       	ldd	r24, Y+5	; 0x05
    16f6:	9e 81       	ldd	r25, Y+6	; 0x06
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	69 f7       	brne	.-38     	; 0x16d6 <CLCD_voidSendData+0x42a>
    16fc:	14 c0       	rjmp	.+40     	; 0x1726 <CLCD_voidSendData+0x47a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1700:	78 85       	ldd	r23, Y+8	; 0x08
    1702:	89 85       	ldd	r24, Y+9	; 0x09
    1704:	9a 85       	ldd	r25, Y+10	; 0x0a
    1706:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9e 83       	std	Y+6, r25	; 0x06
    1710:	8d 83       	std	Y+5, r24	; 0x05
    1712:	8d 81       	ldd	r24, Y+5	; 0x05
    1714:	9e 81       	ldd	r25, Y+6	; 0x06
    1716:	9a 83       	std	Y+2, r25	; 0x02
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	89 81       	ldd	r24, Y+1	; 0x01
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <CLCD_voidSendData+0x472>
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_LOW);
	_delay_ms(1);

#endif
}
    1726:	e9 96       	adiw	r28, 0x39	; 57
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <CLCD_voidInit>:

void CLCD_voidInit(void)
{
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	df 93       	push	r29
    173e:	cf 93       	push	r28
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	c4 5c       	subi	r28, 0xC4	; 196
    1746:	d0 40       	sbci	r29, 0x00	; 0
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPortDirection(CLCD_PORT, DIO_PORT_OUTPUT);
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	6f ef       	ldi	r22, 0xFF	; 255
    1756:	0e 94 c9 19 	call	0x3392	; 0x3392 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_EN, DIO_PIN_OUTPUT);
    175a:	80 e0       	ldi	r24, 0x00	; 0
    175c:	62 e0       	ldi	r22, 0x02	; 2
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_RS, DIO_PIN_OUTPUT);
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	63 e0       	ldi	r22, 0x03	; 3
    1768:	41 e0       	ldi	r20, 0x01	; 1
    176a:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <DIO_voidSetPinDirection>
    176e:	fe 01       	movw	r30, r28
    1770:	ef 53       	subi	r30, 0x3F	; 63
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	a0 ef       	ldi	r26, 0xF0	; 240
    177a:	b1 e4       	ldi	r27, 0x41	; 65
    177c:	80 83       	st	Z, r24
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	a2 83       	std	Z+2, r26	; 0x02
    1782:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	8e 01       	movw	r16, r28
    1786:	03 54       	subi	r16, 0x43	; 67
    1788:	1f 4f       	sbci	r17, 0xFF	; 255
    178a:	fe 01       	movw	r30, r28
    178c:	ef 53       	subi	r30, 0x3F	; 63
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	60 81       	ld	r22, Z
    1792:	71 81       	ldd	r23, Z+1	; 0x01
    1794:	82 81       	ldd	r24, Z+2	; 0x02
    1796:	93 81       	ldd	r25, Z+3	; 0x03
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	4a e7       	ldi	r20, 0x7A	; 122
    179e:	55 e4       	ldi	r21, 0x45	; 69
    17a0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	f8 01       	movw	r30, r16
    17aa:	80 83       	st	Z, r24
    17ac:	91 83       	std	Z+1, r25	; 0x01
    17ae:	a2 83       	std	Z+2, r26	; 0x02
    17b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17b2:	fe 01       	movw	r30, r28
    17b4:	e3 54       	subi	r30, 0x43	; 67
    17b6:	ff 4f       	sbci	r31, 0xFF	; 255
    17b8:	60 81       	ld	r22, Z
    17ba:	71 81       	ldd	r23, Z+1	; 0x01
    17bc:	82 81       	ldd	r24, Z+2	; 0x02
    17be:	93 81       	ldd	r25, Z+3	; 0x03
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e8       	ldi	r20, 0x80	; 128
    17c6:	5f e3       	ldi	r21, 0x3F	; 63
    17c8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17cc:	88 23       	and	r24, r24
    17ce:	44 f4       	brge	.+16     	; 0x17e0 <CLCD_voidInit+0xa8>
		__ticks = 1;
    17d0:	fe 01       	movw	r30, r28
    17d2:	e5 54       	subi	r30, 0x45	; 69
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	91 83       	std	Z+1, r25	; 0x01
    17dc:	80 83       	st	Z, r24
    17de:	64 c0       	rjmp	.+200    	; 0x18a8 <CLCD_voidInit+0x170>
	else if (__tmp > 65535)
    17e0:	fe 01       	movw	r30, r28
    17e2:	e3 54       	subi	r30, 0x43	; 67
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	60 81       	ld	r22, Z
    17e8:	71 81       	ldd	r23, Z+1	; 0x01
    17ea:	82 81       	ldd	r24, Z+2	; 0x02
    17ec:	93 81       	ldd	r25, Z+3	; 0x03
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	0c f0       	brlt	.+2      	; 0x1800 <CLCD_voidInit+0xc8>
    17fe:	43 c0       	rjmp	.+134    	; 0x1886 <CLCD_voidInit+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1800:	fe 01       	movw	r30, r28
    1802:	ef 53       	subi	r30, 0x3F	; 63
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	8e 01       	movw	r16, r28
    1820:	05 54       	subi	r16, 0x45	; 69
    1822:	1f 4f       	sbci	r17, 0xFF	; 255
    1824:	bc 01       	movw	r22, r24
    1826:	cd 01       	movw	r24, r26
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	f8 01       	movw	r30, r16
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
    1836:	1f c0       	rjmp	.+62     	; 0x1876 <CLCD_voidInit+0x13e>
    1838:	fe 01       	movw	r30, r28
    183a:	e7 54       	subi	r30, 0x47	; 71
    183c:	ff 4f       	sbci	r31, 0xFF	; 255
    183e:	80 e9       	ldi	r24, 0x90	; 144
    1840:	91 e0       	ldi	r25, 0x01	; 1
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
    1846:	fe 01       	movw	r30, r28
    1848:	e7 54       	subi	r30, 0x47	; 71
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	80 81       	ld	r24, Z
    184e:	91 81       	ldd	r25, Z+1	; 0x01
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <CLCD_voidInit+0x118>
    1854:	fe 01       	movw	r30, r28
    1856:	e7 54       	subi	r30, 0x47	; 71
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	91 83       	std	Z+1, r25	; 0x01
    185c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    185e:	de 01       	movw	r26, r28
    1860:	a5 54       	subi	r26, 0x45	; 69
    1862:	bf 4f       	sbci	r27, 0xFF	; 255
    1864:	fe 01       	movw	r30, r28
    1866:	e5 54       	subi	r30, 0x45	; 69
    1868:	ff 4f       	sbci	r31, 0xFF	; 255
    186a:	80 81       	ld	r24, Z
    186c:	91 81       	ldd	r25, Z+1	; 0x01
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	11 96       	adiw	r26, 0x01	; 1
    1872:	9c 93       	st	X, r25
    1874:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1876:	fe 01       	movw	r30, r28
    1878:	e5 54       	subi	r30, 0x45	; 69
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	00 97       	sbiw	r24, 0x00	; 0
    1882:	d1 f6       	brne	.-76     	; 0x1838 <CLCD_voidInit+0x100>
    1884:	27 c0       	rjmp	.+78     	; 0x18d4 <CLCD_voidInit+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1886:	8e 01       	movw	r16, r28
    1888:	05 54       	subi	r16, 0x45	; 69
    188a:	1f 4f       	sbci	r17, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	e3 54       	subi	r30, 0x43	; 67
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	60 81       	ld	r22, Z
    1894:	71 81       	ldd	r23, Z+1	; 0x01
    1896:	82 81       	ldd	r24, Z+2	; 0x02
    1898:	93 81       	ldd	r25, Z+3	; 0x03
    189a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	f8 01       	movw	r30, r16
    18a4:	91 83       	std	Z+1, r25	; 0x01
    18a6:	80 83       	st	Z, r24
    18a8:	de 01       	movw	r26, r28
    18aa:	a9 54       	subi	r26, 0x49	; 73
    18ac:	bf 4f       	sbci	r27, 0xFF	; 255
    18ae:	fe 01       	movw	r30, r28
    18b0:	e5 54       	subi	r30, 0x45	; 69
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	91 81       	ldd	r25, Z+1	; 0x01
    18b8:	8d 93       	st	X+, r24
    18ba:	9c 93       	st	X, r25
    18bc:	fe 01       	movw	r30, r28
    18be:	e9 54       	subi	r30, 0x49	; 73
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	80 81       	ld	r24, Z
    18c4:	91 81       	ldd	r25, Z+1	; 0x01
    18c6:	01 97       	sbiw	r24, 0x01	; 1
    18c8:	f1 f7       	brne	.-4      	; 0x18c6 <CLCD_voidInit+0x18e>
    18ca:	fe 01       	movw	r30, r28
    18cc:	e9 54       	subi	r30, 0x49	; 73
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	91 83       	std	Z+1, r25	; 0x01
    18d2:	80 83       	st	Z, r24
	//DIO_voidSetPinDirection(CLCD_CONTROL_PORT, CLCD_RW, DIO_PIN_OUTPUT);
	_delay_ms(30);
	CLCD_voidSendCommand(0x38);
    18d4:	88 e3       	ldi	r24, 0x38	; 56
    18d6:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    18da:	fe 01       	movw	r30, r28
    18dc:	ed 54       	subi	r30, 0x4D	; 77
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 ea       	ldi	r26, 0xA0	; 160
    18e6:	b0 e4       	ldi	r27, 0x40	; 64
    18e8:	80 83       	st	Z, r24
    18ea:	91 83       	std	Z+1, r25	; 0x01
    18ec:	a2 83       	std	Z+2, r26	; 0x02
    18ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f0:	8e 01       	movw	r16, r28
    18f2:	01 55       	subi	r16, 0x51	; 81
    18f4:	1f 4f       	sbci	r17, 0xFF	; 255
    18f6:	fe 01       	movw	r30, r28
    18f8:	ed 54       	subi	r30, 0x4D	; 77
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	4a e7       	ldi	r20, 0x7A	; 122
    190a:	55 e4       	ldi	r21, 0x45	; 69
    190c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	f8 01       	movw	r30, r16
    1916:	80 83       	st	Z, r24
    1918:	91 83       	std	Z+1, r25	; 0x01
    191a:	a2 83       	std	Z+2, r26	; 0x02
    191c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    191e:	fe 01       	movw	r30, r28
    1920:	e1 55       	subi	r30, 0x51	; 81
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e8       	ldi	r20, 0x80	; 128
    1932:	5f e3       	ldi	r21, 0x3F	; 63
    1934:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1938:	88 23       	and	r24, r24
    193a:	44 f4       	brge	.+16     	; 0x194c <CLCD_voidInit+0x214>
		__ticks = 1;
    193c:	fe 01       	movw	r30, r28
    193e:	e3 55       	subi	r30, 0x53	; 83
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	64 c0       	rjmp	.+200    	; 0x1a14 <CLCD_voidInit+0x2dc>
	else if (__tmp > 65535)
    194c:	fe 01       	movw	r30, r28
    194e:	e1 55       	subi	r30, 0x51	; 81
    1950:	ff 4f       	sbci	r31, 0xFF	; 255
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	3f ef       	ldi	r19, 0xFF	; 255
    195e:	4f e7       	ldi	r20, 0x7F	; 127
    1960:	57 e4       	ldi	r21, 0x47	; 71
    1962:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1966:	18 16       	cp	r1, r24
    1968:	0c f0       	brlt	.+2      	; 0x196c <CLCD_voidInit+0x234>
    196a:	43 c0       	rjmp	.+134    	; 0x19f2 <CLCD_voidInit+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    196c:	fe 01       	movw	r30, r28
    196e:	ed 54       	subi	r30, 0x4D	; 77
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e2       	ldi	r20, 0x20	; 32
    1980:	51 e4       	ldi	r21, 0x41	; 65
    1982:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1986:	dc 01       	movw	r26, r24
    1988:	cb 01       	movw	r24, r22
    198a:	8e 01       	movw	r16, r28
    198c:	03 55       	subi	r16, 0x53	; 83
    198e:	1f 4f       	sbci	r17, 0xFF	; 255
    1990:	bc 01       	movw	r22, r24
    1992:	cd 01       	movw	r24, r26
    1994:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	f8 01       	movw	r30, r16
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	1f c0       	rjmp	.+62     	; 0x19e2 <CLCD_voidInit+0x2aa>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e5 55       	subi	r30, 0x55	; 85
    19a8:	ff 4f       	sbci	r31, 0xFF	; 255
    19aa:	80 e9       	ldi	r24, 0x90	; 144
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    19b2:	fe 01       	movw	r30, r28
    19b4:	e5 55       	subi	r30, 0x55	; 85
    19b6:	ff 4f       	sbci	r31, 0xFF	; 255
    19b8:	80 81       	ld	r24, Z
    19ba:	91 81       	ldd	r25, Z+1	; 0x01
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <CLCD_voidInit+0x284>
    19c0:	fe 01       	movw	r30, r28
    19c2:	e5 55       	subi	r30, 0x55	; 85
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	91 83       	std	Z+1, r25	; 0x01
    19c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ca:	de 01       	movw	r26, r28
    19cc:	a3 55       	subi	r26, 0x53	; 83
    19ce:	bf 4f       	sbci	r27, 0xFF	; 255
    19d0:	fe 01       	movw	r30, r28
    19d2:	e3 55       	subi	r30, 0x53	; 83
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	80 81       	ld	r24, Z
    19d8:	91 81       	ldd	r25, Z+1	; 0x01
    19da:	01 97       	sbiw	r24, 0x01	; 1
    19dc:	11 96       	adiw	r26, 0x01	; 1
    19de:	9c 93       	st	X, r25
    19e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19e2:	fe 01       	movw	r30, r28
    19e4:	e3 55       	subi	r30, 0x53	; 83
    19e6:	ff 4f       	sbci	r31, 0xFF	; 255
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	d1 f6       	brne	.-76     	; 0x19a4 <CLCD_voidInit+0x26c>
    19f0:	27 c0       	rjmp	.+78     	; 0x1a40 <CLCD_voidInit+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f2:	8e 01       	movw	r16, r28
    19f4:	03 55       	subi	r16, 0x53	; 83
    19f6:	1f 4f       	sbci	r17, 0xFF	; 255
    19f8:	fe 01       	movw	r30, r28
    19fa:	e1 55       	subi	r30, 0x51	; 81
    19fc:	ff 4f       	sbci	r31, 0xFF	; 255
    19fe:	60 81       	ld	r22, Z
    1a00:	71 81       	ldd	r23, Z+1	; 0x01
    1a02:	82 81       	ldd	r24, Z+2	; 0x02
    1a04:	93 81       	ldd	r25, Z+3	; 0x03
    1a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	f8 01       	movw	r30, r16
    1a10:	91 83       	std	Z+1, r25	; 0x01
    1a12:	80 83       	st	Z, r24
    1a14:	de 01       	movw	r26, r28
    1a16:	a7 55       	subi	r26, 0x57	; 87
    1a18:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	e3 55       	subi	r30, 0x53	; 83
    1a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	8d 93       	st	X+, r24
    1a26:	9c 93       	st	X, r25
    1a28:	fe 01       	movw	r30, r28
    1a2a:	e7 55       	subi	r30, 0x57	; 87
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <CLCD_voidInit+0x2fa>
    1a36:	fe 01       	movw	r30, r28
    1a38:	e7 55       	subi	r30, 0x57	; 87
    1a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3c:	91 83       	std	Z+1, r25	; 0x01
    1a3e:	80 83       	st	Z, r24
	_delay_ms(5);
	CLCD_voidSendCommand(0x38);
    1a40:	88 e3       	ldi	r24, 0x38	; 56
    1a42:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    1a46:	fe 01       	movw	r30, r28
    1a48:	eb 55       	subi	r30, 0x5B	; 91
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	a6 e1       	ldi	r26, 0x16	; 22
    1a52:	b3 e4       	ldi	r27, 0x43	; 67
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a5c:	8e 01       	movw	r16, r28
    1a5e:	0f 55       	subi	r16, 0x5F	; 95
    1a60:	1f 4f       	sbci	r17, 0xFF	; 255
    1a62:	fe 01       	movw	r30, r28
    1a64:	eb 55       	subi	r30, 0x5B	; 91
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	60 81       	ld	r22, Z
    1a6a:	71 81       	ldd	r23, Z+1	; 0x01
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	2b ea       	ldi	r18, 0xAB	; 171
    1a72:	3a ea       	ldi	r19, 0xAA	; 170
    1a74:	4a ea       	ldi	r20, 0xAA	; 170
    1a76:	50 e4       	ldi	r21, 0x40	; 64
    1a78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	f8 01       	movw	r30, r16
    1a82:	80 83       	st	Z, r24
    1a84:	91 83       	std	Z+1, r25	; 0x01
    1a86:	a2 83       	std	Z+2, r26	; 0x02
    1a88:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ef 55       	subi	r30, 0x5F	; 95
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	60 81       	ld	r22, Z
    1a92:	71 81       	ldd	r23, Z+1	; 0x01
    1a94:	82 81       	ldd	r24, Z+2	; 0x02
    1a96:	93 81       	ldd	r25, Z+3	; 0x03
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	40 e8       	ldi	r20, 0x80	; 128
    1a9e:	5f e3       	ldi	r21, 0x3F	; 63
    1aa0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1aa4:	88 23       	and	r24, r24
    1aa6:	34 f4       	brge	.+12     	; 0x1ab4 <CLCD_voidInit+0x37c>
		__ticks = 1;
    1aa8:	fe 01       	movw	r30, r28
    1aaa:	e0 56       	subi	r30, 0x60	; 96
    1aac:	ff 4f       	sbci	r31, 0xFF	; 255
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	80 83       	st	Z, r24
    1ab2:	e0 c0       	rjmp	.+448    	; 0x1c74 <CLCD_voidInit+0x53c>
	else if (__tmp > 255)
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 55       	subi	r30, 0x5F	; 95
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	53 e4       	ldi	r21, 0x43	; 67
    1aca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	0c f0       	brlt	.+2      	; 0x1ad4 <CLCD_voidInit+0x39c>
    1ad2:	c0 c0       	rjmp	.+384    	; 0x1c54 <CLCD_voidInit+0x51c>
	{
		_delay_ms(__us / 1000.0);
    1ad4:	fe 01       	movw	r30, r28
    1ad6:	eb 55       	subi	r30, 0x5B	; 91
    1ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    1ada:	60 81       	ld	r22, Z
    1adc:	71 81       	ldd	r23, Z+1	; 0x01
    1ade:	82 81       	ldd	r24, Z+2	; 0x02
    1ae0:	93 81       	ldd	r25, Z+3	; 0x03
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	4a e7       	ldi	r20, 0x7A	; 122
    1ae8:	54 e4       	ldi	r21, 0x44	; 68
    1aea:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1aee:	dc 01       	movw	r26, r24
    1af0:	cb 01       	movw	r24, r22
    1af2:	fe 01       	movw	r30, r28
    1af4:	e4 56       	subi	r30, 0x64	; 100
    1af6:	ff 4f       	sbci	r31, 0xFF	; 255
    1af8:	80 83       	st	Z, r24
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	a2 83       	std	Z+2, r26	; 0x02
    1afe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	8e 01       	movw	r16, r28
    1b02:	08 56       	subi	r16, 0x68	; 104
    1b04:	1f 4f       	sbci	r17, 0xFF	; 255
    1b06:	fe 01       	movw	r30, r28
    1b08:	e4 56       	subi	r30, 0x64	; 100
    1b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0c:	60 81       	ld	r22, Z
    1b0e:	71 81       	ldd	r23, Z+1	; 0x01
    1b10:	82 81       	ldd	r24, Z+2	; 0x02
    1b12:	93 81       	ldd	r25, Z+3	; 0x03
    1b14:	20 e0       	ldi	r18, 0x00	; 0
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	4a e7       	ldi	r20, 0x7A	; 122
    1b1a:	55 e4       	ldi	r21, 0x45	; 69
    1b1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	f8 01       	movw	r30, r16
    1b26:	80 83       	st	Z, r24
    1b28:	91 83       	std	Z+1, r25	; 0x01
    1b2a:	a2 83       	std	Z+2, r26	; 0x02
    1b2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	e8 56       	subi	r30, 0x68	; 104
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	60 81       	ld	r22, Z
    1b36:	71 81       	ldd	r23, Z+1	; 0x01
    1b38:	82 81       	ldd	r24, Z+2	; 0x02
    1b3a:	93 81       	ldd	r25, Z+3	; 0x03
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	44 f4       	brge	.+16     	; 0x1b5c <CLCD_voidInit+0x424>
		__ticks = 1;
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	ea 56       	subi	r30, 0x6A	; 106
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	81 e0       	ldi	r24, 0x01	; 1
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	91 83       	std	Z+1, r25	; 0x01
    1b58:	80 83       	st	Z, r24
    1b5a:	64 c0       	rjmp	.+200    	; 0x1c24 <CLCD_voidInit+0x4ec>
	else if (__tmp > 65535)
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e8 56       	subi	r30, 0x68	; 104
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	20 e0       	ldi	r18, 0x00	; 0
    1b6c:	3f ef       	ldi	r19, 0xFF	; 255
    1b6e:	4f e7       	ldi	r20, 0x7F	; 127
    1b70:	57 e4       	ldi	r21, 0x47	; 71
    1b72:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b76:	18 16       	cp	r1, r24
    1b78:	0c f0       	brlt	.+2      	; 0x1b7c <CLCD_voidInit+0x444>
    1b7a:	43 c0       	rjmp	.+134    	; 0x1c02 <CLCD_voidInit+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7c:	fe 01       	movw	r30, r28
    1b7e:	e4 56       	subi	r30, 0x64	; 100
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	60 81       	ld	r22, Z
    1b84:	71 81       	ldd	r23, Z+1	; 0x01
    1b86:	82 81       	ldd	r24, Z+2	; 0x02
    1b88:	93 81       	ldd	r25, Z+3	; 0x03
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	8e 01       	movw	r16, r28
    1b9c:	0a 56       	subi	r16, 0x6A	; 106
    1b9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba0:	bc 01       	movw	r22, r24
    1ba2:	cd 01       	movw	r24, r26
    1ba4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	f8 01       	movw	r30, r16
    1bae:	91 83       	std	Z+1, r25	; 0x01
    1bb0:	80 83       	st	Z, r24
    1bb2:	1f c0       	rjmp	.+62     	; 0x1bf2 <CLCD_voidInit+0x4ba>
    1bb4:	fe 01       	movw	r30, r28
    1bb6:	ec 56       	subi	r30, 0x6C	; 108
    1bb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bba:	80 e9       	ldi	r24, 0x90	; 144
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	91 83       	std	Z+1, r25	; 0x01
    1bc0:	80 83       	st	Z, r24
    1bc2:	fe 01       	movw	r30, r28
    1bc4:	ec 56       	subi	r30, 0x6C	; 108
    1bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc8:	80 81       	ld	r24, Z
    1bca:	91 81       	ldd	r25, Z+1	; 0x01
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <CLCD_voidInit+0x494>
    1bd0:	fe 01       	movw	r30, r28
    1bd2:	ec 56       	subi	r30, 0x6C	; 108
    1bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd6:	91 83       	std	Z+1, r25	; 0x01
    1bd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bda:	de 01       	movw	r26, r28
    1bdc:	aa 56       	subi	r26, 0x6A	; 106
    1bde:	bf 4f       	sbci	r27, 0xFF	; 255
    1be0:	fe 01       	movw	r30, r28
    1be2:	ea 56       	subi	r30, 0x6A	; 106
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	80 81       	ld	r24, Z
    1be8:	91 81       	ldd	r25, Z+1	; 0x01
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	11 96       	adiw	r26, 0x01	; 1
    1bee:	9c 93       	st	X, r25
    1bf0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	ea 56       	subi	r30, 0x6A	; 106
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	d1 f6       	brne	.-76     	; 0x1bb4 <CLCD_voidInit+0x47c>
    1c00:	4b c0       	rjmp	.+150    	; 0x1c98 <CLCD_voidInit+0x560>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c02:	8e 01       	movw	r16, r28
    1c04:	0a 56       	subi	r16, 0x6A	; 106
    1c06:	1f 4f       	sbci	r17, 0xFF	; 255
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e8 56       	subi	r30, 0x68	; 104
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	60 81       	ld	r22, Z
    1c10:	71 81       	ldd	r23, Z+1	; 0x01
    1c12:	82 81       	ldd	r24, Z+2	; 0x02
    1c14:	93 81       	ldd	r25, Z+3	; 0x03
    1c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	f8 01       	movw	r30, r16
    1c20:	91 83       	std	Z+1, r25	; 0x01
    1c22:	80 83       	st	Z, r24
    1c24:	de 01       	movw	r26, r28
    1c26:	ae 56       	subi	r26, 0x6E	; 110
    1c28:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	ea 56       	subi	r30, 0x6A	; 106
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	11 96       	adiw	r26, 0x01	; 1
    1c36:	9c 93       	st	X, r25
    1c38:	8e 93       	st	-X, r24
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	ee 56       	subi	r30, 0x6E	; 110
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 81       	ld	r24, Z
    1c42:	91 81       	ldd	r25, Z+1	; 0x01
    1c44:	01 97       	sbiw	r24, 0x01	; 1
    1c46:	f1 f7       	brne	.-4      	; 0x1c44 <CLCD_voidInit+0x50c>
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ee 56       	subi	r30, 0x6E	; 110
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	91 83       	std	Z+1, r25	; 0x01
    1c50:	80 83       	st	Z, r24
    1c52:	22 c0       	rjmp	.+68     	; 0x1c98 <CLCD_voidInit+0x560>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c54:	8e 01       	movw	r16, r28
    1c56:	00 56       	subi	r16, 0x60	; 96
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ef 55       	subi	r30, 0x5F	; 95
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 83       	st	Z, r24
    1c74:	de 01       	movw	r26, r28
    1c76:	af 56       	subi	r26, 0x6F	; 111
    1c78:	bf 4f       	sbci	r27, 0xFF	; 255
    1c7a:	fe 01       	movw	r30, r28
    1c7c:	e0 56       	subi	r30, 0x60	; 96
    1c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c80:	80 81       	ld	r24, Z
    1c82:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c84:	fe 01       	movw	r30, r28
    1c86:	ef 56       	subi	r30, 0x6F	; 111
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	80 81       	ld	r24, Z
    1c8c:	8a 95       	dec	r24
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <CLCD_voidInit+0x554>
    1c90:	fe 01       	movw	r30, r28
    1c92:	ef 56       	subi	r30, 0x6F	; 111
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x38);
    1c98:	88 e3       	ldi	r24, 0x38	; 56
    1c9a:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e3 57       	subi	r30, 0x73	; 115
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	a6 e1       	ldi	r26, 0x16	; 22
    1caa:	b3 e4       	ldi	r27, 0x43	; 67
    1cac:	80 83       	st	Z, r24
    1cae:	91 83       	std	Z+1, r25	; 0x01
    1cb0:	a2 83       	std	Z+2, r26	; 0x02
    1cb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cb4:	8e 01       	movw	r16, r28
    1cb6:	07 57       	subi	r16, 0x77	; 119
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	fe 01       	movw	r30, r28
    1cbc:	e3 57       	subi	r30, 0x73	; 115
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	60 81       	ld	r22, Z
    1cc2:	71 81       	ldd	r23, Z+1	; 0x01
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	93 81       	ldd	r25, Z+3	; 0x03
    1cc8:	2b ea       	ldi	r18, 0xAB	; 171
    1cca:	3a ea       	ldi	r19, 0xAA	; 170
    1ccc:	4a ea       	ldi	r20, 0xAA	; 170
    1cce:	50 e4       	ldi	r21, 0x40	; 64
    1cd0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	f8 01       	movw	r30, r16
    1cda:	80 83       	st	Z, r24
    1cdc:	91 83       	std	Z+1, r25	; 0x01
    1cde:	a2 83       	std	Z+2, r26	; 0x02
    1ce0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e7 57       	subi	r30, 0x77	; 119
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	34 f4       	brge	.+12     	; 0x1d0c <CLCD_voidInit+0x5d4>
		__ticks = 1;
    1d00:	fe 01       	movw	r30, r28
    1d02:	e8 57       	subi	r30, 0x78	; 120
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	81 e0       	ldi	r24, 0x01	; 1
    1d08:	80 83       	st	Z, r24
    1d0a:	e0 c0       	rjmp	.+448    	; 0x1ecc <CLCD_voidInit+0x794>
	else if (__tmp > 255)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e7 57       	subi	r30, 0x77	; 119
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	53 e4       	ldi	r21, 0x43	; 67
    1d22:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	0c f0       	brlt	.+2      	; 0x1d2c <CLCD_voidInit+0x5f4>
    1d2a:	c0 c0       	rjmp	.+384    	; 0x1eac <CLCD_voidInit+0x774>
	{
		_delay_ms(__us / 1000.0);
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e3 57       	subi	r30, 0x73	; 115
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a e7       	ldi	r20, 0x7A	; 122
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	ec 57       	subi	r30, 0x7C	; 124
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	00 58       	subi	r16, 0x80	; 128
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	ec 57       	subi	r30, 0x7C	; 124
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a e7       	ldi	r20, 0x7A	; 122
    1d72:	55 e4       	ldi	r21, 0x45	; 69
    1d74:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d86:	fe 01       	movw	r30, r28
    1d88:	e0 58       	subi	r30, 0x80	; 128
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	44 f4       	brge	.+16     	; 0x1db4 <CLCD_voidInit+0x67c>
		__ticks = 1;
    1da4:	fe 01       	movw	r30, r28
    1da6:	e2 58       	subi	r30, 0x82	; 130
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	64 c0       	rjmp	.+200    	; 0x1e7c <CLCD_voidInit+0x744>
	else if (__tmp > 65535)
    1db4:	fe 01       	movw	r30, r28
    1db6:	e0 58       	subi	r30, 0x80	; 128
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <CLCD_voidInit+0x69c>
    1dd2:	43 c0       	rjmp	.+134    	; 0x1e5a <CLCD_voidInit+0x722>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	ec 57       	subi	r30, 0x7C	; 124
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8e 01       	movw	r16, r28
    1df4:	02 58       	subi	r16, 0x82	; 130
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	1f c0       	rjmp	.+62     	; 0x1e4a <CLCD_voidInit+0x712>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	e4 58       	subi	r30, 0x84	; 132
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 e9       	ldi	r24, 0x90	; 144
    1e14:	91 e0       	ldi	r25, 0x01	; 1
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e4 58       	subi	r30, 0x84	; 132
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <CLCD_voidInit+0x6ec>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e4 58       	subi	r30, 0x84	; 132
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	de 01       	movw	r26, r28
    1e34:	a2 58       	subi	r26, 0x82	; 130
    1e36:	bf 4f       	sbci	r27, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	e2 58       	subi	r30, 0x82	; 130
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	9c 93       	st	X, r25
    1e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	e2 58       	subi	r30, 0x82	; 130
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	d1 f6       	brne	.-76     	; 0x1e0c <CLCD_voidInit+0x6d4>
    1e58:	4b c0       	rjmp	.+150    	; 0x1ef0 <CLCD_voidInit+0x7b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	02 58       	subi	r16, 0x82	; 130
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	e0 58       	subi	r30, 0x80	; 128
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	f8 01       	movw	r30, r16
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	de 01       	movw	r26, r28
    1e7e:	a6 58       	subi	r26, 0x86	; 134
    1e80:	bf 4f       	sbci	r27, 0xFF	; 255
    1e82:	fe 01       	movw	r30, r28
    1e84:	e2 58       	subi	r30, 0x82	; 130
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	91 81       	ldd	r25, Z+1	; 0x01
    1e8c:	11 96       	adiw	r26, 0x01	; 1
    1e8e:	9c 93       	st	X, r25
    1e90:	8e 93       	st	-X, r24
    1e92:	fe 01       	movw	r30, r28
    1e94:	e6 58       	subi	r30, 0x86	; 134
    1e96:	ff 4f       	sbci	r31, 0xFF	; 255
    1e98:	80 81       	ld	r24, Z
    1e9a:	91 81       	ldd	r25, Z+1	; 0x01
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <CLCD_voidInit+0x764>
    1ea0:	fe 01       	movw	r30, r28
    1ea2:	e6 58       	subi	r30, 0x86	; 134
    1ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	22 c0       	rjmp	.+68     	; 0x1ef0 <CLCD_voidInit+0x7b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1eac:	8e 01       	movw	r16, r28
    1eae:	08 57       	subi	r16, 0x78	; 120
    1eb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1eb2:	fe 01       	movw	r30, r28
    1eb4:	e7 57       	subi	r30, 0x77	; 119
    1eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb8:	60 81       	ld	r22, Z
    1eba:	71 81       	ldd	r23, Z+1	; 0x01
    1ebc:	82 81       	ldd	r24, Z+2	; 0x02
    1ebe:	93 81       	ldd	r25, Z+3	; 0x03
    1ec0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ec4:	dc 01       	movw	r26, r24
    1ec6:	cb 01       	movw	r24, r22
    1ec8:	f8 01       	movw	r30, r16
    1eca:	80 83       	st	Z, r24
    1ecc:	de 01       	movw	r26, r28
    1ece:	a7 58       	subi	r26, 0x87	; 135
    1ed0:	bf 4f       	sbci	r27, 0xFF	; 255
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	e8 57       	subi	r30, 0x78	; 120
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1edc:	fe 01       	movw	r30, r28
    1ede:	e7 58       	subi	r30, 0x87	; 135
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	8a 95       	dec	r24
    1ee6:	f1 f7       	brne	.-4      	; 0x1ee4 <CLCD_voidInit+0x7ac>
    1ee8:	fe 01       	movw	r30, r28
    1eea:	e7 58       	subi	r30, 0x87	; 135
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x01);
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	eb 58       	subi	r30, 0x8B	; 139
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	a6 e1       	ldi	r26, 0x16	; 22
    1f02:	b3 e4       	ldi	r27, 0x43	; 67
    1f04:	80 83       	st	Z, r24
    1f06:	91 83       	std	Z+1, r25	; 0x01
    1f08:	a2 83       	std	Z+2, r26	; 0x02
    1f0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f0c:	8e 01       	movw	r16, r28
    1f0e:	0f 58       	subi	r16, 0x8F	; 143
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	fe 01       	movw	r30, r28
    1f14:	eb 58       	subi	r30, 0x8B	; 139
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	2b ea       	ldi	r18, 0xAB	; 171
    1f22:	3a ea       	ldi	r19, 0xAA	; 170
    1f24:	4a ea       	ldi	r20, 0xAA	; 170
    1f26:	50 e4       	ldi	r21, 0x40	; 64
    1f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	f8 01       	movw	r30, r16
    1f32:	80 83       	st	Z, r24
    1f34:	91 83       	std	Z+1, r25	; 0x01
    1f36:	a2 83       	std	Z+2, r26	; 0x02
    1f38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f3a:	fe 01       	movw	r30, r28
    1f3c:	ef 58       	subi	r30, 0x8F	; 143
    1f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f40:	60 81       	ld	r22, Z
    1f42:	71 81       	ldd	r23, Z+1	; 0x01
    1f44:	82 81       	ldd	r24, Z+2	; 0x02
    1f46:	93 81       	ldd	r25, Z+3	; 0x03
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e8       	ldi	r20, 0x80	; 128
    1f4e:	5f e3       	ldi	r21, 0x3F	; 63
    1f50:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f54:	88 23       	and	r24, r24
    1f56:	34 f4       	brge	.+12     	; 0x1f64 <CLCD_voidInit+0x82c>
		__ticks = 1;
    1f58:	fe 01       	movw	r30, r28
    1f5a:	e0 59       	subi	r30, 0x90	; 144
    1f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	80 83       	st	Z, r24
    1f62:	e0 c0       	rjmp	.+448    	; 0x2124 <CLCD_voidInit+0x9ec>
	else if (__tmp > 255)
    1f64:	fe 01       	movw	r30, r28
    1f66:	ef 58       	subi	r30, 0x8F	; 143
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	60 81       	ld	r22, Z
    1f6c:	71 81       	ldd	r23, Z+1	; 0x01
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	93 81       	ldd	r25, Z+3	; 0x03
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	4f e7       	ldi	r20, 0x7F	; 127
    1f78:	53 e4       	ldi	r21, 0x43	; 67
    1f7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f7e:	18 16       	cp	r1, r24
    1f80:	0c f0       	brlt	.+2      	; 0x1f84 <CLCD_voidInit+0x84c>
    1f82:	c0 c0       	rjmp	.+384    	; 0x2104 <CLCD_voidInit+0x9cc>
	{
		_delay_ms(__us / 1000.0);
    1f84:	fe 01       	movw	r30, r28
    1f86:	eb 58       	subi	r30, 0x8B	; 139
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	4a e7       	ldi	r20, 0x7A	; 122
    1f98:	54 e4       	ldi	r21, 0x44	; 68
    1f9a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e4 59       	subi	r30, 0x94	; 148
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	80 83       	st	Z, r24
    1faa:	91 83       	std	Z+1, r25	; 0x01
    1fac:	a2 83       	std	Z+2, r26	; 0x02
    1fae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fb0:	8e 01       	movw	r16, r28
    1fb2:	08 59       	subi	r16, 0x98	; 152
    1fb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e4 59       	subi	r30, 0x94	; 148
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	60 81       	ld	r22, Z
    1fbe:	71 81       	ldd	r23, Z+1	; 0x01
    1fc0:	82 81       	ldd	r24, Z+2	; 0x02
    1fc2:	93 81       	ldd	r25, Z+3	; 0x03
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	4a e7       	ldi	r20, 0x7A	; 122
    1fca:	55 e4       	ldi	r21, 0x45	; 69
    1fcc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	80 83       	st	Z, r24
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	a2 83       	std	Z+2, r26	; 0x02
    1fdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fde:	fe 01       	movw	r30, r28
    1fe0:	e8 59       	subi	r30, 0x98	; 152
    1fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe4:	60 81       	ld	r22, Z
    1fe6:	71 81       	ldd	r23, Z+1	; 0x01
    1fe8:	82 81       	ldd	r24, Z+2	; 0x02
    1fea:	93 81       	ldd	r25, Z+3	; 0x03
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	44 f4       	brge	.+16     	; 0x200c <CLCD_voidInit+0x8d4>
		__ticks = 1;
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	ea 59       	subi	r30, 0x9A	; 154
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	80 83       	st	Z, r24
    200a:	64 c0       	rjmp	.+200    	; 0x20d4 <CLCD_voidInit+0x99c>
	else if (__tmp > 65535)
    200c:	fe 01       	movw	r30, r28
    200e:	e8 59       	subi	r30, 0x98	; 152
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	60 81       	ld	r22, Z
    2014:	71 81       	ldd	r23, Z+1	; 0x01
    2016:	82 81       	ldd	r24, Z+2	; 0x02
    2018:	93 81       	ldd	r25, Z+3	; 0x03
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	0c f0       	brlt	.+2      	; 0x202c <CLCD_voidInit+0x8f4>
    202a:	43 c0       	rjmp	.+134    	; 0x20b2 <CLCD_voidInit+0x97a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202c:	fe 01       	movw	r30, r28
    202e:	e4 59       	subi	r30, 0x94	; 148
    2030:	ff 4f       	sbci	r31, 0xFF	; 255
    2032:	60 81       	ld	r22, Z
    2034:	71 81       	ldd	r23, Z+1	; 0x01
    2036:	82 81       	ldd	r24, Z+2	; 0x02
    2038:	93 81       	ldd	r25, Z+3	; 0x03
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e2       	ldi	r20, 0x20	; 32
    2040:	51 e4       	ldi	r21, 0x41	; 65
    2042:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2046:	dc 01       	movw	r26, r24
    2048:	cb 01       	movw	r24, r22
    204a:	8e 01       	movw	r16, r28
    204c:	0a 59       	subi	r16, 0x9A	; 154
    204e:	1f 4f       	sbci	r17, 0xFF	; 255
    2050:	bc 01       	movw	r22, r24
    2052:	cd 01       	movw	r24, r26
    2054:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	f8 01       	movw	r30, r16
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	1f c0       	rjmp	.+62     	; 0x20a2 <CLCD_voidInit+0x96a>
    2064:	fe 01       	movw	r30, r28
    2066:	ec 59       	subi	r30, 0x9C	; 156
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	80 e9       	ldi	r24, 0x90	; 144
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	91 83       	std	Z+1, r25	; 0x01
    2070:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2072:	fe 01       	movw	r30, r28
    2074:	ec 59       	subi	r30, 0x9C	; 156
    2076:	ff 4f       	sbci	r31, 0xFF	; 255
    2078:	80 81       	ld	r24, Z
    207a:	91 81       	ldd	r25, Z+1	; 0x01
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <CLCD_voidInit+0x944>
    2080:	fe 01       	movw	r30, r28
    2082:	ec 59       	subi	r30, 0x9C	; 156
    2084:	ff 4f       	sbci	r31, 0xFF	; 255
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208a:	de 01       	movw	r26, r28
    208c:	aa 59       	subi	r26, 0x9A	; 154
    208e:	bf 4f       	sbci	r27, 0xFF	; 255
    2090:	fe 01       	movw	r30, r28
    2092:	ea 59       	subi	r30, 0x9A	; 154
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	80 81       	ld	r24, Z
    2098:	91 81       	ldd	r25, Z+1	; 0x01
    209a:	01 97       	sbiw	r24, 0x01	; 1
    209c:	11 96       	adiw	r26, 0x01	; 1
    209e:	9c 93       	st	X, r25
    20a0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20a2:	fe 01       	movw	r30, r28
    20a4:	ea 59       	subi	r30, 0x9A	; 154
    20a6:	ff 4f       	sbci	r31, 0xFF	; 255
    20a8:	80 81       	ld	r24, Z
    20aa:	91 81       	ldd	r25, Z+1	; 0x01
    20ac:	00 97       	sbiw	r24, 0x00	; 0
    20ae:	d1 f6       	brne	.-76     	; 0x2064 <CLCD_voidInit+0x92c>
    20b0:	4b c0       	rjmp	.+150    	; 0x2148 <CLCD_voidInit+0xa10>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20b2:	8e 01       	movw	r16, r28
    20b4:	0a 59       	subi	r16, 0x9A	; 154
    20b6:	1f 4f       	sbci	r17, 0xFF	; 255
    20b8:	fe 01       	movw	r30, r28
    20ba:	e8 59       	subi	r30, 0x98	; 152
    20bc:	ff 4f       	sbci	r31, 0xFF	; 255
    20be:	60 81       	ld	r22, Z
    20c0:	71 81       	ldd	r23, Z+1	; 0x01
    20c2:	82 81       	ldd	r24, Z+2	; 0x02
    20c4:	93 81       	ldd	r25, Z+3	; 0x03
    20c6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	f8 01       	movw	r30, r16
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
    20d4:	de 01       	movw	r26, r28
    20d6:	ae 59       	subi	r26, 0x9E	; 158
    20d8:	bf 4f       	sbci	r27, 0xFF	; 255
    20da:	fe 01       	movw	r30, r28
    20dc:	ea 59       	subi	r30, 0x9A	; 154
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	80 81       	ld	r24, Z
    20e2:	91 81       	ldd	r25, Z+1	; 0x01
    20e4:	11 96       	adiw	r26, 0x01	; 1
    20e6:	9c 93       	st	X, r25
    20e8:	8e 93       	st	-X, r24
    20ea:	fe 01       	movw	r30, r28
    20ec:	ee 59       	subi	r30, 0x9E	; 158
    20ee:	ff 4f       	sbci	r31, 0xFF	; 255
    20f0:	80 81       	ld	r24, Z
    20f2:	91 81       	ldd	r25, Z+1	; 0x01
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <CLCD_voidInit+0x9bc>
    20f8:	fe 01       	movw	r30, r28
    20fa:	ee 59       	subi	r30, 0x9E	; 158
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	91 83       	std	Z+1, r25	; 0x01
    2100:	80 83       	st	Z, r24
    2102:	22 c0       	rjmp	.+68     	; 0x2148 <CLCD_voidInit+0xa10>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2104:	8e 01       	movw	r16, r28
    2106:	00 59       	subi	r16, 0x90	; 144
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	fe 01       	movw	r30, r28
    210c:	ef 58       	subi	r30, 0x8F	; 143
    210e:	ff 4f       	sbci	r31, 0xFF	; 255
    2110:	60 81       	ld	r22, Z
    2112:	71 81       	ldd	r23, Z+1	; 0x01
    2114:	82 81       	ldd	r24, Z+2	; 0x02
    2116:	93 81       	ldd	r25, Z+3	; 0x03
    2118:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	f8 01       	movw	r30, r16
    2122:	80 83       	st	Z, r24
    2124:	de 01       	movw	r26, r28
    2126:	af 59       	subi	r26, 0x9F	; 159
    2128:	bf 4f       	sbci	r27, 0xFF	; 255
    212a:	fe 01       	movw	r30, r28
    212c:	e0 59       	subi	r30, 0x90	; 144
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	80 81       	ld	r24, Z
    2132:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2134:	fe 01       	movw	r30, r28
    2136:	ef 59       	subi	r30, 0x9F	; 159
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	8a 95       	dec	r24
    213e:	f1 f7       	brne	.-4      	; 0x213c <CLCD_voidInit+0xa04>
    2140:	fe 01       	movw	r30, r28
    2142:	ef 59       	subi	r30, 0x9F	; 159
    2144:	ff 4f       	sbci	r31, 0xFF	; 255
    2146:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x02);
    2148:	82 e0       	ldi	r24, 0x02	; 2
    214a:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    214e:	fe 01       	movw	r30, r28
    2150:	e3 5a       	subi	r30, 0xA3	; 163
    2152:	ff 4f       	sbci	r31, 0xFF	; 255
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	a6 e1       	ldi	r26, 0x16	; 22
    215a:	b3 e4       	ldi	r27, 0x43	; 67
    215c:	80 83       	st	Z, r24
    215e:	91 83       	std	Z+1, r25	; 0x01
    2160:	a2 83       	std	Z+2, r26	; 0x02
    2162:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2164:	8e 01       	movw	r16, r28
    2166:	07 5a       	subi	r16, 0xA7	; 167
    2168:	1f 4f       	sbci	r17, 0xFF	; 255
    216a:	fe 01       	movw	r30, r28
    216c:	e3 5a       	subi	r30, 0xA3	; 163
    216e:	ff 4f       	sbci	r31, 0xFF	; 255
    2170:	60 81       	ld	r22, Z
    2172:	71 81       	ldd	r23, Z+1	; 0x01
    2174:	82 81       	ldd	r24, Z+2	; 0x02
    2176:	93 81       	ldd	r25, Z+3	; 0x03
    2178:	2b ea       	ldi	r18, 0xAB	; 171
    217a:	3a ea       	ldi	r19, 0xAA	; 170
    217c:	4a ea       	ldi	r20, 0xAA	; 170
    217e:	50 e4       	ldi	r21, 0x40	; 64
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	f8 01       	movw	r30, r16
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	a2 83       	std	Z+2, r26	; 0x02
    2190:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2192:	fe 01       	movw	r30, r28
    2194:	e7 5a       	subi	r30, 0xA7	; 167
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	60 81       	ld	r22, Z
    219a:	71 81       	ldd	r23, Z+1	; 0x01
    219c:	82 81       	ldd	r24, Z+2	; 0x02
    219e:	93 81       	ldd	r25, Z+3	; 0x03
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21ac:	88 23       	and	r24, r24
    21ae:	34 f4       	brge	.+12     	; 0x21bc <CLCD_voidInit+0xa84>
		__ticks = 1;
    21b0:	fe 01       	movw	r30, r28
    21b2:	e8 5a       	subi	r30, 0xA8	; 168
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	80 83       	st	Z, r24
    21ba:	e0 c0       	rjmp	.+448    	; 0x237c <CLCD_voidInit+0xc44>
	else if (__tmp > 255)
    21bc:	fe 01       	movw	r30, r28
    21be:	e7 5a       	subi	r30, 0xA7	; 167
    21c0:	ff 4f       	sbci	r31, 0xFF	; 255
    21c2:	60 81       	ld	r22, Z
    21c4:	71 81       	ldd	r23, Z+1	; 0x01
    21c6:	82 81       	ldd	r24, Z+2	; 0x02
    21c8:	93 81       	ldd	r25, Z+3	; 0x03
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	53 e4       	ldi	r21, 0x43	; 67
    21d2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21d6:	18 16       	cp	r1, r24
    21d8:	0c f0       	brlt	.+2      	; 0x21dc <CLCD_voidInit+0xaa4>
    21da:	c0 c0       	rjmp	.+384    	; 0x235c <CLCD_voidInit+0xc24>
	{
		_delay_ms(__us / 1000.0);
    21dc:	fe 01       	movw	r30, r28
    21de:	e3 5a       	subi	r30, 0xA3	; 163
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	60 81       	ld	r22, Z
    21e4:	71 81       	ldd	r23, Z+1	; 0x01
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	93 81       	ldd	r25, Z+3	; 0x03
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	4a e7       	ldi	r20, 0x7A	; 122
    21f0:	54 e4       	ldi	r21, 0x44	; 68
    21f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	fe 01       	movw	r30, r28
    21fc:	ec 5a       	subi	r30, 0xAC	; 172
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 83       	st	Z, r24
    2202:	91 83       	std	Z+1, r25	; 0x01
    2204:	a2 83       	std	Z+2, r26	; 0x02
    2206:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2208:	8e 01       	movw	r16, r28
    220a:	00 5b       	subi	r16, 0xB0	; 176
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	fe 01       	movw	r30, r28
    2210:	ec 5a       	subi	r30, 0xAC	; 172
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a e7       	ldi	r20, 0x7A	; 122
    2222:	55 e4       	ldi	r21, 0x45	; 69
    2224:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	f8 01       	movw	r30, r16
    222e:	80 83       	st	Z, r24
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	a2 83       	std	Z+2, r26	; 0x02
    2234:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2236:	fe 01       	movw	r30, r28
    2238:	e0 5b       	subi	r30, 0xB0	; 176
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	60 81       	ld	r22, Z
    223e:	71 81       	ldd	r23, Z+1	; 0x01
    2240:	82 81       	ldd	r24, Z+2	; 0x02
    2242:	93 81       	ldd	r25, Z+3	; 0x03
    2244:	20 e0       	ldi	r18, 0x00	; 0
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	40 e8       	ldi	r20, 0x80	; 128
    224a:	5f e3       	ldi	r21, 0x3F	; 63
    224c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2250:	88 23       	and	r24, r24
    2252:	44 f4       	brge	.+16     	; 0x2264 <CLCD_voidInit+0xb2c>
		__ticks = 1;
    2254:	fe 01       	movw	r30, r28
    2256:	e2 5b       	subi	r30, 0xB2	; 178
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	91 83       	std	Z+1, r25	; 0x01
    2260:	80 83       	st	Z, r24
    2262:	64 c0       	rjmp	.+200    	; 0x232c <CLCD_voidInit+0xbf4>
	else if (__tmp > 65535)
    2264:	fe 01       	movw	r30, r28
    2266:	e0 5b       	subi	r30, 0xB0	; 176
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	20 e0       	ldi	r18, 0x00	; 0
    2274:	3f ef       	ldi	r19, 0xFF	; 255
    2276:	4f e7       	ldi	r20, 0x7F	; 127
    2278:	57 e4       	ldi	r21, 0x47	; 71
    227a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    227e:	18 16       	cp	r1, r24
    2280:	0c f0       	brlt	.+2      	; 0x2284 <CLCD_voidInit+0xb4c>
    2282:	43 c0       	rjmp	.+134    	; 0x230a <CLCD_voidInit+0xbd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2284:	fe 01       	movw	r30, r28
    2286:	ec 5a       	subi	r30, 0xAC	; 172
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	60 81       	ld	r22, Z
    228c:	71 81       	ldd	r23, Z+1	; 0x01
    228e:	82 81       	ldd	r24, Z+2	; 0x02
    2290:	93 81       	ldd	r25, Z+3	; 0x03
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	8e 01       	movw	r16, r28
    22a4:	02 5b       	subi	r16, 0xB2	; 178
    22a6:	1f 4f       	sbci	r17, 0xFF	; 255
    22a8:	bc 01       	movw	r22, r24
    22aa:	cd 01       	movw	r24, r26
    22ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	f8 01       	movw	r30, r16
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
    22ba:	1f c0       	rjmp	.+62     	; 0x22fa <CLCD_voidInit+0xbc2>
    22bc:	fe 01       	movw	r30, r28
    22be:	e4 5b       	subi	r30, 0xB4	; 180
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 e9       	ldi	r24, 0x90	; 144
    22c4:	91 e0       	ldi	r25, 0x01	; 1
    22c6:	91 83       	std	Z+1, r25	; 0x01
    22c8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22ca:	fe 01       	movw	r30, r28
    22cc:	e4 5b       	subi	r30, 0xB4	; 180
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <CLCD_voidInit+0xb9c>
    22d8:	fe 01       	movw	r30, r28
    22da:	e4 5b       	subi	r30, 0xB4	; 180
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22e2:	de 01       	movw	r26, r28
    22e4:	a2 5b       	subi	r26, 0xB2	; 178
    22e6:	bf 4f       	sbci	r27, 0xFF	; 255
    22e8:	fe 01       	movw	r30, r28
    22ea:	e2 5b       	subi	r30, 0xB2	; 178
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 81       	ld	r24, Z
    22f0:	91 81       	ldd	r25, Z+1	; 0x01
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	11 96       	adiw	r26, 0x01	; 1
    22f6:	9c 93       	st	X, r25
    22f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22fa:	fe 01       	movw	r30, r28
    22fc:	e2 5b       	subi	r30, 0xB2	; 178
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	80 81       	ld	r24, Z
    2302:	91 81       	ldd	r25, Z+1	; 0x01
    2304:	00 97       	sbiw	r24, 0x00	; 0
    2306:	d1 f6       	brne	.-76     	; 0x22bc <CLCD_voidInit+0xb84>
    2308:	4b c0       	rjmp	.+150    	; 0x23a0 <CLCD_voidInit+0xc68>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    230a:	8e 01       	movw	r16, r28
    230c:	02 5b       	subi	r16, 0xB2	; 178
    230e:	1f 4f       	sbci	r17, 0xFF	; 255
    2310:	fe 01       	movw	r30, r28
    2312:	e0 5b       	subi	r30, 0xB0	; 176
    2314:	ff 4f       	sbci	r31, 0xFF	; 255
    2316:	60 81       	ld	r22, Z
    2318:	71 81       	ldd	r23, Z+1	; 0x01
    231a:	82 81       	ldd	r24, Z+2	; 0x02
    231c:	93 81       	ldd	r25, Z+3	; 0x03
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	91 83       	std	Z+1, r25	; 0x01
    232a:	80 83       	st	Z, r24
    232c:	de 01       	movw	r26, r28
    232e:	a6 5b       	subi	r26, 0xB6	; 182
    2330:	bf 4f       	sbci	r27, 0xFF	; 255
    2332:	fe 01       	movw	r30, r28
    2334:	e2 5b       	subi	r30, 0xB2	; 178
    2336:	ff 4f       	sbci	r31, 0xFF	; 255
    2338:	80 81       	ld	r24, Z
    233a:	91 81       	ldd	r25, Z+1	; 0x01
    233c:	11 96       	adiw	r26, 0x01	; 1
    233e:	9c 93       	st	X, r25
    2340:	8e 93       	st	-X, r24
    2342:	fe 01       	movw	r30, r28
    2344:	e6 5b       	subi	r30, 0xB6	; 182
    2346:	ff 4f       	sbci	r31, 0xFF	; 255
    2348:	80 81       	ld	r24, Z
    234a:	91 81       	ldd	r25, Z+1	; 0x01
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	f1 f7       	brne	.-4      	; 0x234c <CLCD_voidInit+0xc14>
    2350:	fe 01       	movw	r30, r28
    2352:	e6 5b       	subi	r30, 0xB6	; 182
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	91 83       	std	Z+1, r25	; 0x01
    2358:	80 83       	st	Z, r24
    235a:	22 c0       	rjmp	.+68     	; 0x23a0 <CLCD_voidInit+0xc68>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    235c:	8e 01       	movw	r16, r28
    235e:	08 5a       	subi	r16, 0xA8	; 168
    2360:	1f 4f       	sbci	r17, 0xFF	; 255
    2362:	fe 01       	movw	r30, r28
    2364:	e7 5a       	subi	r30, 0xA7	; 167
    2366:	ff 4f       	sbci	r31, 0xFF	; 255
    2368:	60 81       	ld	r22, Z
    236a:	71 81       	ldd	r23, Z+1	; 0x01
    236c:	82 81       	ldd	r24, Z+2	; 0x02
    236e:	93 81       	ldd	r25, Z+3	; 0x03
    2370:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	f8 01       	movw	r30, r16
    237a:	80 83       	st	Z, r24
    237c:	de 01       	movw	r26, r28
    237e:	a7 5b       	subi	r26, 0xB7	; 183
    2380:	bf 4f       	sbci	r27, 0xFF	; 255
    2382:	fe 01       	movw	r30, r28
    2384:	e8 5a       	subi	r30, 0xA8	; 168
    2386:	ff 4f       	sbci	r31, 0xFF	; 255
    2388:	80 81       	ld	r24, Z
    238a:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    238c:	fe 01       	movw	r30, r28
    238e:	e7 5b       	subi	r30, 0xB7	; 183
    2390:	ff 4f       	sbci	r31, 0xFF	; 255
    2392:	80 81       	ld	r24, Z
    2394:	8a 95       	dec	r24
    2396:	f1 f7       	brne	.-4      	; 0x2394 <CLCD_voidInit+0xc5c>
    2398:	fe 01       	movw	r30, r28
    239a:	e7 5b       	subi	r30, 0xB7	; 183
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 83       	st	Z, r24
	_delay_us(150);
	CLCD_voidSendCommand(0x06);
    23a0:	86 e0       	ldi	r24, 0x06	; 6
    23a2:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    23a6:	fe 01       	movw	r30, r28
    23a8:	eb 5b       	subi	r30, 0xBB	; 187
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	80 e0       	ldi	r24, 0x00	; 0
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	a6 e1       	ldi	r26, 0x16	; 22
    23b2:	b3 e4       	ldi	r27, 0x43	; 67
    23b4:	80 83       	st	Z, r24
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	a2 83       	std	Z+2, r26	; 0x02
    23ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23bc:	8e 01       	movw	r16, r28
    23be:	0f 5b       	subi	r16, 0xBF	; 191
    23c0:	1f 4f       	sbci	r17, 0xFF	; 255
    23c2:	fe 01       	movw	r30, r28
    23c4:	eb 5b       	subi	r30, 0xBB	; 187
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	60 81       	ld	r22, Z
    23ca:	71 81       	ldd	r23, Z+1	; 0x01
    23cc:	82 81       	ldd	r24, Z+2	; 0x02
    23ce:	93 81       	ldd	r25, Z+3	; 0x03
    23d0:	2b ea       	ldi	r18, 0xAB	; 171
    23d2:	3a ea       	ldi	r19, 0xAA	; 170
    23d4:	4a ea       	ldi	r20, 0xAA	; 170
    23d6:	50 e4       	ldi	r21, 0x40	; 64
    23d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23dc:	dc 01       	movw	r26, r24
    23de:	cb 01       	movw	r24, r22
    23e0:	f8 01       	movw	r30, r16
    23e2:	80 83       	st	Z, r24
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	a2 83       	std	Z+2, r26	; 0x02
    23e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23ea:	fe 01       	movw	r30, r28
    23ec:	ef 5b       	subi	r30, 0xBF	; 191
    23ee:	ff 4f       	sbci	r31, 0xFF	; 255
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e8       	ldi	r20, 0x80	; 128
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2404:	88 23       	and	r24, r24
    2406:	34 f4       	brge	.+12     	; 0x2414 <CLCD_voidInit+0xcdc>
		__ticks = 1;
    2408:	81 e0       	ldi	r24, 0x01	; 1
    240a:	fe 01       	movw	r30, r28
    240c:	e0 5c       	subi	r30, 0xC0	; 192
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	80 83       	st	Z, r24
    2412:	9d c0       	rjmp	.+314    	; 0x254e <CLCD_voidInit+0xe16>
	else if (__tmp > 255)
    2414:	fe 01       	movw	r30, r28
    2416:	ef 5b       	subi	r30, 0xBF	; 191
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	60 81       	ld	r22, Z
    241c:	71 81       	ldd	r23, Z+1	; 0x01
    241e:	82 81       	ldd	r24, Z+2	; 0x02
    2420:	93 81       	ldd	r25, Z+3	; 0x03
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	53 e4       	ldi	r21, 0x43	; 67
    242a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	0c f0       	brlt	.+2      	; 0x2434 <CLCD_voidInit+0xcfc>
    2432:	7e c0       	rjmp	.+252    	; 0x2530 <CLCD_voidInit+0xdf8>
	{
		_delay_ms(__us / 1000.0);
    2434:	fe 01       	movw	r30, r28
    2436:	eb 5b       	subi	r30, 0xBB	; 187
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	60 81       	ld	r22, Z
    243c:	71 81       	ldd	r23, Z+1	; 0x01
    243e:	82 81       	ldd	r24, Z+2	; 0x02
    2440:	93 81       	ldd	r25, Z+3	; 0x03
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	4a e7       	ldi	r20, 0x7A	; 122
    2448:	54 e4       	ldi	r21, 0x44	; 68
    244a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	8c af       	std	Y+60, r24	; 0x3c
    2454:	9d af       	std	Y+61, r25	; 0x3d
    2456:	ae af       	std	Y+62, r26	; 0x3e
    2458:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    245a:	6c ad       	ldd	r22, Y+60	; 0x3c
    245c:	7d ad       	ldd	r23, Y+61	; 0x3d
    245e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2460:	9f ad       	ldd	r25, Y+63	; 0x3f
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a e7       	ldi	r20, 0x7A	; 122
    2468:	55 e4       	ldi	r21, 0x45	; 69
    246a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	88 af       	std	Y+56, r24	; 0x38
    2474:	99 af       	std	Y+57, r25	; 0x39
    2476:	aa af       	std	Y+58, r26	; 0x3a
    2478:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    247a:	68 ad       	ldd	r22, Y+56	; 0x38
    247c:	79 ad       	ldd	r23, Y+57	; 0x39
    247e:	8a ad       	ldd	r24, Y+58	; 0x3a
    2480:	9b ad       	ldd	r25, Y+59	; 0x3b
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    248e:	88 23       	and	r24, r24
    2490:	2c f4       	brge	.+10     	; 0x249c <CLCD_voidInit+0xd64>
		__ticks = 1;
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	9f ab       	std	Y+55, r25	; 0x37
    2498:	8e ab       	std	Y+54, r24	; 0x36
    249a:	3f c0       	rjmp	.+126    	; 0x251a <CLCD_voidInit+0xde2>
	else if (__tmp > 65535)
    249c:	68 ad       	ldd	r22, Y+56	; 0x38
    249e:	79 ad       	ldd	r23, Y+57	; 0x39
    24a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    24a2:	9b ad       	ldd	r25, Y+59	; 0x3b
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	3f ef       	ldi	r19, 0xFF	; 255
    24a8:	4f e7       	ldi	r20, 0x7F	; 127
    24aa:	57 e4       	ldi	r21, 0x47	; 71
    24ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24b0:	18 16       	cp	r1, r24
    24b2:	4c f5       	brge	.+82     	; 0x2506 <CLCD_voidInit+0xdce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24b4:	6c ad       	ldd	r22, Y+60	; 0x3c
    24b6:	7d ad       	ldd	r23, Y+61	; 0x3d
    24b8:	8e ad       	ldd	r24, Y+62	; 0x3e
    24ba:	9f ad       	ldd	r25, Y+63	; 0x3f
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e2       	ldi	r20, 0x20	; 32
    24c2:	51 e4       	ldi	r21, 0x41	; 65
    24c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24c8:	dc 01       	movw	r26, r24
    24ca:	cb 01       	movw	r24, r22
    24cc:	bc 01       	movw	r22, r24
    24ce:	cd 01       	movw	r24, r26
    24d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	9f ab       	std	Y+55, r25	; 0x37
    24da:	8e ab       	std	Y+54, r24	; 0x36
    24dc:	0f c0       	rjmp	.+30     	; 0x24fc <CLCD_voidInit+0xdc4>
    24de:	80 e9       	ldi	r24, 0x90	; 144
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	9d ab       	std	Y+53, r25	; 0x35
    24e4:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24e6:	8c a9       	ldd	r24, Y+52	; 0x34
    24e8:	9d a9       	ldd	r25, Y+53	; 0x35
    24ea:	01 97       	sbiw	r24, 0x01	; 1
    24ec:	f1 f7       	brne	.-4      	; 0x24ea <CLCD_voidInit+0xdb2>
    24ee:	9d ab       	std	Y+53, r25	; 0x35
    24f0:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f2:	8e a9       	ldd	r24, Y+54	; 0x36
    24f4:	9f a9       	ldd	r25, Y+55	; 0x37
    24f6:	01 97       	sbiw	r24, 0x01	; 1
    24f8:	9f ab       	std	Y+55, r25	; 0x37
    24fa:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24fc:	8e a9       	ldd	r24, Y+54	; 0x36
    24fe:	9f a9       	ldd	r25, Y+55	; 0x37
    2500:	00 97       	sbiw	r24, 0x00	; 0
    2502:	69 f7       	brne	.-38     	; 0x24de <CLCD_voidInit+0xda6>
    2504:	2d c0       	rjmp	.+90     	; 0x2560 <CLCD_voidInit+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2506:	68 ad       	ldd	r22, Y+56	; 0x38
    2508:	79 ad       	ldd	r23, Y+57	; 0x39
    250a:	8a ad       	ldd	r24, Y+58	; 0x3a
    250c:	9b ad       	ldd	r25, Y+59	; 0x3b
    250e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9f ab       	std	Y+55, r25	; 0x37
    2518:	8e ab       	std	Y+54, r24	; 0x36
    251a:	8e a9       	ldd	r24, Y+54	; 0x36
    251c:	9f a9       	ldd	r25, Y+55	; 0x37
    251e:	9b ab       	std	Y+51, r25	; 0x33
    2520:	8a ab       	std	Y+50, r24	; 0x32
    2522:	8a a9       	ldd	r24, Y+50	; 0x32
    2524:	9b a9       	ldd	r25, Y+51	; 0x33
    2526:	01 97       	sbiw	r24, 0x01	; 1
    2528:	f1 f7       	brne	.-4      	; 0x2526 <CLCD_voidInit+0xdee>
    252a:	9b ab       	std	Y+51, r25	; 0x33
    252c:	8a ab       	std	Y+50, r24	; 0x32
    252e:	18 c0       	rjmp	.+48     	; 0x2560 <CLCD_voidInit+0xe28>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2530:	fe 01       	movw	r30, r28
    2532:	ef 5b       	subi	r30, 0xBF	; 191
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	60 81       	ld	r22, Z
    2538:	71 81       	ldd	r23, Z+1	; 0x01
    253a:	82 81       	ldd	r24, Z+2	; 0x02
    253c:	93 81       	ldd	r25, Z+3	; 0x03
    253e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	fe 01       	movw	r30, r28
    2548:	e0 5c       	subi	r30, 0xC0	; 192
    254a:	ff 4f       	sbci	r31, 0xFF	; 255
    254c:	80 83       	st	Z, r24
    254e:	fe 01       	movw	r30, r28
    2550:	e0 5c       	subi	r30, 0xC0	; 192
    2552:	ff 4f       	sbci	r31, 0xFF	; 255
    2554:	80 81       	ld	r24, Z
    2556:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2558:	89 a9       	ldd	r24, Y+49	; 0x31
    255a:	8a 95       	dec	r24
    255c:	f1 f7       	brne	.-4      	; 0x255a <CLCD_voidInit+0xe22>
    255e:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(150);
	CLCD_voidSendCommand(0x0d);
    2560:	8d e0       	ldi	r24, 0x0D	; 13
    2562:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    2566:	80 e0       	ldi	r24, 0x00	; 0
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	a6 e1       	ldi	r26, 0x16	; 22
    256c:	b3 e4       	ldi	r27, 0x43	; 67
    256e:	8d a7       	std	Y+45, r24	; 0x2d
    2570:	9e a7       	std	Y+46, r25	; 0x2e
    2572:	af a7       	std	Y+47, r26	; 0x2f
    2574:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2576:	6d a5       	ldd	r22, Y+45	; 0x2d
    2578:	7e a5       	ldd	r23, Y+46	; 0x2e
    257a:	8f a5       	ldd	r24, Y+47	; 0x2f
    257c:	98 a9       	ldd	r25, Y+48	; 0x30
    257e:	2b ea       	ldi	r18, 0xAB	; 171
    2580:	3a ea       	ldi	r19, 0xAA	; 170
    2582:	4a ea       	ldi	r20, 0xAA	; 170
    2584:	50 e4       	ldi	r21, 0x40	; 64
    2586:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	89 a7       	std	Y+41, r24	; 0x29
    2590:	9a a7       	std	Y+42, r25	; 0x2a
    2592:	ab a7       	std	Y+43, r26	; 0x2b
    2594:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2596:	69 a5       	ldd	r22, Y+41	; 0x29
    2598:	7a a5       	ldd	r23, Y+42	; 0x2a
    259a:	8b a5       	ldd	r24, Y+43	; 0x2b
    259c:	9c a5       	ldd	r25, Y+44	; 0x2c
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	40 e8       	ldi	r20, 0x80	; 128
    25a4:	5f e3       	ldi	r21, 0x3F	; 63
    25a6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    25aa:	88 23       	and	r24, r24
    25ac:	1c f4       	brge	.+6      	; 0x25b4 <CLCD_voidInit+0xe7c>
		__ticks = 1;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	88 a7       	std	Y+40, r24	; 0x28
    25b2:	91 c0       	rjmp	.+290    	; 0x26d6 <CLCD_voidInit+0xf9e>
	else if (__tmp > 255)
    25b4:	69 a5       	ldd	r22, Y+41	; 0x29
    25b6:	7a a5       	ldd	r23, Y+42	; 0x2a
    25b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    25ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	4f e7       	ldi	r20, 0x7F	; 127
    25c2:	53 e4       	ldi	r21, 0x43	; 67
    25c4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25c8:	18 16       	cp	r1, r24
    25ca:	0c f0       	brlt	.+2      	; 0x25ce <CLCD_voidInit+0xe96>
    25cc:	7b c0       	rjmp	.+246    	; 0x26c4 <CLCD_voidInit+0xf8c>
	{
		_delay_ms(__us / 1000.0);
    25ce:	6d a5       	ldd	r22, Y+45	; 0x2d
    25d0:	7e a5       	ldd	r23, Y+46	; 0x2e
    25d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    25d4:	98 a9       	ldd	r25, Y+48	; 0x30
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	4a e7       	ldi	r20, 0x7A	; 122
    25dc:	54 e4       	ldi	r21, 0x44	; 68
    25de:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8c a3       	std	Y+36, r24	; 0x24
    25e8:	9d a3       	std	Y+37, r25	; 0x25
    25ea:	ae a3       	std	Y+38, r26	; 0x26
    25ec:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ee:	6c a1       	ldd	r22, Y+36	; 0x24
    25f0:	7d a1       	ldd	r23, Y+37	; 0x25
    25f2:	8e a1       	ldd	r24, Y+38	; 0x26
    25f4:	9f a1       	ldd	r25, Y+39	; 0x27
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	4a e7       	ldi	r20, 0x7A	; 122
    25fc:	55 e4       	ldi	r21, 0x45	; 69
    25fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	88 a3       	std	Y+32, r24	; 0x20
    2608:	99 a3       	std	Y+33, r25	; 0x21
    260a:	aa a3       	std	Y+34, r26	; 0x22
    260c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    260e:	68 a1       	ldd	r22, Y+32	; 0x20
    2610:	79 a1       	ldd	r23, Y+33	; 0x21
    2612:	8a a1       	ldd	r24, Y+34	; 0x22
    2614:	9b a1       	ldd	r25, Y+35	; 0x23
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	40 e8       	ldi	r20, 0x80	; 128
    261c:	5f e3       	ldi	r21, 0x3F	; 63
    261e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2622:	88 23       	and	r24, r24
    2624:	2c f4       	brge	.+10     	; 0x2630 <CLCD_voidInit+0xef8>
		__ticks = 1;
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	9f 8f       	std	Y+31, r25	; 0x1f
    262c:	8e 8f       	std	Y+30, r24	; 0x1e
    262e:	3f c0       	rjmp	.+126    	; 0x26ae <CLCD_voidInit+0xf76>
	else if (__tmp > 65535)
    2630:	68 a1       	ldd	r22, Y+32	; 0x20
    2632:	79 a1       	ldd	r23, Y+33	; 0x21
    2634:	8a a1       	ldd	r24, Y+34	; 0x22
    2636:	9b a1       	ldd	r25, Y+35	; 0x23
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	3f ef       	ldi	r19, 0xFF	; 255
    263c:	4f e7       	ldi	r20, 0x7F	; 127
    263e:	57 e4       	ldi	r21, 0x47	; 71
    2640:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2644:	18 16       	cp	r1, r24
    2646:	4c f5       	brge	.+82     	; 0x269a <CLCD_voidInit+0xf62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2648:	6c a1       	ldd	r22, Y+36	; 0x24
    264a:	7d a1       	ldd	r23, Y+37	; 0x25
    264c:	8e a1       	ldd	r24, Y+38	; 0x26
    264e:	9f a1       	ldd	r25, Y+39	; 0x27
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e2       	ldi	r20, 0x20	; 32
    2656:	51 e4       	ldi	r21, 0x41	; 65
    2658:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	bc 01       	movw	r22, r24
    2662:	cd 01       	movw	r24, r26
    2664:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	9f 8f       	std	Y+31, r25	; 0x1f
    266e:	8e 8f       	std	Y+30, r24	; 0x1e
    2670:	0f c0       	rjmp	.+30     	; 0x2690 <CLCD_voidInit+0xf58>
    2672:	80 e9       	ldi	r24, 0x90	; 144
    2674:	91 e0       	ldi	r25, 0x01	; 1
    2676:	9d 8f       	std	Y+29, r25	; 0x1d
    2678:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    267a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    267c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    267e:	01 97       	sbiw	r24, 0x01	; 1
    2680:	f1 f7       	brne	.-4      	; 0x267e <CLCD_voidInit+0xf46>
    2682:	9d 8f       	std	Y+29, r25	; 0x1d
    2684:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2686:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2688:	9f 8d       	ldd	r25, Y+31	; 0x1f
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9f 8f       	std	Y+31, r25	; 0x1f
    268e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2690:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2692:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2694:	00 97       	sbiw	r24, 0x00	; 0
    2696:	69 f7       	brne	.-38     	; 0x2672 <CLCD_voidInit+0xf3a>
    2698:	24 c0       	rjmp	.+72     	; 0x26e2 <CLCD_voidInit+0xfaa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    269a:	68 a1       	ldd	r22, Y+32	; 0x20
    269c:	79 a1       	ldd	r23, Y+33	; 0x21
    269e:	8a a1       	ldd	r24, Y+34	; 0x22
    26a0:	9b a1       	ldd	r25, Y+35	; 0x23
    26a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26a6:	dc 01       	movw	r26, r24
    26a8:	cb 01       	movw	r24, r22
    26aa:	9f 8f       	std	Y+31, r25	; 0x1f
    26ac:	8e 8f       	std	Y+30, r24	; 0x1e
    26ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26b2:	9b 8f       	std	Y+27, r25	; 0x1b
    26b4:	8a 8f       	std	Y+26, r24	; 0x1a
    26b6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26b8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    26ba:	01 97       	sbiw	r24, 0x01	; 1
    26bc:	f1 f7       	brne	.-4      	; 0x26ba <CLCD_voidInit+0xf82>
    26be:	9b 8f       	std	Y+27, r25	; 0x1b
    26c0:	8a 8f       	std	Y+26, r24	; 0x1a
    26c2:	0f c0       	rjmp	.+30     	; 0x26e2 <CLCD_voidInit+0xfaa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    26c4:	69 a5       	ldd	r22, Y+41	; 0x29
    26c6:	7a a5       	ldd	r23, Y+42	; 0x2a
    26c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    26ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    26cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	88 a7       	std	Y+40, r24	; 0x28
    26d6:	88 a5       	ldd	r24, Y+40	; 0x28
    26d8:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26da:	89 8d       	ldd	r24, Y+25	; 0x19
    26dc:	8a 95       	dec	r24
    26de:	f1 f7       	brne	.-4      	; 0x26dc <CLCD_voidInit+0xfa4>
    26e0:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(150);
	CLCD_voidSendCommand(0x01);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	a6 e1       	ldi	r26, 0x16	; 22
    26ee:	b3 e4       	ldi	r27, 0x43	; 67
    26f0:	8d 8b       	std	Y+21, r24	; 0x15
    26f2:	9e 8b       	std	Y+22, r25	; 0x16
    26f4:	af 8b       	std	Y+23, r26	; 0x17
    26f6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26f8:	6d 89       	ldd	r22, Y+21	; 0x15
    26fa:	7e 89       	ldd	r23, Y+22	; 0x16
    26fc:	8f 89       	ldd	r24, Y+23	; 0x17
    26fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2700:	2b ea       	ldi	r18, 0xAB	; 171
    2702:	3a ea       	ldi	r19, 0xAA	; 170
    2704:	4a ea       	ldi	r20, 0xAA	; 170
    2706:	50 e4       	ldi	r21, 0x40	; 64
    2708:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	89 8b       	std	Y+17, r24	; 0x11
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	ab 8b       	std	Y+19, r26	; 0x13
    2716:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2718:	69 89       	ldd	r22, Y+17	; 0x11
    271a:	7a 89       	ldd	r23, Y+18	; 0x12
    271c:	8b 89       	ldd	r24, Y+19	; 0x13
    271e:	9c 89       	ldd	r25, Y+20	; 0x14
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	40 e8       	ldi	r20, 0x80	; 128
    2726:	5f e3       	ldi	r21, 0x3F	; 63
    2728:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    272c:	88 23       	and	r24, r24
    272e:	1c f4       	brge	.+6      	; 0x2736 <CLCD_voidInit+0xffe>
		__ticks = 1;
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	88 8b       	std	Y+16, r24	; 0x10
    2734:	91 c0       	rjmp	.+290    	; 0x2858 <CLCD_voidInit+0x1120>
	else if (__tmp > 255)
    2736:	69 89       	ldd	r22, Y+17	; 0x11
    2738:	7a 89       	ldd	r23, Y+18	; 0x12
    273a:	8b 89       	ldd	r24, Y+19	; 0x13
    273c:	9c 89       	ldd	r25, Y+20	; 0x14
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4f e7       	ldi	r20, 0x7F	; 127
    2744:	53 e4       	ldi	r21, 0x43	; 67
    2746:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    274a:	18 16       	cp	r1, r24
    274c:	0c f0       	brlt	.+2      	; 0x2750 <CLCD_voidInit+0x1018>
    274e:	7b c0       	rjmp	.+246    	; 0x2846 <CLCD_voidInit+0x110e>
	{
		_delay_ms(__us / 1000.0);
    2750:	6d 89       	ldd	r22, Y+21	; 0x15
    2752:	7e 89       	ldd	r23, Y+22	; 0x16
    2754:	8f 89       	ldd	r24, Y+23	; 0x17
    2756:	98 8d       	ldd	r25, Y+24	; 0x18
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	4a e7       	ldi	r20, 0x7A	; 122
    275e:	54 e4       	ldi	r21, 0x44	; 68
    2760:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	8c 87       	std	Y+12, r24	; 0x0c
    276a:	9d 87       	std	Y+13, r25	; 0x0d
    276c:	ae 87       	std	Y+14, r26	; 0x0e
    276e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2770:	6c 85       	ldd	r22, Y+12	; 0x0c
    2772:	7d 85       	ldd	r23, Y+13	; 0x0d
    2774:	8e 85       	ldd	r24, Y+14	; 0x0e
    2776:	9f 85       	ldd	r25, Y+15	; 0x0f
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	4a e7       	ldi	r20, 0x7A	; 122
    277e:	55 e4       	ldi	r21, 0x45	; 69
    2780:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	88 87       	std	Y+8, r24	; 0x08
    278a:	99 87       	std	Y+9, r25	; 0x09
    278c:	aa 87       	std	Y+10, r26	; 0x0a
    278e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2790:	68 85       	ldd	r22, Y+8	; 0x08
    2792:	79 85       	ldd	r23, Y+9	; 0x09
    2794:	8a 85       	ldd	r24, Y+10	; 0x0a
    2796:	9b 85       	ldd	r25, Y+11	; 0x0b
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	40 e8       	ldi	r20, 0x80	; 128
    279e:	5f e3       	ldi	r21, 0x3F	; 63
    27a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27a4:	88 23       	and	r24, r24
    27a6:	2c f4       	brge	.+10     	; 0x27b2 <CLCD_voidInit+0x107a>
		__ticks = 1;
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	90 e0       	ldi	r25, 0x00	; 0
    27ac:	9f 83       	std	Y+7, r25	; 0x07
    27ae:	8e 83       	std	Y+6, r24	; 0x06
    27b0:	3f c0       	rjmp	.+126    	; 0x2830 <CLCD_voidInit+0x10f8>
	else if (__tmp > 65535)
    27b2:	68 85       	ldd	r22, Y+8	; 0x08
    27b4:	79 85       	ldd	r23, Y+9	; 0x09
    27b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	3f ef       	ldi	r19, 0xFF	; 255
    27be:	4f e7       	ldi	r20, 0x7F	; 127
    27c0:	57 e4       	ldi	r21, 0x47	; 71
    27c2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27c6:	18 16       	cp	r1, r24
    27c8:	4c f5       	brge	.+82     	; 0x281c <CLCD_voidInit+0x10e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ca:	6c 85       	ldd	r22, Y+12	; 0x0c
    27cc:	7d 85       	ldd	r23, Y+13	; 0x0d
    27ce:	8e 85       	ldd	r24, Y+14	; 0x0e
    27d0:	9f 85       	ldd	r25, Y+15	; 0x0f
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	40 e2       	ldi	r20, 0x20	; 32
    27d8:	51 e4       	ldi	r21, 0x41	; 65
    27da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	9f 83       	std	Y+7, r25	; 0x07
    27f0:	8e 83       	std	Y+6, r24	; 0x06
    27f2:	0f c0       	rjmp	.+30     	; 0x2812 <CLCD_voidInit+0x10da>
    27f4:	80 e9       	ldi	r24, 0x90	; 144
    27f6:	91 e0       	ldi	r25, 0x01	; 1
    27f8:	9d 83       	std	Y+5, r25	; 0x05
    27fa:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	f1 f7       	brne	.-4      	; 0x2800 <CLCD_voidInit+0x10c8>
    2804:	9d 83       	std	Y+5, r25	; 0x05
    2806:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	8e 81       	ldd	r24, Y+6	; 0x06
    280a:	9f 81       	ldd	r25, Y+7	; 0x07
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	9f 83       	std	Y+7, r25	; 0x07
    2810:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2812:	8e 81       	ldd	r24, Y+6	; 0x06
    2814:	9f 81       	ldd	r25, Y+7	; 0x07
    2816:	00 97       	sbiw	r24, 0x00	; 0
    2818:	69 f7       	brne	.-38     	; 0x27f4 <CLCD_voidInit+0x10bc>
    281a:	24 c0       	rjmp	.+72     	; 0x2864 <CLCD_voidInit+0x112c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281c:	68 85       	ldd	r22, Y+8	; 0x08
    281e:	79 85       	ldd	r23, Y+9	; 0x09
    2820:	8a 85       	ldd	r24, Y+10	; 0x0a
    2822:	9b 85       	ldd	r25, Y+11	; 0x0b
    2824:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	9f 83       	std	Y+7, r25	; 0x07
    282e:	8e 83       	std	Y+6, r24	; 0x06
    2830:	8e 81       	ldd	r24, Y+6	; 0x06
    2832:	9f 81       	ldd	r25, Y+7	; 0x07
    2834:	9b 83       	std	Y+3, r25	; 0x03
    2836:	8a 83       	std	Y+2, r24	; 0x02
    2838:	8a 81       	ldd	r24, Y+2	; 0x02
    283a:	9b 81       	ldd	r25, Y+3	; 0x03
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	f1 f7       	brne	.-4      	; 0x283c <CLCD_voidInit+0x1104>
    2840:	9b 83       	std	Y+3, r25	; 0x03
    2842:	8a 83       	std	Y+2, r24	; 0x02
    2844:	0f c0       	rjmp	.+30     	; 0x2864 <CLCD_voidInit+0x112c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2846:	69 89       	ldd	r22, Y+17	; 0x11
    2848:	7a 89       	ldd	r23, Y+18	; 0x12
    284a:	8b 89       	ldd	r24, Y+19	; 0x13
    284c:	9c 89       	ldd	r25, Y+20	; 0x14
    284e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	88 8b       	std	Y+16, r24	; 0x10
    2858:	88 89       	ldd	r24, Y+16	; 0x10
    285a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	8a 95       	dec	r24
    2860:	f1 f7       	brne	.-4      	; 0x285e <CLCD_voidInit+0x1126>
    2862:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
}
    2864:	cc 53       	subi	r28, 0x3C	; 60
    2866:	df 4f       	sbci	r29, 0xFF	; 255
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    2872:	cf 91       	pop	r28
    2874:	df 91       	pop	r29
    2876:	1f 91       	pop	r17
    2878:	0f 91       	pop	r16
    287a:	08 95       	ret

0000287c <CLCD_voidSendString>:

void CLCD_voidSendString(u8 *pvString)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <CLCD_voidSendString+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	9a 83       	std	Y+2, r25	; 0x02
    2888:	89 83       	std	Y+1, r24	; 0x01
    288a:	0a c0       	rjmp	.+20     	; 0x28a0 <CLCD_voidSendString+0x24>
	while (*pvString !='\0')
	{
		CLCD_voidSendData(*pvString);
    288c:	e9 81       	ldd	r30, Y+1	; 0x01
    288e:	fa 81       	ldd	r31, Y+2	; 0x02
    2890:	80 81       	ld	r24, Z
    2892:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendData>
		pvString++;
    2896:	89 81       	ldd	r24, Y+1	; 0x01
    2898:	9a 81       	ldd	r25, Y+2	; 0x02
    289a:	01 96       	adiw	r24, 0x01	; 1
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150);
}

void CLCD_voidSendString(u8 *pvString)
{
	while (*pvString !='\0')
    28a0:	e9 81       	ldd	r30, Y+1	; 0x01
    28a2:	fa 81       	ldd	r31, Y+2	; 0x02
    28a4:	80 81       	ld	r24, Z
    28a6:	88 23       	and	r24, r24
    28a8:	89 f7       	brne	.-30     	; 0x288c <CLCD_voidSendString+0x10>
	{
		CLCD_voidSendData(*pvString);
		pvString++;
	}
}
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <CLCD_voidGoToPosition>:

void CLCD_voidGoToPosition (u8 CLCD_uRow, u8 CLCD_u8Col)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <CLCD_voidGoToPosition+0x6>
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <CLCD_voidGoToPosition+0x8>
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	89 83       	std	Y+1, r24	; 0x01
    28c2:	6a 83       	std	Y+2, r22	; 0x02
	switch(CLCD_uRow)
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	3c 83       	std	Y+4, r19	; 0x04
    28cc:	2b 83       	std	Y+3, r18	; 0x03
    28ce:	8b 81       	ldd	r24, Y+3	; 0x03
    28d0:	9c 81       	ldd	r25, Y+4	; 0x04
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	91 05       	cpc	r25, r1
    28d6:	d1 f0       	breq	.+52     	; 0x290c <CLCD_voidGoToPosition+0x58>
    28d8:	2b 81       	ldd	r18, Y+3	; 0x03
    28da:	3c 81       	ldd	r19, Y+4	; 0x04
    28dc:	22 30       	cpi	r18, 0x02	; 2
    28de:	31 05       	cpc	r19, r1
    28e0:	2c f4       	brge	.+10     	; 0x28ec <CLCD_voidGoToPosition+0x38>
    28e2:	8b 81       	ldd	r24, Y+3	; 0x03
    28e4:	9c 81       	ldd	r25, Y+4	; 0x04
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	61 f0       	breq	.+24     	; 0x2902 <CLCD_voidGoToPosition+0x4e>
    28ea:	1e c0       	rjmp	.+60     	; 0x2928 <CLCD_voidGoToPosition+0x74>
    28ec:	2b 81       	ldd	r18, Y+3	; 0x03
    28ee:	3c 81       	ldd	r19, Y+4	; 0x04
    28f0:	22 30       	cpi	r18, 0x02	; 2
    28f2:	31 05       	cpc	r19, r1
    28f4:	81 f0       	breq	.+32     	; 0x2916 <CLCD_voidGoToPosition+0x62>
    28f6:	8b 81       	ldd	r24, Y+3	; 0x03
    28f8:	9c 81       	ldd	r25, Y+4	; 0x04
    28fa:	83 30       	cpi	r24, 0x03	; 3
    28fc:	91 05       	cpc	r25, r1
    28fe:	81 f0       	breq	.+32     	; 0x2920 <CLCD_voidGoToPosition+0x6c>
    2900:	13 c0       	rjmp	.+38     	; 0x2928 <CLCD_voidGoToPosition+0x74>
	{
	case 0:
		CLCD_voidSendCommand(0x80 + CLCD_u8Col);break;
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	80 58       	subi	r24, 0x80	; 128
    2906:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    290a:	0e c0       	rjmp	.+28     	; 0x2928 <CLCD_voidGoToPosition+0x74>
	case 1:
		CLCD_voidSendCommand(0xC0 + CLCD_u8Col);break;
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	80 54       	subi	r24, 0x40	; 64
    2910:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    2914:	09 c0       	rjmp	.+18     	; 0x2928 <CLCD_voidGoToPosition+0x74>
	case 2:
		CLCD_voidSendCommand(0x94 + CLCD_u8Col);break;
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	8c 56       	subi	r24, 0x6C	; 108
    291a:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    291e:	04 c0       	rjmp	.+8      	; 0x2928 <CLCD_voidGoToPosition+0x74>
	case 3:
		CLCD_voidSendCommand(0xD4 + CLCD_u8Col);break;
    2920:	8a 81       	ldd	r24, Y+2	; 0x02
    2922:	8c 52       	subi	r24, 0x2C	; 44
    2924:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
	}
}
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <CLCD_voidWriteSpecialChar>:

void CLCD_voidWriteSpecialChar (u8 *pvPattern, u8 CLCD_u8BlockNum, u8 CLCD_u8x, u8 CLCD_u8y)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	cd b7       	in	r28, 0x3d	; 61
    293c:	de b7       	in	r29, 0x3e	; 62
    293e:	27 97       	sbiw	r28, 0x07	; 7
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	de bf       	out	0x3e, r29	; 62
    2946:	0f be       	out	0x3f, r0	; 63
    2948:	cd bf       	out	0x3d, r28	; 61
    294a:	9c 83       	std	Y+4, r25	; 0x04
    294c:	8b 83       	std	Y+3, r24	; 0x03
    294e:	6d 83       	std	Y+5, r22	; 0x05
    2950:	4e 83       	std	Y+6, r20	; 0x06
    2952:	2f 83       	std	Y+7, r18	; 0x07
	u8 CLCD_u8CGRAMAddress = 0, i = 0;
    2954:	1a 82       	std	Y+2, r1	; 0x02
    2956:	19 82       	std	Y+1, r1	; 0x01
	CLCD_u8CGRAMAddress = CLCD_u8BlockNum * 8;
    2958:	8d 81       	ldd	r24, Y+5	; 0x05
    295a:	88 2f       	mov	r24, r24
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	88 0f       	add	r24, r24
    2968:	99 1f       	adc	r25, r25
    296a:	8a 83       	std	Y+2, r24	; 0x02
	CLCD_voidSendCommand (CLCD_u8CGRAMAddress+64);
    296c:	8a 81       	ldd	r24, Y+2	; 0x02
    296e:	80 5c       	subi	r24, 0xC0	; 192
    2970:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
	for (i = 0; i < 8; i++)
    2974:	19 82       	std	Y+1, r1	; 0x01
    2976:	0e c0       	rjmp	.+28     	; 0x2994 <CLCD_voidWriteSpecialChar+0x5e>
	{
		CLCD_voidSendData(pvPattern[i]);
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	28 2f       	mov	r18, r24
    297c:	30 e0       	ldi	r19, 0x00	; 0
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	fc 01       	movw	r30, r24
    2984:	e2 0f       	add	r30, r18
    2986:	f3 1f       	adc	r31, r19
    2988:	80 81       	ld	r24, Z
    298a:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendData>
void CLCD_voidWriteSpecialChar (u8 *pvPattern, u8 CLCD_u8BlockNum, u8 CLCD_u8x, u8 CLCD_u8y)
{
	u8 CLCD_u8CGRAMAddress = 0, i = 0;
	CLCD_u8CGRAMAddress = CLCD_u8BlockNum * 8;
	CLCD_voidSendCommand (CLCD_u8CGRAMAddress+64);
	for (i = 0; i < 8; i++)
    298e:	89 81       	ldd	r24, Y+1	; 0x01
    2990:	8f 5f       	subi	r24, 0xFF	; 255
    2992:	89 83       	std	Y+1, r24	; 0x01
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	88 30       	cpi	r24, 0x08	; 8
    2998:	78 f3       	brcs	.-34     	; 0x2978 <CLCD_voidWriteSpecialChar+0x42>
	{
		CLCD_voidSendData(pvPattern[i]);
	}
	CLCD_voidGoToPosition(CLCD_u8x, CLCD_u8y);
    299a:	8e 81       	ldd	r24, Y+6	; 0x06
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <CLCD_voidGoToPosition>
	CLCD_voidSendData(pvPattern);
    29a2:	8b 81       	ldd	r24, Y+3	; 0x03
    29a4:	9c 81       	ldd	r25, Y+4	; 0x04
    29a6:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendData>
}
    29aa:	27 96       	adiw	r28, 0x07	; 7
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <CLCD_voidSendNum>:

void CLCD_voidSendNum(u32 Num) // convert int to string
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	cd b7       	in	r28, 0x3d	; 61
    29c2:	de b7       	in	r29, 0x3e	; 62
    29c4:	2e 97       	sbiw	r28, 0x0e	; 14
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	9e 87       	std	Y+14, r25	; 0x0e
    29d2:	8d 87       	std	Y+13, r24	; 0x0d
	u8 arr[10], i = 0, j = 0;
    29d4:	1a 82       	std	Y+2, r1	; 0x02
    29d6:	19 82       	std	Y+1, r1	; 0x01
	if (Num == 0)
    29d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    29da:	9e 85       	ldd	r25, Y+14	; 0x0e
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	11 f5       	brne	.+68     	; 0x2a24 <CLCD_voidSendNum+0x68>
	{
		CLCD_voidSendData('0');
    29e0:	80 e3       	ldi	r24, 0x30	; 48
    29e2:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendData>
    29e6:	39 c0       	rjmp	.+114    	; 0x2a5a <CLCD_voidSendNum+0x9e>
	}
	else
	{
		while(Num)
		{
			arr[i] = Num%10 + '0';
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	e8 2f       	mov	r30, r24
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    29f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    29f2:	2a e0       	ldi	r18, 0x0A	; 10
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	b9 01       	movw	r22, r18
    29f8:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    29fc:	28 2f       	mov	r18, r24
    29fe:	20 5d       	subi	r18, 0xD0	; 208
    2a00:	ce 01       	movw	r24, r28
    2a02:	03 96       	adiw	r24, 0x03	; 3
    2a04:	e8 0f       	add	r30, r24
    2a06:	f9 1f       	adc	r31, r25
    2a08:	20 83       	st	Z, r18
			Num/=10;
    2a0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a0e:	2a e0       	ldi	r18, 0x0A	; 10
    2a10:	30 e0       	ldi	r19, 0x00	; 0
    2a12:	b9 01       	movw	r22, r18
    2a14:	0e 94 47 1b 	call	0x368e	; 0x368e <__udivmodhi4>
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9e 87       	std	Y+14, r25	; 0x0e
    2a1c:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    2a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a20:	8f 5f       	subi	r24, 0xFF	; 255
    2a22:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while(Num)
    2a24:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a26:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	f1 f6       	brne	.-68     	; 0x29e8 <CLCD_voidSendNum+0x2c>
		{
			arr[i] = Num%10 + '0';
			Num/=10;
			i++;
		}
		for(j = i; j > 0; j--)
    2a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2e:	89 83       	std	Y+1, r24	; 0x01
    2a30:	11 c0       	rjmp	.+34     	; 0x2a54 <CLCD_voidSendNum+0x98>
		{
			CLCD_voidSendData(arr[j-1]);
    2a32:	89 81       	ldd	r24, Y+1	; 0x01
    2a34:	88 2f       	mov	r24, r24
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9c 01       	movw	r18, r24
    2a3a:	21 50       	subi	r18, 0x01	; 1
    2a3c:	30 40       	sbci	r19, 0x00	; 0
    2a3e:	ce 01       	movw	r24, r28
    2a40:	03 96       	adiw	r24, 0x03	; 3
    2a42:	fc 01       	movw	r30, r24
    2a44:	e2 0f       	add	r30, r18
    2a46:	f3 1f       	adc	r31, r19
    2a48:	80 81       	ld	r24, Z
    2a4a:	0e 94 56 09 	call	0x12ac	; 0x12ac <CLCD_voidSendData>
		{
			arr[i] = Num%10 + '0';
			Num/=10;
			i++;
		}
		for(j = i; j > 0; j--)
    2a4e:	89 81       	ldd	r24, Y+1	; 0x01
    2a50:	81 50       	subi	r24, 0x01	; 1
    2a52:	89 83       	std	Y+1, r24	; 0x01
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	88 23       	and	r24, r24
    2a58:	61 f7       	brne	.-40     	; 0x2a32 <CLCD_voidSendNum+0x76>
		{
			CLCD_voidSendData(arr[j-1]);
		}
	}
}
    2a5a:	2e 96       	adiw	r28, 0x0e	; 14
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	cf 91       	pop	r28
    2a68:	df 91       	pop	r29
    2a6a:	08 95       	ret

00002a6c <CLCD_voidClear>:

void CLCD_voidClear()
{
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	cd b7       	in	r28, 0x3d	; 61
    2a72:	de b7       	in	r29, 0x3e	; 62
    2a74:	2e 97       	sbiw	r28, 0x0e	; 14
    2a76:	0f b6       	in	r0, 0x3f	; 63
    2a78:	f8 94       	cli
    2a7a:	de bf       	out	0x3e, r29	; 62
    2a7c:	0f be       	out	0x3f, r0	; 63
    2a7e:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(0X01);
    2a80:	81 e0       	ldi	r24, 0x01	; 1
    2a82:	0e 94 0b 07 	call	0xe16	; 0xe16 <CLCD_voidSendCommand>
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	a0 e0       	ldi	r26, 0x00	; 0
    2a8c:	b0 e4       	ldi	r27, 0x40	; 64
    2a8e:	8b 87       	std	Y+11, r24	; 0x0b
    2a90:	9c 87       	std	Y+12, r25	; 0x0c
    2a92:	ad 87       	std	Y+13, r26	; 0x0d
    2a94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	4a e7       	ldi	r20, 0x7A	; 122
    2aa4:	55 e4       	ldi	r21, 0x45	; 69
    2aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	8f 83       	std	Y+7, r24	; 0x07
    2ab0:	98 87       	std	Y+8, r25	; 0x08
    2ab2:	a9 87       	std	Y+9, r26	; 0x09
    2ab4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ab6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ab8:	78 85       	ldd	r23, Y+8	; 0x08
    2aba:	89 85       	ldd	r24, Y+9	; 0x09
    2abc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2abe:	20 e0       	ldi	r18, 0x00	; 0
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	40 e8       	ldi	r20, 0x80	; 128
    2ac4:	5f e3       	ldi	r21, 0x3F	; 63
    2ac6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2aca:	88 23       	and	r24, r24
    2acc:	2c f4       	brge	.+10     	; 0x2ad8 <CLCD_voidClear+0x6c>
		__ticks = 1;
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9e 83       	std	Y+6, r25	; 0x06
    2ad4:	8d 83       	std	Y+5, r24	; 0x05
    2ad6:	3f c0       	rjmp	.+126    	; 0x2b56 <CLCD_voidClear+0xea>
	else if (__tmp > 65535)
    2ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    2ada:	78 85       	ldd	r23, Y+8	; 0x08
    2adc:	89 85       	ldd	r24, Y+9	; 0x09
    2ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	3f ef       	ldi	r19, 0xFF	; 255
    2ae4:	4f e7       	ldi	r20, 0x7F	; 127
    2ae6:	57 e4       	ldi	r21, 0x47	; 71
    2ae8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2aec:	18 16       	cp	r1, r24
    2aee:	4c f5       	brge	.+82     	; 0x2b42 <CLCD_voidClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2af2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2af4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2af6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	40 e2       	ldi	r20, 0x20	; 32
    2afe:	51 e4       	ldi	r21, 0x41	; 65
    2b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	9e 83       	std	Y+6, r25	; 0x06
    2b16:	8d 83       	std	Y+5, r24	; 0x05
    2b18:	0f c0       	rjmp	.+30     	; 0x2b38 <CLCD_voidClear+0xcc>
    2b1a:	80 e9       	ldi	r24, 0x90	; 144
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	9c 83       	std	Y+4, r25	; 0x04
    2b20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b22:	8b 81       	ldd	r24, Y+3	; 0x03
    2b24:	9c 81       	ldd	r25, Y+4	; 0x04
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <CLCD_voidClear+0xba>
    2b2a:	9c 83       	std	Y+4, r25	; 0x04
    2b2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2b30:	9e 81       	ldd	r25, Y+6	; 0x06
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9e 83       	std	Y+6, r25	; 0x06
    2b36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b38:	8d 81       	ldd	r24, Y+5	; 0x05
    2b3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	69 f7       	brne	.-38     	; 0x2b1a <CLCD_voidClear+0xae>
    2b40:	14 c0       	rjmp	.+40     	; 0x2b6a <CLCD_voidClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b42:	6f 81       	ldd	r22, Y+7	; 0x07
    2b44:	78 85       	ldd	r23, Y+8	; 0x08
    2b46:	89 85       	ldd	r24, Y+9	; 0x09
    2b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	9e 83       	std	Y+6, r25	; 0x06
    2b54:	8d 83       	std	Y+5, r24	; 0x05
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	9e 81       	ldd	r25, Y+6	; 0x06
    2b5a:	9a 83       	std	Y+2, r25	; 0x02
    2b5c:	89 83       	std	Y+1, r24	; 0x01
    2b5e:	89 81       	ldd	r24, Y+1	; 0x01
    2b60:	9a 81       	ldd	r25, Y+2	; 0x02
    2b62:	01 97       	sbiw	r24, 0x01	; 1
    2b64:	f1 f7       	brne	.-4      	; 0x2b62 <CLCD_voidClear+0xf6>
    2b66:	9a 83       	std	Y+2, r25	; 0x02
    2b68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2b6a:	2e 96       	adiw	r28, 0x0e	; 14
    2b6c:	0f b6       	in	r0, 0x3f	; 63
    2b6e:	f8 94       	cli
    2b70:	de bf       	out	0x3e, r29	; 62
    2b72:	0f be       	out	0x3f, r0	; 63
    2b74:	cd bf       	out	0x3d, r28	; 61
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <DIO_voidSetPinDirection>:


                         /*************** PIN APIS ***************/

void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	cd b7       	in	r28, 0x3d	; 61
    2b82:	de b7       	in	r29, 0x3e	; 62
    2b84:	27 97       	sbiw	r28, 0x07	; 7
    2b86:	0f b6       	in	r0, 0x3f	; 63
    2b88:	f8 94       	cli
    2b8a:	de bf       	out	0x3e, r29	; 62
    2b8c:	0f be       	out	0x3f, r0	; 63
    2b8e:	cd bf       	out	0x3d, r28	; 61
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	6a 83       	std	Y+2, r22	; 0x02
    2b94:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	88 30       	cpi	r24, 0x08	; 8
    2b9a:	08 f0       	brcs	.+2      	; 0x2b9e <DIO_voidSetPinDirection+0x22>
    2b9c:	ea c0       	rjmp	.+468    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
	{
		if(copy_u8PinDirection == DIO_PIN_OUTPUT)
    2b9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba0:	81 30       	cpi	r24, 0x01	; 1
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <DIO_voidSetPinDirection+0x2a>
    2ba4:	6f c0       	rjmp	.+222    	; 0x2c84 <DIO_voidSetPinDirection+0x108>
			switch(copy_u8PortId)
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	28 2f       	mov	r18, r24
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	3f 83       	std	Y+7, r19	; 0x07
    2bae:	2e 83       	std	Y+6, r18	; 0x06
    2bb0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb4:	81 30       	cpi	r24, 0x01	; 1
    2bb6:	91 05       	cpc	r25, r1
    2bb8:	49 f1       	breq	.+82     	; 0x2c0c <DIO_voidSetPinDirection+0x90>
    2bba:	2e 81       	ldd	r18, Y+6	; 0x06
    2bbc:	3f 81       	ldd	r19, Y+7	; 0x07
    2bbe:	22 30       	cpi	r18, 0x02	; 2
    2bc0:	31 05       	cpc	r19, r1
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <DIO_voidSetPinDirection+0x52>
    2bc4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	61 f0       	breq	.+24     	; 0x2be4 <DIO_voidSetPinDirection+0x68>
    2bcc:	d2 c0       	rjmp	.+420    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
    2bce:	2e 81       	ldd	r18, Y+6	; 0x06
    2bd0:	3f 81       	ldd	r19, Y+7	; 0x07
    2bd2:	22 30       	cpi	r18, 0x02	; 2
    2bd4:	31 05       	cpc	r19, r1
    2bd6:	71 f1       	breq	.+92     	; 0x2c34 <DIO_voidSetPinDirection+0xb8>
    2bd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bda:	9f 81       	ldd	r25, Y+7	; 0x07
    2bdc:	83 30       	cpi	r24, 0x03	; 3
    2bde:	91 05       	cpc	r25, r1
    2be0:	e9 f1       	breq	.+122    	; 0x2c5c <DIO_voidSetPinDirection+0xe0>
    2be2:	c7 c0       	rjmp	.+398    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:SET_BIT(DDRA,copy_u8PinId);break;
    2be4:	aa e3       	ldi	r26, 0x3A	; 58
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	ea e3       	ldi	r30, 0x3A	; 58
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	48 2f       	mov	r20, r24
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	28 2f       	mov	r18, r24
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	90 e0       	ldi	r25, 0x00	; 0
    2bfa:	02 2e       	mov	r0, r18
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <DIO_voidSetPinDirection+0x86>
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	0a 94       	dec	r0
    2c04:	e2 f7       	brpl	.-8      	; 0x2bfe <DIO_voidSetPinDirection+0x82>
    2c06:	84 2b       	or	r24, r20
    2c08:	8c 93       	st	X, r24
    2c0a:	b3 c0       	rjmp	.+358    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:SET_BIT(DDRB,copy_u8PinId);break;
    2c0c:	a7 e3       	ldi	r26, 0x37	; 55
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e7 e3       	ldi	r30, 0x37	; 55
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	48 2f       	mov	r20, r24
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	02 2e       	mov	r0, r18
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <DIO_voidSetPinDirection+0xae>
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	0a 94       	dec	r0
    2c2c:	e2 f7       	brpl	.-8      	; 0x2c26 <DIO_voidSetPinDirection+0xaa>
    2c2e:	84 2b       	or	r24, r20
    2c30:	8c 93       	st	X, r24
    2c32:	9f c0       	rjmp	.+318    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:SET_BIT(DDRC,copy_u8PinId);break;
    2c34:	a4 e3       	ldi	r26, 0x34	; 52
    2c36:	b0 e0       	ldi	r27, 0x00	; 0
    2c38:	e4 e3       	ldi	r30, 0x34	; 52
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	80 81       	ld	r24, Z
    2c3e:	48 2f       	mov	r20, r24
    2c40:	8a 81       	ldd	r24, Y+2	; 0x02
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	02 2e       	mov	r0, r18
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <DIO_voidSetPinDirection+0xd6>
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	0a 94       	dec	r0
    2c54:	e2 f7       	brpl	.-8      	; 0x2c4e <DIO_voidSetPinDirection+0xd2>
    2c56:	84 2b       	or	r24, r20
    2c58:	8c 93       	st	X, r24
    2c5a:	8b c0       	rjmp	.+278    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:SET_BIT(DDRD,copy_u8PinId);break;
    2c5c:	a1 e3       	ldi	r26, 0x31	; 49
    2c5e:	b0 e0       	ldi	r27, 0x00	; 0
    2c60:	e1 e3       	ldi	r30, 0x31	; 49
    2c62:	f0 e0       	ldi	r31, 0x00	; 0
    2c64:	80 81       	ld	r24, Z
    2c66:	48 2f       	mov	r20, r24
    2c68:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	02 2e       	mov	r0, r18
    2c74:	02 c0       	rjmp	.+4      	; 0x2c7a <DIO_voidSetPinDirection+0xfe>
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	0a 94       	dec	r0
    2c7c:	e2 f7       	brpl	.-8      	; 0x2c76 <DIO_voidSetPinDirection+0xfa>
    2c7e:	84 2b       	or	r24, r20
    2c80:	8c 93       	st	X, r24
    2c82:	77 c0       	rjmp	.+238    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			}
		else if(copy_u8PinDirection == DIO_PIN_INPUT)
    2c84:	8b 81       	ldd	r24, Y+3	; 0x03
    2c86:	88 23       	and	r24, r24
    2c88:	09 f0       	breq	.+2      	; 0x2c8c <DIO_voidSetPinDirection+0x110>
    2c8a:	73 c0       	rjmp	.+230    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			switch(copy_u8PortId)
    2c8c:	89 81       	ldd	r24, Y+1	; 0x01
    2c8e:	28 2f       	mov	r18, r24
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	3d 83       	std	Y+5, r19	; 0x05
    2c94:	2c 83       	std	Y+4, r18	; 0x04
    2c96:	8c 81       	ldd	r24, Y+4	; 0x04
    2c98:	9d 81       	ldd	r25, Y+5	; 0x05
    2c9a:	81 30       	cpi	r24, 0x01	; 1
    2c9c:	91 05       	cpc	r25, r1
    2c9e:	59 f1       	breq	.+86     	; 0x2cf6 <DIO_voidSetPinDirection+0x17a>
    2ca0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ca2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ca4:	22 30       	cpi	r18, 0x02	; 2
    2ca6:	31 05       	cpc	r19, r1
    2ca8:	2c f4       	brge	.+10     	; 0x2cb4 <DIO_voidSetPinDirection+0x138>
    2caa:	8c 81       	ldd	r24, Y+4	; 0x04
    2cac:	9d 81       	ldd	r25, Y+5	; 0x05
    2cae:	00 97       	sbiw	r24, 0x00	; 0
    2cb0:	69 f0       	breq	.+26     	; 0x2ccc <DIO_voidSetPinDirection+0x150>
    2cb2:	5f c0       	rjmp	.+190    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
    2cb4:	2c 81       	ldd	r18, Y+4	; 0x04
    2cb6:	3d 81       	ldd	r19, Y+5	; 0x05
    2cb8:	22 30       	cpi	r18, 0x02	; 2
    2cba:	31 05       	cpc	r19, r1
    2cbc:	89 f1       	breq	.+98     	; 0x2d20 <DIO_voidSetPinDirection+0x1a4>
    2cbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2cc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc2:	83 30       	cpi	r24, 0x03	; 3
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	09 f4       	brne	.+2      	; 0x2cca <DIO_voidSetPinDirection+0x14e>
    2cc8:	40 c0       	rjmp	.+128    	; 0x2d4a <DIO_voidSetPinDirection+0x1ce>
    2cca:	53 c0       	rjmp	.+166    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:CLR_BIT(DDRA,copy_u8PinId);break;
    2ccc:	aa e3       	ldi	r26, 0x3A	; 58
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ea e3       	ldi	r30, 0x3A	; 58
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	48 2f       	mov	r20, r24
    2cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cda:	28 2f       	mov	r18, r24
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	02 2e       	mov	r0, r18
    2ce4:	02 c0       	rjmp	.+4      	; 0x2cea <DIO_voidSetPinDirection+0x16e>
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	0a 94       	dec	r0
    2cec:	e2 f7       	brpl	.-8      	; 0x2ce6 <DIO_voidSetPinDirection+0x16a>
    2cee:	80 95       	com	r24
    2cf0:	84 23       	and	r24, r20
    2cf2:	8c 93       	st	X, r24
    2cf4:	3e c0       	rjmp	.+124    	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:CLR_BIT(DDRB,copy_u8PinId);break;
    2cf6:	a7 e3       	ldi	r26, 0x37	; 55
    2cf8:	b0 e0       	ldi	r27, 0x00	; 0
    2cfa:	e7 e3       	ldi	r30, 0x37	; 55
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	48 2f       	mov	r20, r24
    2d02:	8a 81       	ldd	r24, Y+2	; 0x02
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	90 e0       	ldi	r25, 0x00	; 0
    2d0c:	02 2e       	mov	r0, r18
    2d0e:	02 c0       	rjmp	.+4      	; 0x2d14 <DIO_voidSetPinDirection+0x198>
    2d10:	88 0f       	add	r24, r24
    2d12:	99 1f       	adc	r25, r25
    2d14:	0a 94       	dec	r0
    2d16:	e2 f7       	brpl	.-8      	; 0x2d10 <DIO_voidSetPinDirection+0x194>
    2d18:	80 95       	com	r24
    2d1a:	84 23       	and	r24, r20
    2d1c:	8c 93       	st	X, r24
    2d1e:	29 c0       	rjmp	.+82     	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:CLR_BIT(DDRC,copy_u8PinId);break;
    2d20:	a4 e3       	ldi	r26, 0x34	; 52
    2d22:	b0 e0       	ldi	r27, 0x00	; 0
    2d24:	e4 e3       	ldi	r30, 0x34	; 52
    2d26:	f0 e0       	ldi	r31, 0x00	; 0
    2d28:	80 81       	ld	r24, Z
    2d2a:	48 2f       	mov	r20, r24
    2d2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2e:	28 2f       	mov	r18, r24
    2d30:	30 e0       	ldi	r19, 0x00	; 0
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	02 2e       	mov	r0, r18
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <DIO_voidSetPinDirection+0x1c2>
    2d3a:	88 0f       	add	r24, r24
    2d3c:	99 1f       	adc	r25, r25
    2d3e:	0a 94       	dec	r0
    2d40:	e2 f7       	brpl	.-8      	; 0x2d3a <DIO_voidSetPinDirection+0x1be>
    2d42:	80 95       	com	r24
    2d44:	84 23       	and	r24, r20
    2d46:	8c 93       	st	X, r24
    2d48:	14 c0       	rjmp	.+40     	; 0x2d72 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:CLR_BIT(DDRD,copy_u8PinId);break;
    2d4a:	a1 e3       	ldi	r26, 0x31	; 49
    2d4c:	b0 e0       	ldi	r27, 0x00	; 0
    2d4e:	e1 e3       	ldi	r30, 0x31	; 49
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	80 81       	ld	r24, Z
    2d54:	48 2f       	mov	r20, r24
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	28 2f       	mov	r18, r24
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	81 e0       	ldi	r24, 0x01	; 1
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	02 2e       	mov	r0, r18
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <DIO_voidSetPinDirection+0x1ec>
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	0a 94       	dec	r0
    2d6a:	e2 f7       	brpl	.-8      	; 0x2d64 <DIO_voidSetPinDirection+0x1e8>
    2d6c:	80 95       	com	r24
    2d6e:	84 23       	and	r24, r20
    2d70:	8c 93       	st	X, r24
			}
	}

}
    2d72:	27 96       	adiw	r28, 0x07	; 7
    2d74:	0f b6       	in	r0, 0x3f	; 63
    2d76:	f8 94       	cli
    2d78:	de bf       	out	0x3e, r29	; 62
    2d7a:	0f be       	out	0x3f, r0	; 63
    2d7c:	cd bf       	out	0x3d, r28	; 61
    2d7e:	cf 91       	pop	r28
    2d80:	df 91       	pop	r29
    2d82:	08 95       	ret

00002d84 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    2d84:	df 93       	push	r29
    2d86:	cf 93       	push	r28
    2d88:	cd b7       	in	r28, 0x3d	; 61
    2d8a:	de b7       	in	r29, 0x3e	; 62
    2d8c:	27 97       	sbiw	r28, 0x07	; 7
    2d8e:	0f b6       	in	r0, 0x3f	; 63
    2d90:	f8 94       	cli
    2d92:	de bf       	out	0x3e, r29	; 62
    2d94:	0f be       	out	0x3f, r0	; 63
    2d96:	cd bf       	out	0x3d, r28	; 61
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	6a 83       	std	Y+2, r22	; 0x02
    2d9c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    2d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2da0:	88 30       	cpi	r24, 0x08	; 8
    2da2:	08 f0       	brcs	.+2      	; 0x2da6 <DIO_voidSetPinValue+0x22>
    2da4:	ee c0       	rjmp	.+476    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
	{
		if(copy_u8PinValue == DIO_PIN_HIGH)
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	09 f0       	breq	.+2      	; 0x2dae <DIO_voidSetPinValue+0x2a>
    2dac:	6f c0       	rjmp	.+222    	; 0x2e8c <DIO_voidSetPinValue+0x108>
		{
			switch(copy_u8PortId)
    2dae:	89 81       	ldd	r24, Y+1	; 0x01
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	3f 83       	std	Y+7, r19	; 0x07
    2db6:	2e 83       	std	Y+6, r18	; 0x06
    2db8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dba:	9f 81       	ldd	r25, Y+7	; 0x07
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	49 f1       	breq	.+82     	; 0x2e14 <DIO_voidSetPinValue+0x90>
    2dc2:	2e 81       	ldd	r18, Y+6	; 0x06
    2dc4:	3f 81       	ldd	r19, Y+7	; 0x07
    2dc6:	22 30       	cpi	r18, 0x02	; 2
    2dc8:	31 05       	cpc	r19, r1
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <DIO_voidSetPinValue+0x52>
    2dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2dce:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	61 f0       	breq	.+24     	; 0x2dec <DIO_voidSetPinValue+0x68>
    2dd4:	d6 c0       	rjmp	.+428    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
    2dd6:	2e 81       	ldd	r18, Y+6	; 0x06
    2dd8:	3f 81       	ldd	r19, Y+7	; 0x07
    2dda:	22 30       	cpi	r18, 0x02	; 2
    2ddc:	31 05       	cpc	r19, r1
    2dde:	71 f1       	breq	.+92     	; 0x2e3c <DIO_voidSetPinValue+0xb8>
    2de0:	8e 81       	ldd	r24, Y+6	; 0x06
    2de2:	9f 81       	ldd	r25, Y+7	; 0x07
    2de4:	83 30       	cpi	r24, 0x03	; 3
    2de6:	91 05       	cpc	r25, r1
    2de8:	e9 f1       	breq	.+122    	; 0x2e64 <DIO_voidSetPinValue+0xe0>
    2dea:	cb c0       	rjmp	.+406    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA:SET_BIT(PORTA,copy_u8PinId);break;
    2dec:	ab e3       	ldi	r26, 0x3B	; 59
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	eb e3       	ldi	r30, 0x3B	; 59
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	80 81       	ld	r24, Z
    2df6:	48 2f       	mov	r20, r24
    2df8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfa:	28 2f       	mov	r18, r24
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	02 2e       	mov	r0, r18
    2e04:	02 c0       	rjmp	.+4      	; 0x2e0a <DIO_voidSetPinValue+0x86>
    2e06:	88 0f       	add	r24, r24
    2e08:	99 1f       	adc	r25, r25
    2e0a:	0a 94       	dec	r0
    2e0c:	e2 f7       	brpl	.-8      	; 0x2e06 <DIO_voidSetPinValue+0x82>
    2e0e:	84 2b       	or	r24, r20
    2e10:	8c 93       	st	X, r24
    2e12:	b7 c0       	rjmp	.+366    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTB:SET_BIT(PORTB,copy_u8PinId);break;
    2e14:	a8 e3       	ldi	r26, 0x38	; 56
    2e16:	b0 e0       	ldi	r27, 0x00	; 0
    2e18:	e8 e3       	ldi	r30, 0x38	; 56
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	48 2f       	mov	r20, r24
    2e20:	8a 81       	ldd	r24, Y+2	; 0x02
    2e22:	28 2f       	mov	r18, r24
    2e24:	30 e0       	ldi	r19, 0x00	; 0
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	90 e0       	ldi	r25, 0x00	; 0
    2e2a:	02 2e       	mov	r0, r18
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <DIO_voidSetPinValue+0xae>
    2e2e:	88 0f       	add	r24, r24
    2e30:	99 1f       	adc	r25, r25
    2e32:	0a 94       	dec	r0
    2e34:	e2 f7       	brpl	.-8      	; 0x2e2e <DIO_voidSetPinValue+0xaa>
    2e36:	84 2b       	or	r24, r20
    2e38:	8c 93       	st	X, r24
    2e3a:	a3 c0       	rjmp	.+326    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTC:SET_BIT(PORTC,copy_u8PinId);break;
    2e3c:	a5 e3       	ldi	r26, 0x35	; 53
    2e3e:	b0 e0       	ldi	r27, 0x00	; 0
    2e40:	e5 e3       	ldi	r30, 0x35	; 53
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	80 81       	ld	r24, Z
    2e46:	48 2f       	mov	r20, r24
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	02 2e       	mov	r0, r18
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <DIO_voidSetPinValue+0xd6>
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	0a 94       	dec	r0
    2e5c:	e2 f7       	brpl	.-8      	; 0x2e56 <DIO_voidSetPinValue+0xd2>
    2e5e:	84 2b       	or	r24, r20
    2e60:	8c 93       	st	X, r24
    2e62:	8f c0       	rjmp	.+286    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTD:SET_BIT(PORTD,copy_u8PinId);break;
    2e64:	a2 e3       	ldi	r26, 0x32	; 50
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	e2 e3       	ldi	r30, 0x32	; 50
    2e6a:	f0 e0       	ldi	r31, 0x00	; 0
    2e6c:	80 81       	ld	r24, Z
    2e6e:	48 2f       	mov	r20, r24
    2e70:	8a 81       	ldd	r24, Y+2	; 0x02
    2e72:	28 2f       	mov	r18, r24
    2e74:	30 e0       	ldi	r19, 0x00	; 0
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	02 2e       	mov	r0, r18
    2e7c:	02 c0       	rjmp	.+4      	; 0x2e82 <DIO_voidSetPinValue+0xfe>
    2e7e:	88 0f       	add	r24, r24
    2e80:	99 1f       	adc	r25, r25
    2e82:	0a 94       	dec	r0
    2e84:	e2 f7       	brpl	.-8      	; 0x2e7e <DIO_voidSetPinValue+0xfa>
    2e86:	84 2b       	or	r24, r20
    2e88:	8c 93       	st	X, r24
    2e8a:	7b c0       	rjmp	.+246    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
			}
		}

		else if(copy_u8PinId<=7)
    2e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8e:	88 30       	cpi	r24, 0x08	; 8
    2e90:	08 f0       	brcs	.+2      	; 0x2e94 <DIO_voidSetPinValue+0x110>
    2e92:	77 c0       	rjmp	.+238    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
		{
			if(copy_u8PinValue == DIO_PIN_LOW)
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	88 23       	and	r24, r24
    2e98:	09 f0       	breq	.+2      	; 0x2e9c <DIO_voidSetPinValue+0x118>
    2e9a:	73 c0       	rjmp	.+230    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
			{
				switch(copy_u8PortId)
    2e9c:	89 81       	ldd	r24, Y+1	; 0x01
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	3d 83       	std	Y+5, r19	; 0x05
    2ea4:	2c 83       	std	Y+4, r18	; 0x04
    2ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eaa:	81 30       	cpi	r24, 0x01	; 1
    2eac:	91 05       	cpc	r25, r1
    2eae:	59 f1       	breq	.+86     	; 0x2f06 <DIO_voidSetPinValue+0x182>
    2eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb4:	22 30       	cpi	r18, 0x02	; 2
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	2c f4       	brge	.+10     	; 0x2ec4 <DIO_voidSetPinValue+0x140>
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	69 f0       	breq	.+26     	; 0x2edc <DIO_voidSetPinValue+0x158>
    2ec2:	5f c0       	rjmp	.+190    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
    2ec4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec8:	22 30       	cpi	r18, 0x02	; 2
    2eca:	31 05       	cpc	r19, r1
    2ecc:	89 f1       	breq	.+98     	; 0x2f30 <DIO_voidSetPinValue+0x1ac>
    2ece:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	09 f4       	brne	.+2      	; 0x2eda <DIO_voidSetPinValue+0x156>
    2ed8:	40 c0       	rjmp	.+128    	; 0x2f5a <DIO_voidSetPinValue+0x1d6>
    2eda:	53 c0       	rjmp	.+166    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
				{
				case DIO_PORTA:CLR_BIT(PORTA,copy_u8PinId);break;
    2edc:	ab e3       	ldi	r26, 0x3B	; 59
    2ede:	b0 e0       	ldi	r27, 0x00	; 0
    2ee0:	eb e3       	ldi	r30, 0x3B	; 59
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	48 2f       	mov	r20, r24
    2ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eea:	28 2f       	mov	r18, r24
    2eec:	30 e0       	ldi	r19, 0x00	; 0
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	02 2e       	mov	r0, r18
    2ef4:	02 c0       	rjmp	.+4      	; 0x2efa <DIO_voidSetPinValue+0x176>
    2ef6:	88 0f       	add	r24, r24
    2ef8:	99 1f       	adc	r25, r25
    2efa:	0a 94       	dec	r0
    2efc:	e2 f7       	brpl	.-8      	; 0x2ef6 <DIO_voidSetPinValue+0x172>
    2efe:	80 95       	com	r24
    2f00:	84 23       	and	r24, r20
    2f02:	8c 93       	st	X, r24
    2f04:	3e c0       	rjmp	.+124    	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTB:CLR_BIT(PORTB,copy_u8PinId);break;
    2f06:	a8 e3       	ldi	r26, 0x38	; 56
    2f08:	b0 e0       	ldi	r27, 0x00	; 0
    2f0a:	e8 e3       	ldi	r30, 0x38	; 56
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	48 2f       	mov	r20, r24
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	28 2f       	mov	r18, r24
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	02 2e       	mov	r0, r18
    2f1e:	02 c0       	rjmp	.+4      	; 0x2f24 <DIO_voidSetPinValue+0x1a0>
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	0a 94       	dec	r0
    2f26:	e2 f7       	brpl	.-8      	; 0x2f20 <DIO_voidSetPinValue+0x19c>
    2f28:	80 95       	com	r24
    2f2a:	84 23       	and	r24, r20
    2f2c:	8c 93       	st	X, r24
    2f2e:	29 c0       	rjmp	.+82     	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTC:CLR_BIT(PORTC,copy_u8PinId);break;
    2f30:	a5 e3       	ldi	r26, 0x35	; 53
    2f32:	b0 e0       	ldi	r27, 0x00	; 0
    2f34:	e5 e3       	ldi	r30, 0x35	; 53
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	80 81       	ld	r24, Z
    2f3a:	48 2f       	mov	r20, r24
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	28 2f       	mov	r18, r24
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	81 e0       	ldi	r24, 0x01	; 1
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	02 2e       	mov	r0, r18
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <DIO_voidSetPinValue+0x1ca>
    2f4a:	88 0f       	add	r24, r24
    2f4c:	99 1f       	adc	r25, r25
    2f4e:	0a 94       	dec	r0
    2f50:	e2 f7       	brpl	.-8      	; 0x2f4a <DIO_voidSetPinValue+0x1c6>
    2f52:	80 95       	com	r24
    2f54:	84 23       	and	r24, r20
    2f56:	8c 93       	st	X, r24
    2f58:	14 c0       	rjmp	.+40     	; 0x2f82 <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTD:CLR_BIT(PORTD,copy_u8PinId);break;
    2f5a:	a2 e3       	ldi	r26, 0x32	; 50
    2f5c:	b0 e0       	ldi	r27, 0x00	; 0
    2f5e:	e2 e3       	ldi	r30, 0x32	; 50
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	48 2f       	mov	r20, r24
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	28 2f       	mov	r18, r24
    2f6a:	30 e0       	ldi	r19, 0x00	; 0
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	02 2e       	mov	r0, r18
    2f72:	02 c0       	rjmp	.+4      	; 0x2f78 <DIO_voidSetPinValue+0x1f4>
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	0a 94       	dec	r0
    2f7a:	e2 f7       	brpl	.-8      	; 0x2f74 <DIO_voidSetPinValue+0x1f0>
    2f7c:	80 95       	com	r24
    2f7e:	84 23       	and	r24, r20
    2f80:	8c 93       	st	X, r24
				}
			}
		}
	}
}
    2f82:	27 96       	adiw	r28, 0x07	; 7
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 *copy_pu8_PinValue)
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	00 d0       	rcall	.+0      	; 0x2f9a <DIO_voidGetPinValue+0x6>
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <DIO_voidGetPinValue+0x8>
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <DIO_voidGetPinValue+0xa>
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	6a 83       	std	Y+2, r22	; 0x02
    2fa6:	5c 83       	std	Y+4, r21	; 0x04
    2fa8:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	88 30       	cpi	r24, 0x08	; 8
    2fae:	08 f0       	brcs	.+2      	; 0x2fb2 <DIO_voidGetPinValue+0x1e>
    2fb0:	70 c0       	rjmp	.+224    	; 0x3092 <DIO_voidGetPinValue+0xfe>
	{
		switch(copy_u8PortId)
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	28 2f       	mov	r18, r24
    2fb6:	30 e0       	ldi	r19, 0x00	; 0
    2fb8:	3e 83       	std	Y+6, r19	; 0x06
    2fba:	2d 83       	std	Y+5, r18	; 0x05
    2fbc:	4d 81       	ldd	r20, Y+5	; 0x05
    2fbe:	5e 81       	ldd	r21, Y+6	; 0x06
    2fc0:	41 30       	cpi	r20, 0x01	; 1
    2fc2:	51 05       	cpc	r21, r1
    2fc4:	59 f1       	breq	.+86     	; 0x301c <DIO_voidGetPinValue+0x88>
    2fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fca:	82 30       	cpi	r24, 0x02	; 2
    2fcc:	91 05       	cpc	r25, r1
    2fce:	34 f4       	brge	.+12     	; 0x2fdc <DIO_voidGetPinValue+0x48>
    2fd0:	2d 81       	ldd	r18, Y+5	; 0x05
    2fd2:	3e 81       	ldd	r19, Y+6	; 0x06
    2fd4:	21 15       	cp	r18, r1
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	69 f0       	breq	.+26     	; 0x2ff4 <DIO_voidGetPinValue+0x60>
    2fda:	5b c0       	rjmp	.+182    	; 0x3092 <DIO_voidGetPinValue+0xfe>
    2fdc:	4d 81       	ldd	r20, Y+5	; 0x05
    2fde:	5e 81       	ldd	r21, Y+6	; 0x06
    2fe0:	42 30       	cpi	r20, 0x02	; 2
    2fe2:	51 05       	cpc	r21, r1
    2fe4:	79 f1       	breq	.+94     	; 0x3044 <DIO_voidGetPinValue+0xb0>
    2fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fea:	83 30       	cpi	r24, 0x03	; 3
    2fec:	91 05       	cpc	r25, r1
    2fee:	09 f4       	brne	.+2      	; 0x2ff2 <DIO_voidGetPinValue+0x5e>
    2ff0:	3d c0       	rjmp	.+122    	; 0x306c <DIO_voidGetPinValue+0xd8>
    2ff2:	4f c0       	rjmp	.+158    	; 0x3092 <DIO_voidGetPinValue+0xfe>
		{
		case DIO_PORTA:*copy_pu8_PinValue = GET_BIT(PINA,copy_u8PinId);break;
    2ff4:	e9 e3       	ldi	r30, 0x39	; 57
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	28 2f       	mov	r18, r24
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    3000:	88 2f       	mov	r24, r24
    3002:	90 e0       	ldi	r25, 0x00	; 0
    3004:	a9 01       	movw	r20, r18
    3006:	02 c0       	rjmp	.+4      	; 0x300c <DIO_voidGetPinValue+0x78>
    3008:	55 95       	asr	r21
    300a:	47 95       	ror	r20
    300c:	8a 95       	dec	r24
    300e:	e2 f7       	brpl	.-8      	; 0x3008 <DIO_voidGetPinValue+0x74>
    3010:	ca 01       	movw	r24, r20
    3012:	81 70       	andi	r24, 0x01	; 1
    3014:	eb 81       	ldd	r30, Y+3	; 0x03
    3016:	fc 81       	ldd	r31, Y+4	; 0x04
    3018:	80 83       	st	Z, r24
    301a:	3b c0       	rjmp	.+118    	; 0x3092 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTB:*copy_pu8_PinValue = GET_BIT(PINB,copy_u8PinId);break;
    301c:	e6 e3       	ldi	r30, 0x36	; 54
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	28 2f       	mov	r18, r24
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	8a 81       	ldd	r24, Y+2	; 0x02
    3028:	88 2f       	mov	r24, r24
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	a9 01       	movw	r20, r18
    302e:	02 c0       	rjmp	.+4      	; 0x3034 <DIO_voidGetPinValue+0xa0>
    3030:	55 95       	asr	r21
    3032:	47 95       	ror	r20
    3034:	8a 95       	dec	r24
    3036:	e2 f7       	brpl	.-8      	; 0x3030 <DIO_voidGetPinValue+0x9c>
    3038:	ca 01       	movw	r24, r20
    303a:	81 70       	andi	r24, 0x01	; 1
    303c:	eb 81       	ldd	r30, Y+3	; 0x03
    303e:	fc 81       	ldd	r31, Y+4	; 0x04
    3040:	80 83       	st	Z, r24
    3042:	27 c0       	rjmp	.+78     	; 0x3092 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTC:*copy_pu8_PinValue = GET_BIT(PINC,copy_u8PinId);break;
    3044:	e3 e3       	ldi	r30, 0x33	; 51
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	28 2f       	mov	r18, r24
    304c:	30 e0       	ldi	r19, 0x00	; 0
    304e:	8a 81       	ldd	r24, Y+2	; 0x02
    3050:	88 2f       	mov	r24, r24
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	a9 01       	movw	r20, r18
    3056:	02 c0       	rjmp	.+4      	; 0x305c <DIO_voidGetPinValue+0xc8>
    3058:	55 95       	asr	r21
    305a:	47 95       	ror	r20
    305c:	8a 95       	dec	r24
    305e:	e2 f7       	brpl	.-8      	; 0x3058 <DIO_voidGetPinValue+0xc4>
    3060:	ca 01       	movw	r24, r20
    3062:	81 70       	andi	r24, 0x01	; 1
    3064:	eb 81       	ldd	r30, Y+3	; 0x03
    3066:	fc 81       	ldd	r31, Y+4	; 0x04
    3068:	80 83       	st	Z, r24
    306a:	13 c0       	rjmp	.+38     	; 0x3092 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTD:*copy_pu8_PinValue = GET_BIT(PIND,copy_u8PinId);break;
    306c:	e0 e3       	ldi	r30, 0x30	; 48
    306e:	f0 e0       	ldi	r31, 0x00	; 0
    3070:	80 81       	ld	r24, Z
    3072:	28 2f       	mov	r18, r24
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	88 2f       	mov	r24, r24
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	a9 01       	movw	r20, r18
    307e:	02 c0       	rjmp	.+4      	; 0x3084 <DIO_voidGetPinValue+0xf0>
    3080:	55 95       	asr	r21
    3082:	47 95       	ror	r20
    3084:	8a 95       	dec	r24
    3086:	e2 f7       	brpl	.-8      	; 0x3080 <DIO_voidGetPinValue+0xec>
    3088:	ca 01       	movw	r24, r20
    308a:	81 70       	andi	r24, 0x01	; 1
    308c:	eb 81       	ldd	r30, Y+3	; 0x03
    308e:	fc 81       	ldd	r31, Y+4	; 0x04
    3090:	80 83       	st	Z, r24
		}
	}
}
    3092:	26 96       	adiw	r28, 0x06	; 6
    3094:	0f b6       	in	r0, 0x3f	; 63
    3096:	f8 94       	cli
    3098:	de bf       	out	0x3e, r29	; 62
    309a:	0f be       	out	0x3f, r0	; 63
    309c:	cd bf       	out	0x3d, r28	; 61
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <DIO_u8GetPinValue+0x6>
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <DIO_u8GetPinValue+0x8>
    30ac:	0f 92       	push	r0
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
    30b2:	8a 83       	std	Y+2, r24	; 0x02
    30b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Reading;
	if(copy_u8PinId<=7)
    30b6:	8b 81       	ldd	r24, Y+3	; 0x03
    30b8:	88 30       	cpi	r24, 0x08	; 8
    30ba:	08 f0       	brcs	.+2      	; 0x30be <DIO_u8GetPinValue+0x1a>
    30bc:	67 c0       	rjmp	.+206    	; 0x318c <DIO_u8GetPinValue+0xe8>
	{
		switch(copy_u8PortId)
    30be:	8a 81       	ldd	r24, Y+2	; 0x02
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	3d 83       	std	Y+5, r19	; 0x05
    30c6:	2c 83       	std	Y+4, r18	; 0x04
    30c8:	4c 81       	ldd	r20, Y+4	; 0x04
    30ca:	5d 81       	ldd	r21, Y+5	; 0x05
    30cc:	41 30       	cpi	r20, 0x01	; 1
    30ce:	51 05       	cpc	r21, r1
    30d0:	41 f1       	breq	.+80     	; 0x3122 <DIO_u8GetPinValue+0x7e>
    30d2:	8c 81       	ldd	r24, Y+4	; 0x04
    30d4:	9d 81       	ldd	r25, Y+5	; 0x05
    30d6:	82 30       	cpi	r24, 0x02	; 2
    30d8:	91 05       	cpc	r25, r1
    30da:	34 f4       	brge	.+12     	; 0x30e8 <DIO_u8GetPinValue+0x44>
    30dc:	2c 81       	ldd	r18, Y+4	; 0x04
    30de:	3d 81       	ldd	r19, Y+5	; 0x05
    30e0:	21 15       	cp	r18, r1
    30e2:	31 05       	cpc	r19, r1
    30e4:	61 f0       	breq	.+24     	; 0x30fe <DIO_u8GetPinValue+0x5a>
    30e6:	52 c0       	rjmp	.+164    	; 0x318c <DIO_u8GetPinValue+0xe8>
    30e8:	4c 81       	ldd	r20, Y+4	; 0x04
    30ea:	5d 81       	ldd	r21, Y+5	; 0x05
    30ec:	42 30       	cpi	r20, 0x02	; 2
    30ee:	51 05       	cpc	r21, r1
    30f0:	51 f1       	breq	.+84     	; 0x3146 <DIO_u8GetPinValue+0xa2>
    30f2:	8c 81       	ldd	r24, Y+4	; 0x04
    30f4:	9d 81       	ldd	r25, Y+5	; 0x05
    30f6:	83 30       	cpi	r24, 0x03	; 3
    30f8:	91 05       	cpc	r25, r1
    30fa:	b9 f1       	breq	.+110    	; 0x316a <DIO_u8GetPinValue+0xc6>
    30fc:	47 c0       	rjmp	.+142    	; 0x318c <DIO_u8GetPinValue+0xe8>
		{
		case DIO_PORTA:Local_u8Reading = GET_BIT(PINA,copy_u8PinId);break;
    30fe:	e9 e3       	ldi	r30, 0x39	; 57
    3100:	f0 e0       	ldi	r31, 0x00	; 0
    3102:	80 81       	ld	r24, Z
    3104:	28 2f       	mov	r18, r24
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	8b 81       	ldd	r24, Y+3	; 0x03
    310a:	88 2f       	mov	r24, r24
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	a9 01       	movw	r20, r18
    3110:	02 c0       	rjmp	.+4      	; 0x3116 <DIO_u8GetPinValue+0x72>
    3112:	55 95       	asr	r21
    3114:	47 95       	ror	r20
    3116:	8a 95       	dec	r24
    3118:	e2 f7       	brpl	.-8      	; 0x3112 <DIO_u8GetPinValue+0x6e>
    311a:	ca 01       	movw	r24, r20
    311c:	81 70       	andi	r24, 0x01	; 1
    311e:	89 83       	std	Y+1, r24	; 0x01
    3120:	35 c0       	rjmp	.+106    	; 0x318c <DIO_u8GetPinValue+0xe8>
		case DIO_PORTB:Local_u8Reading = GET_BIT(PINB,copy_u8PinId);break;
    3122:	e6 e3       	ldi	r30, 0x36	; 54
    3124:	f0 e0       	ldi	r31, 0x00	; 0
    3126:	80 81       	ld	r24, Z
    3128:	28 2f       	mov	r18, r24
    312a:	30 e0       	ldi	r19, 0x00	; 0
    312c:	8b 81       	ldd	r24, Y+3	; 0x03
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	a9 01       	movw	r20, r18
    3134:	02 c0       	rjmp	.+4      	; 0x313a <DIO_u8GetPinValue+0x96>
    3136:	55 95       	asr	r21
    3138:	47 95       	ror	r20
    313a:	8a 95       	dec	r24
    313c:	e2 f7       	brpl	.-8      	; 0x3136 <DIO_u8GetPinValue+0x92>
    313e:	ca 01       	movw	r24, r20
    3140:	81 70       	andi	r24, 0x01	; 1
    3142:	89 83       	std	Y+1, r24	; 0x01
    3144:	23 c0       	rjmp	.+70     	; 0x318c <DIO_u8GetPinValue+0xe8>
		case DIO_PORTC:Local_u8Reading = GET_BIT(PINC,copy_u8PinId);break;
    3146:	e3 e3       	ldi	r30, 0x33	; 51
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	80 81       	ld	r24, Z
    314c:	28 2f       	mov	r18, r24
    314e:	30 e0       	ldi	r19, 0x00	; 0
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	a9 01       	movw	r20, r18
    3158:	02 c0       	rjmp	.+4      	; 0x315e <DIO_u8GetPinValue+0xba>
    315a:	55 95       	asr	r21
    315c:	47 95       	ror	r20
    315e:	8a 95       	dec	r24
    3160:	e2 f7       	brpl	.-8      	; 0x315a <DIO_u8GetPinValue+0xb6>
    3162:	ca 01       	movw	r24, r20
    3164:	81 70       	andi	r24, 0x01	; 1
    3166:	89 83       	std	Y+1, r24	; 0x01
    3168:	11 c0       	rjmp	.+34     	; 0x318c <DIO_u8GetPinValue+0xe8>
		case DIO_PORTD:Local_u8Reading = GET_BIT(PIND,copy_u8PinId);break;
    316a:	e0 e3       	ldi	r30, 0x30	; 48
    316c:	f0 e0       	ldi	r31, 0x00	; 0
    316e:	80 81       	ld	r24, Z
    3170:	28 2f       	mov	r18, r24
    3172:	30 e0       	ldi	r19, 0x00	; 0
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	88 2f       	mov	r24, r24
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	a9 01       	movw	r20, r18
    317c:	02 c0       	rjmp	.+4      	; 0x3182 <DIO_u8GetPinValue+0xde>
    317e:	55 95       	asr	r21
    3180:	47 95       	ror	r20
    3182:	8a 95       	dec	r24
    3184:	e2 f7       	brpl	.-8      	; 0x317e <DIO_u8GetPinValue+0xda>
    3186:	ca 01       	movw	r24, r20
    3188:	81 70       	andi	r24, 0x01	; 1
    318a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8Reading;
    318c:	89 81       	ldd	r24, Y+1	; 0x01
}
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	0f 90       	pop	r0
    3198:	cf 91       	pop	r28
    319a:	df 91       	pop	r29
    319c:	08 95       	ret

0000319e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
    319e:	df 93       	push	r29
    31a0:	cf 93       	push	r28
    31a2:	00 d0       	rcall	.+0      	; 0x31a4 <DIO_voidTogglePinValue+0x6>
    31a4:	00 d0       	rcall	.+0      	; 0x31a6 <DIO_voidTogglePinValue+0x8>
    31a6:	cd b7       	in	r28, 0x3d	; 61
    31a8:	de b7       	in	r29, 0x3e	; 62
    31aa:	89 83       	std	Y+1, r24	; 0x01
    31ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	28 2f       	mov	r18, r24
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	3c 83       	std	Y+4, r19	; 0x04
    31b6:	2b 83       	std	Y+3, r18	; 0x03
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	9c 81       	ldd	r25, Y+4	; 0x04
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	91 05       	cpc	r25, r1
    31c0:	49 f1       	breq	.+82     	; 0x3214 <DIO_voidTogglePinValue+0x76>
    31c2:	2b 81       	ldd	r18, Y+3	; 0x03
    31c4:	3c 81       	ldd	r19, Y+4	; 0x04
    31c6:	22 30       	cpi	r18, 0x02	; 2
    31c8:	31 05       	cpc	r19, r1
    31ca:	2c f4       	brge	.+10     	; 0x31d6 <DIO_voidTogglePinValue+0x38>
    31cc:	8b 81       	ldd	r24, Y+3	; 0x03
    31ce:	9c 81       	ldd	r25, Y+4	; 0x04
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	61 f0       	breq	.+24     	; 0x31ec <DIO_voidTogglePinValue+0x4e>
    31d4:	5a c0       	rjmp	.+180    	; 0x328a <DIO_voidTogglePinValue+0xec>
    31d6:	2b 81       	ldd	r18, Y+3	; 0x03
    31d8:	3c 81       	ldd	r19, Y+4	; 0x04
    31da:	22 30       	cpi	r18, 0x02	; 2
    31dc:	31 05       	cpc	r19, r1
    31de:	71 f1       	breq	.+92     	; 0x323c <DIO_voidTogglePinValue+0x9e>
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	83 30       	cpi	r24, 0x03	; 3
    31e6:	91 05       	cpc	r25, r1
    31e8:	e9 f1       	breq	.+122    	; 0x3264 <DIO_voidTogglePinValue+0xc6>
    31ea:	4f c0       	rjmp	.+158    	; 0x328a <DIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA: TOG_BIT(PORTA, copy_u8PinId); break;
    31ec:	ab e3       	ldi	r26, 0x3B	; 59
    31ee:	b0 e0       	ldi	r27, 0x00	; 0
    31f0:	eb e3       	ldi	r30, 0x3B	; 59
    31f2:	f0 e0       	ldi	r31, 0x00	; 0
    31f4:	80 81       	ld	r24, Z
    31f6:	48 2f       	mov	r20, r24
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	28 2f       	mov	r18, r24
    31fc:	30 e0       	ldi	r19, 0x00	; 0
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	02 2e       	mov	r0, r18
    3204:	02 c0       	rjmp	.+4      	; 0x320a <DIO_voidTogglePinValue+0x6c>
    3206:	88 0f       	add	r24, r24
    3208:	99 1f       	adc	r25, r25
    320a:	0a 94       	dec	r0
    320c:	e2 f7       	brpl	.-8      	; 0x3206 <DIO_voidTogglePinValue+0x68>
    320e:	84 27       	eor	r24, r20
    3210:	8c 93       	st	X, r24
    3212:	3b c0       	rjmp	.+118    	; 0x328a <DIO_voidTogglePinValue+0xec>
	case DIO_PORTB: TOG_BIT(PORTB, copy_u8PinId); break;
    3214:	a8 e3       	ldi	r26, 0x38	; 56
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e8 e3       	ldi	r30, 0x38	; 56
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	48 2f       	mov	r20, r24
    3220:	8a 81       	ldd	r24, Y+2	; 0x02
    3222:	28 2f       	mov	r18, r24
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	90 e0       	ldi	r25, 0x00	; 0
    322a:	02 2e       	mov	r0, r18
    322c:	02 c0       	rjmp	.+4      	; 0x3232 <DIO_voidTogglePinValue+0x94>
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	0a 94       	dec	r0
    3234:	e2 f7       	brpl	.-8      	; 0x322e <DIO_voidTogglePinValue+0x90>
    3236:	84 27       	eor	r24, r20
    3238:	8c 93       	st	X, r24
    323a:	27 c0       	rjmp	.+78     	; 0x328a <DIO_voidTogglePinValue+0xec>
	case DIO_PORTC: TOG_BIT(PORTC, copy_u8PinId); break;
    323c:	a5 e3       	ldi	r26, 0x35	; 53
    323e:	b0 e0       	ldi	r27, 0x00	; 0
    3240:	e5 e3       	ldi	r30, 0x35	; 53
    3242:	f0 e0       	ldi	r31, 0x00	; 0
    3244:	80 81       	ld	r24, Z
    3246:	48 2f       	mov	r20, r24
    3248:	8a 81       	ldd	r24, Y+2	; 0x02
    324a:	28 2f       	mov	r18, r24
    324c:	30 e0       	ldi	r19, 0x00	; 0
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	02 2e       	mov	r0, r18
    3254:	02 c0       	rjmp	.+4      	; 0x325a <DIO_voidTogglePinValue+0xbc>
    3256:	88 0f       	add	r24, r24
    3258:	99 1f       	adc	r25, r25
    325a:	0a 94       	dec	r0
    325c:	e2 f7       	brpl	.-8      	; 0x3256 <DIO_voidTogglePinValue+0xb8>
    325e:	84 27       	eor	r24, r20
    3260:	8c 93       	st	X, r24
    3262:	13 c0       	rjmp	.+38     	; 0x328a <DIO_voidTogglePinValue+0xec>
	case DIO_PORTD: TOG_BIT(PORTD, copy_u8PinId); break;
    3264:	a2 e3       	ldi	r26, 0x32	; 50
    3266:	b0 e0       	ldi	r27, 0x00	; 0
    3268:	e2 e3       	ldi	r30, 0x32	; 50
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	80 81       	ld	r24, Z
    326e:	48 2f       	mov	r20, r24
    3270:	8a 81       	ldd	r24, Y+2	; 0x02
    3272:	28 2f       	mov	r18, r24
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	02 2e       	mov	r0, r18
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <DIO_voidTogglePinValue+0xe4>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0a 94       	dec	r0
    3284:	e2 f7       	brpl	.-8      	; 0x327e <DIO_voidTogglePinValue+0xe0>
    3286:	84 27       	eor	r24, r20
    3288:	8c 93       	st	X, r24
	}
}
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	0f 90       	pop	r0
    3290:	0f 90       	pop	r0
    3292:	cf 91       	pop	r28
    3294:	df 91       	pop	r29
    3296:	08 95       	ret

00003298 <DIO_voidActivePinInPullUpResistance>:

void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	00 d0       	rcall	.+0      	; 0x329e <DIO_voidActivePinInPullUpResistance+0x6>
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <DIO_voidActivePinInPullUpResistance+0x8>
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	28 2f       	mov	r18, r24
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	3c 83       	std	Y+4, r19	; 0x04
    32b0:	2b 83       	std	Y+3, r18	; 0x03
    32b2:	8b 81       	ldd	r24, Y+3	; 0x03
    32b4:	9c 81       	ldd	r25, Y+4	; 0x04
    32b6:	81 30       	cpi	r24, 0x01	; 1
    32b8:	91 05       	cpc	r25, r1
    32ba:	49 f1       	breq	.+82     	; 0x330e <DIO_voidActivePinInPullUpResistance+0x76>
    32bc:	2b 81       	ldd	r18, Y+3	; 0x03
    32be:	3c 81       	ldd	r19, Y+4	; 0x04
    32c0:	22 30       	cpi	r18, 0x02	; 2
    32c2:	31 05       	cpc	r19, r1
    32c4:	2c f4       	brge	.+10     	; 0x32d0 <DIO_voidActivePinInPullUpResistance+0x38>
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ca:	00 97       	sbiw	r24, 0x00	; 0
    32cc:	61 f0       	breq	.+24     	; 0x32e6 <DIO_voidActivePinInPullUpResistance+0x4e>
    32ce:	5a c0       	rjmp	.+180    	; 0x3384 <DIO_voidActivePinInPullUpResistance+0xec>
    32d0:	2b 81       	ldd	r18, Y+3	; 0x03
    32d2:	3c 81       	ldd	r19, Y+4	; 0x04
    32d4:	22 30       	cpi	r18, 0x02	; 2
    32d6:	31 05       	cpc	r19, r1
    32d8:	71 f1       	breq	.+92     	; 0x3336 <DIO_voidActivePinInPullUpResistance+0x9e>
    32da:	8b 81       	ldd	r24, Y+3	; 0x03
    32dc:	9c 81       	ldd	r25, Y+4	; 0x04
    32de:	83 30       	cpi	r24, 0x03	; 3
    32e0:	91 05       	cpc	r25, r1
    32e2:	e9 f1       	breq	.+122    	; 0x335e <DIO_voidActivePinInPullUpResistance+0xc6>
    32e4:	4f c0       	rjmp	.+158    	; 0x3384 <DIO_voidActivePinInPullUpResistance+0xec>
	{
	case DIO_PORTA: SET_BIT(PORTA, copy_u8PinId); break;
    32e6:	ab e3       	ldi	r26, 0x3B	; 59
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	eb e3       	ldi	r30, 0x3B	; 59
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	80 81       	ld	r24, Z
    32f0:	48 2f       	mov	r20, r24
    32f2:	8a 81       	ldd	r24, Y+2	; 0x02
    32f4:	28 2f       	mov	r18, r24
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	02 2e       	mov	r0, r18
    32fe:	02 c0       	rjmp	.+4      	; 0x3304 <DIO_voidActivePinInPullUpResistance+0x6c>
    3300:	88 0f       	add	r24, r24
    3302:	99 1f       	adc	r25, r25
    3304:	0a 94       	dec	r0
    3306:	e2 f7       	brpl	.-8      	; 0x3300 <DIO_voidActivePinInPullUpResistance+0x68>
    3308:	84 2b       	or	r24, r20
    330a:	8c 93       	st	X, r24
    330c:	3b c0       	rjmp	.+118    	; 0x3384 <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTB: SET_BIT(PORTB, copy_u8PinId); break;
    330e:	a8 e3       	ldi	r26, 0x38	; 56
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e8 e3       	ldi	r30, 0x38	; 56
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	48 2f       	mov	r20, r24
    331a:	8a 81       	ldd	r24, Y+2	; 0x02
    331c:	28 2f       	mov	r18, r24
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	02 2e       	mov	r0, r18
    3326:	02 c0       	rjmp	.+4      	; 0x332c <DIO_voidActivePinInPullUpResistance+0x94>
    3328:	88 0f       	add	r24, r24
    332a:	99 1f       	adc	r25, r25
    332c:	0a 94       	dec	r0
    332e:	e2 f7       	brpl	.-8      	; 0x3328 <DIO_voidActivePinInPullUpResistance+0x90>
    3330:	84 2b       	or	r24, r20
    3332:	8c 93       	st	X, r24
    3334:	27 c0       	rjmp	.+78     	; 0x3384 <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTC: SET_BIT(PORTC, copy_u8PinId); break;
    3336:	a5 e3       	ldi	r26, 0x35	; 53
    3338:	b0 e0       	ldi	r27, 0x00	; 0
    333a:	e5 e3       	ldi	r30, 0x35	; 53
    333c:	f0 e0       	ldi	r31, 0x00	; 0
    333e:	80 81       	ld	r24, Z
    3340:	48 2f       	mov	r20, r24
    3342:	8a 81       	ldd	r24, Y+2	; 0x02
    3344:	28 2f       	mov	r18, r24
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	90 e0       	ldi	r25, 0x00	; 0
    334c:	02 2e       	mov	r0, r18
    334e:	02 c0       	rjmp	.+4      	; 0x3354 <DIO_voidActivePinInPullUpResistance+0xbc>
    3350:	88 0f       	add	r24, r24
    3352:	99 1f       	adc	r25, r25
    3354:	0a 94       	dec	r0
    3356:	e2 f7       	brpl	.-8      	; 0x3350 <DIO_voidActivePinInPullUpResistance+0xb8>
    3358:	84 2b       	or	r24, r20
    335a:	8c 93       	st	X, r24
    335c:	13 c0       	rjmp	.+38     	; 0x3384 <DIO_voidActivePinInPullUpResistance+0xec>
	case DIO_PORTD: SET_BIT(PORTD, copy_u8PinId); break;
    335e:	a2 e3       	ldi	r26, 0x32	; 50
    3360:	b0 e0       	ldi	r27, 0x00	; 0
    3362:	e2 e3       	ldi	r30, 0x32	; 50
    3364:	f0 e0       	ldi	r31, 0x00	; 0
    3366:	80 81       	ld	r24, Z
    3368:	48 2f       	mov	r20, r24
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	28 2f       	mov	r18, r24
    336e:	30 e0       	ldi	r19, 0x00	; 0
    3370:	81 e0       	ldi	r24, 0x01	; 1
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	02 2e       	mov	r0, r18
    3376:	02 c0       	rjmp	.+4      	; 0x337c <DIO_voidActivePinInPullUpResistance+0xe4>
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	0a 94       	dec	r0
    337e:	e2 f7       	brpl	.-8      	; 0x3378 <DIO_voidActivePinInPullUpResistance+0xe0>
    3380:	84 2b       	or	r24, r20
    3382:	8c 93       	st	X, r24
	}
}
    3384:	0f 90       	pop	r0
    3386:	0f 90       	pop	r0
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	cf 91       	pop	r28
    338e:	df 91       	pop	r29
    3390:	08 95       	ret

00003392 <DIO_voidSetPortDirection>:


                      /*************** PORT APIS ***************/

void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    3392:	df 93       	push	r29
    3394:	cf 93       	push	r28
    3396:	00 d0       	rcall	.+0      	; 0x3398 <DIO_voidSetPortDirection+0x6>
    3398:	00 d0       	rcall	.+0      	; 0x339a <DIO_voidSetPortDirection+0x8>
    339a:	cd b7       	in	r28, 0x3d	; 61
    339c:	de b7       	in	r29, 0x3e	; 62
    339e:	89 83       	std	Y+1, r24	; 0x01
    33a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    33a2:	89 81       	ldd	r24, Y+1	; 0x01
    33a4:	28 2f       	mov	r18, r24
    33a6:	30 e0       	ldi	r19, 0x00	; 0
    33a8:	3c 83       	std	Y+4, r19	; 0x04
    33aa:	2b 83       	std	Y+3, r18	; 0x03
    33ac:	8b 81       	ldd	r24, Y+3	; 0x03
    33ae:	9c 81       	ldd	r25, Y+4	; 0x04
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	91 05       	cpc	r25, r1
    33b4:	d1 f0       	breq	.+52     	; 0x33ea <DIO_voidSetPortDirection+0x58>
    33b6:	2b 81       	ldd	r18, Y+3	; 0x03
    33b8:	3c 81       	ldd	r19, Y+4	; 0x04
    33ba:	22 30       	cpi	r18, 0x02	; 2
    33bc:	31 05       	cpc	r19, r1
    33be:	2c f4       	brge	.+10     	; 0x33ca <DIO_voidSetPortDirection+0x38>
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	9c 81       	ldd	r25, Y+4	; 0x04
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	61 f0       	breq	.+24     	; 0x33e0 <DIO_voidSetPortDirection+0x4e>
    33c8:	1e c0       	rjmp	.+60     	; 0x3406 <DIO_voidSetPortDirection+0x74>
    33ca:	2b 81       	ldd	r18, Y+3	; 0x03
    33cc:	3c 81       	ldd	r19, Y+4	; 0x04
    33ce:	22 30       	cpi	r18, 0x02	; 2
    33d0:	31 05       	cpc	r19, r1
    33d2:	81 f0       	breq	.+32     	; 0x33f4 <DIO_voidSetPortDirection+0x62>
    33d4:	8b 81       	ldd	r24, Y+3	; 0x03
    33d6:	9c 81       	ldd	r25, Y+4	; 0x04
    33d8:	83 30       	cpi	r24, 0x03	; 3
    33da:	91 05       	cpc	r25, r1
    33dc:	81 f0       	breq	.+32     	; 0x33fe <DIO_voidSetPortDirection+0x6c>
    33de:	13 c0       	rjmp	.+38     	; 0x3406 <DIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA = copy_u8PortDirection;break;
    33e0:	ea e3       	ldi	r30, 0x3A	; 58
    33e2:	f0 e0       	ldi	r31, 0x00	; 0
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	80 83       	st	Z, r24
    33e8:	0e c0       	rjmp	.+28     	; 0x3406 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:DDRB = copy_u8PortDirection;break;
    33ea:	e7 e3       	ldi	r30, 0x37	; 55
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	8a 81       	ldd	r24, Y+2	; 0x02
    33f0:	80 83       	st	Z, r24
    33f2:	09 c0       	rjmp	.+18     	; 0x3406 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:DDRC = copy_u8PortDirection;break;
    33f4:	e4 e3       	ldi	r30, 0x34	; 52
    33f6:	f0 e0       	ldi	r31, 0x00	; 0
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	80 83       	st	Z, r24
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:DDRD = copy_u8PortDirection;break;
    33fe:	e1 e3       	ldi	r30, 0x31	; 49
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	8a 81       	ldd	r24, Y+2	; 0x02
    3404:	80 83       	st	Z, r24
	}
}
    3406:	0f 90       	pop	r0
    3408:	0f 90       	pop	r0
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	cf 91       	pop	r28
    3410:	df 91       	pop	r29
    3412:	08 95       	ret

00003414 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
    3414:	df 93       	push	r29
    3416:	cf 93       	push	r28
    3418:	00 d0       	rcall	.+0      	; 0x341a <DIO_voidSetPortValue+0x6>
    341a:	00 d0       	rcall	.+0      	; 0x341c <DIO_voidSetPortValue+0x8>
    341c:	cd b7       	in	r28, 0x3d	; 61
    341e:	de b7       	in	r29, 0x3e	; 62
    3420:	89 83       	std	Y+1, r24	; 0x01
    3422:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    3424:	89 81       	ldd	r24, Y+1	; 0x01
    3426:	28 2f       	mov	r18, r24
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	3c 83       	std	Y+4, r19	; 0x04
    342c:	2b 83       	std	Y+3, r18	; 0x03
    342e:	8b 81       	ldd	r24, Y+3	; 0x03
    3430:	9c 81       	ldd	r25, Y+4	; 0x04
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	91 05       	cpc	r25, r1
    3436:	d1 f0       	breq	.+52     	; 0x346c <DIO_voidSetPortValue+0x58>
    3438:	2b 81       	ldd	r18, Y+3	; 0x03
    343a:	3c 81       	ldd	r19, Y+4	; 0x04
    343c:	22 30       	cpi	r18, 0x02	; 2
    343e:	31 05       	cpc	r19, r1
    3440:	2c f4       	brge	.+10     	; 0x344c <DIO_voidSetPortValue+0x38>
    3442:	8b 81       	ldd	r24, Y+3	; 0x03
    3444:	9c 81       	ldd	r25, Y+4	; 0x04
    3446:	00 97       	sbiw	r24, 0x00	; 0
    3448:	61 f0       	breq	.+24     	; 0x3462 <DIO_voidSetPortValue+0x4e>
    344a:	1e c0       	rjmp	.+60     	; 0x3488 <DIO_voidSetPortValue+0x74>
    344c:	2b 81       	ldd	r18, Y+3	; 0x03
    344e:	3c 81       	ldd	r19, Y+4	; 0x04
    3450:	22 30       	cpi	r18, 0x02	; 2
    3452:	31 05       	cpc	r19, r1
    3454:	81 f0       	breq	.+32     	; 0x3476 <DIO_voidSetPortValue+0x62>
    3456:	8b 81       	ldd	r24, Y+3	; 0x03
    3458:	9c 81       	ldd	r25, Y+4	; 0x04
    345a:	83 30       	cpi	r24, 0x03	; 3
    345c:	91 05       	cpc	r25, r1
    345e:	81 f0       	breq	.+32     	; 0x3480 <DIO_voidSetPortValue+0x6c>
    3460:	13 c0       	rjmp	.+38     	; 0x3488 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA = copy_u8PortValue;break;
    3462:	eb e3       	ldi	r30, 0x3B	; 59
    3464:	f0 e0       	ldi	r31, 0x00	; 0
    3466:	8a 81       	ldd	r24, Y+2	; 0x02
    3468:	80 83       	st	Z, r24
    346a:	0e c0       	rjmp	.+28     	; 0x3488 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:PORTB = copy_u8PortValue;break;
    346c:	e8 e3       	ldi	r30, 0x38	; 56
    346e:	f0 e0       	ldi	r31, 0x00	; 0
    3470:	8a 81       	ldd	r24, Y+2	; 0x02
    3472:	80 83       	st	Z, r24
    3474:	09 c0       	rjmp	.+18     	; 0x3488 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:PORTC = copy_u8PortValue;break;
    3476:	e5 e3       	ldi	r30, 0x35	; 53
    3478:	f0 e0       	ldi	r31, 0x00	; 0
    347a:	8a 81       	ldd	r24, Y+2	; 0x02
    347c:	80 83       	st	Z, r24
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:PORTD = copy_u8PortValue;break;
    3480:	e2 e3       	ldi	r30, 0x32	; 50
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	8a 81       	ldd	r24, Y+2	; 0x02
    3486:	80 83       	st	Z, r24
	}
}
    3488:	0f 90       	pop	r0
    348a:	0f 90       	pop	r0
    348c:	0f 90       	pop	r0
    348e:	0f 90       	pop	r0
    3490:	cf 91       	pop	r28
    3492:	df 91       	pop	r29
    3494:	08 95       	ret

00003496 <DIO_voidGetPortValue>:

void DIO_voidGetPortValue(u8 copy_u8PortId, u8 *copy_pu8_PinValue)
{
    3496:	df 93       	push	r29
    3498:	cf 93       	push	r28
    349a:	00 d0       	rcall	.+0      	; 0x349c <DIO_voidGetPortValue+0x6>
    349c:	00 d0       	rcall	.+0      	; 0x349e <DIO_voidGetPortValue+0x8>
    349e:	0f 92       	push	r0
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	89 83       	std	Y+1, r24	; 0x01
    34a6:	7b 83       	std	Y+3, r23	; 0x03
    34a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	28 2f       	mov	r18, r24
    34ae:	30 e0       	ldi	r19, 0x00	; 0
    34b0:	3d 83       	std	Y+5, r19	; 0x05
    34b2:	2c 83       	std	Y+4, r18	; 0x04
    34b4:	8c 81       	ldd	r24, Y+4	; 0x04
    34b6:	9d 81       	ldd	r25, Y+5	; 0x05
    34b8:	81 30       	cpi	r24, 0x01	; 1
    34ba:	91 05       	cpc	r25, r1
    34bc:	e1 f0       	breq	.+56     	; 0x34f6 <DIO_voidGetPortValue+0x60>
    34be:	2c 81       	ldd	r18, Y+4	; 0x04
    34c0:	3d 81       	ldd	r19, Y+5	; 0x05
    34c2:	22 30       	cpi	r18, 0x02	; 2
    34c4:	31 05       	cpc	r19, r1
    34c6:	2c f4       	brge	.+10     	; 0x34d2 <DIO_voidGetPortValue+0x3c>
    34c8:	8c 81       	ldd	r24, Y+4	; 0x04
    34ca:	9d 81       	ldd	r25, Y+5	; 0x05
    34cc:	00 97       	sbiw	r24, 0x00	; 0
    34ce:	61 f0       	breq	.+24     	; 0x34e8 <DIO_voidGetPortValue+0x52>
    34d0:	26 c0       	rjmp	.+76     	; 0x351e <DIO_voidGetPortValue+0x88>
    34d2:	2c 81       	ldd	r18, Y+4	; 0x04
    34d4:	3d 81       	ldd	r19, Y+5	; 0x05
    34d6:	22 30       	cpi	r18, 0x02	; 2
    34d8:	31 05       	cpc	r19, r1
    34da:	a1 f0       	breq	.+40     	; 0x3504 <DIO_voidGetPortValue+0x6e>
    34dc:	8c 81       	ldd	r24, Y+4	; 0x04
    34de:	9d 81       	ldd	r25, Y+5	; 0x05
    34e0:	83 30       	cpi	r24, 0x03	; 3
    34e2:	91 05       	cpc	r25, r1
    34e4:	b1 f0       	breq	.+44     	; 0x3512 <DIO_voidGetPortValue+0x7c>
    34e6:	1b c0       	rjmp	.+54     	; 0x351e <DIO_voidGetPortValue+0x88>
	{
	case DIO_PORTA: *copy_pu8_PinValue = PORTA;break;
    34e8:	eb e3       	ldi	r30, 0x3B	; 59
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	80 81       	ld	r24, Z
    34ee:	ea 81       	ldd	r30, Y+2	; 0x02
    34f0:	fb 81       	ldd	r31, Y+3	; 0x03
    34f2:	80 83       	st	Z, r24
    34f4:	14 c0       	rjmp	.+40     	; 0x351e <DIO_voidGetPortValue+0x88>
	case DIO_PORTB: *copy_pu8_PinValue = PORTB;break;
    34f6:	e8 e3       	ldi	r30, 0x38	; 56
    34f8:	f0 e0       	ldi	r31, 0x00	; 0
    34fa:	80 81       	ld	r24, Z
    34fc:	ea 81       	ldd	r30, Y+2	; 0x02
    34fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3500:	80 83       	st	Z, r24
    3502:	0d c0       	rjmp	.+26     	; 0x351e <DIO_voidGetPortValue+0x88>
	case DIO_PORTC: *copy_pu8_PinValue = PORTC;break;
    3504:	e5 e3       	ldi	r30, 0x35	; 53
    3506:	f0 e0       	ldi	r31, 0x00	; 0
    3508:	80 81       	ld	r24, Z
    350a:	ea 81       	ldd	r30, Y+2	; 0x02
    350c:	fb 81       	ldd	r31, Y+3	; 0x03
    350e:	80 83       	st	Z, r24
    3510:	06 c0       	rjmp	.+12     	; 0x351e <DIO_voidGetPortValue+0x88>
	case DIO_PORTD: *copy_pu8_PinValue = PORTD;break;
    3512:	e2 e3       	ldi	r30, 0x32	; 50
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	ea 81       	ldd	r30, Y+2	; 0x02
    351a:	fb 81       	ldd	r31, Y+3	; 0x03
    351c:	80 83       	st	Z, r24
	}
}
    351e:	0f 90       	pop	r0
    3520:	0f 90       	pop	r0
    3522:	0f 90       	pop	r0
    3524:	0f 90       	pop	r0
    3526:	0f 90       	pop	r0
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	08 95       	ret

0000352e <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue(u8 copy_u8PortId)
{
    352e:	df 93       	push	r29
    3530:	cf 93       	push	r28
    3532:	00 d0       	rcall	.+0      	; 0x3534 <DIO_voidTogglePortValue+0x6>
    3534:	0f 92       	push	r0
    3536:	cd b7       	in	r28, 0x3d	; 61
    3538:	de b7       	in	r29, 0x3e	; 62
    353a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    353c:	89 81       	ldd	r24, Y+1	; 0x01
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	3b 83       	std	Y+3, r19	; 0x03
    3544:	2a 83       	std	Y+2, r18	; 0x02
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	81 30       	cpi	r24, 0x01	; 1
    354c:	91 05       	cpc	r25, r1
    354e:	e9 f0       	breq	.+58     	; 0x358a <DIO_voidTogglePortValue+0x5c>
    3550:	2a 81       	ldd	r18, Y+2	; 0x02
    3552:	3b 81       	ldd	r19, Y+3	; 0x03
    3554:	22 30       	cpi	r18, 0x02	; 2
    3556:	31 05       	cpc	r19, r1
    3558:	2c f4       	brge	.+10     	; 0x3564 <DIO_voidTogglePortValue+0x36>
    355a:	8a 81       	ldd	r24, Y+2	; 0x02
    355c:	9b 81       	ldd	r25, Y+3	; 0x03
    355e:	00 97       	sbiw	r24, 0x00	; 0
    3560:	61 f0       	breq	.+24     	; 0x357a <DIO_voidTogglePortValue+0x4c>
    3562:	2a c0       	rjmp	.+84     	; 0x35b8 <DIO_voidTogglePortValue+0x8a>
    3564:	2a 81       	ldd	r18, Y+2	; 0x02
    3566:	3b 81       	ldd	r19, Y+3	; 0x03
    3568:	22 30       	cpi	r18, 0x02	; 2
    356a:	31 05       	cpc	r19, r1
    356c:	b1 f0       	breq	.+44     	; 0x359a <DIO_voidTogglePortValue+0x6c>
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	9b 81       	ldd	r25, Y+3	; 0x03
    3572:	83 30       	cpi	r24, 0x03	; 3
    3574:	91 05       	cpc	r25, r1
    3576:	c9 f0       	breq	.+50     	; 0x35aa <DIO_voidTogglePortValue+0x7c>
    3578:	1f c0       	rjmp	.+62     	; 0x35b8 <DIO_voidTogglePortValue+0x8a>
	{
	case DIO_PORTA: PORTA^=DIO_PORT_HIGH;break;
    357a:	ab e3       	ldi	r26, 0x3B	; 59
    357c:	b0 e0       	ldi	r27, 0x00	; 0
    357e:	eb e3       	ldi	r30, 0x3B	; 59
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	80 95       	com	r24
    3586:	8c 93       	st	X, r24
    3588:	17 c0       	rjmp	.+46     	; 0x35b8 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTB: PORTB^=DIO_PORT_HIGH;break;
    358a:	a8 e3       	ldi	r26, 0x38	; 56
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	e8 e3       	ldi	r30, 0x38	; 56
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	80 95       	com	r24
    3596:	8c 93       	st	X, r24
    3598:	0f c0       	rjmp	.+30     	; 0x35b8 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTC: PORTC^=DIO_PORT_HIGH;break;
    359a:	a5 e3       	ldi	r26, 0x35	; 53
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e5 e3       	ldi	r30, 0x35	; 53
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	80 95       	com	r24
    35a6:	8c 93       	st	X, r24
    35a8:	07 c0       	rjmp	.+14     	; 0x35b8 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTD: PORTD^=DIO_PORT_HIGH;break;
    35aa:	a2 e3       	ldi	r26, 0x32	; 50
    35ac:	b0 e0       	ldi	r27, 0x00	; 0
    35ae:	e2 e3       	ldi	r30, 0x32	; 50
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 81       	ld	r24, Z
    35b4:	80 95       	com	r24
    35b6:	8c 93       	st	X, r24
	}
}
    35b8:	0f 90       	pop	r0
    35ba:	0f 90       	pop	r0
    35bc:	0f 90       	pop	r0
    35be:	cf 91       	pop	r28
    35c0:	df 91       	pop	r29
    35c2:	08 95       	ret

000035c4 <DIO_voidActivePortInPullUpResistance>:

void DIO_voidActivePortInPullUpResistance(u8 copy_u8PortId)
{
    35c4:	df 93       	push	r29
    35c6:	cf 93       	push	r28
    35c8:	00 d0       	rcall	.+0      	; 0x35ca <DIO_voidActivePortInPullUpResistance+0x6>
    35ca:	0f 92       	push	r0
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	28 2f       	mov	r18, r24
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	3b 83       	std	Y+3, r19	; 0x03
    35da:	2a 83       	std	Y+2, r18	; 0x02
    35dc:	8a 81       	ldd	r24, Y+2	; 0x02
    35de:	9b 81       	ldd	r25, Y+3	; 0x03
    35e0:	81 30       	cpi	r24, 0x01	; 1
    35e2:	91 05       	cpc	r25, r1
    35e4:	d1 f0       	breq	.+52     	; 0x361a <DIO_voidActivePortInPullUpResistance+0x56>
    35e6:	2a 81       	ldd	r18, Y+2	; 0x02
    35e8:	3b 81       	ldd	r19, Y+3	; 0x03
    35ea:	22 30       	cpi	r18, 0x02	; 2
    35ec:	31 05       	cpc	r19, r1
    35ee:	2c f4       	brge	.+10     	; 0x35fa <DIO_voidActivePortInPullUpResistance+0x36>
    35f0:	8a 81       	ldd	r24, Y+2	; 0x02
    35f2:	9b 81       	ldd	r25, Y+3	; 0x03
    35f4:	00 97       	sbiw	r24, 0x00	; 0
    35f6:	61 f0       	breq	.+24     	; 0x3610 <DIO_voidActivePortInPullUpResistance+0x4c>
    35f8:	1e c0       	rjmp	.+60     	; 0x3636 <DIO_voidActivePortInPullUpResistance+0x72>
    35fa:	2a 81       	ldd	r18, Y+2	; 0x02
    35fc:	3b 81       	ldd	r19, Y+3	; 0x03
    35fe:	22 30       	cpi	r18, 0x02	; 2
    3600:	31 05       	cpc	r19, r1
    3602:	81 f0       	breq	.+32     	; 0x3624 <DIO_voidActivePortInPullUpResistance+0x60>
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	9b 81       	ldd	r25, Y+3	; 0x03
    3608:	83 30       	cpi	r24, 0x03	; 3
    360a:	91 05       	cpc	r25, r1
    360c:	81 f0       	breq	.+32     	; 0x362e <DIO_voidActivePortInPullUpResistance+0x6a>
    360e:	13 c0       	rjmp	.+38     	; 0x3636 <DIO_voidActivePortInPullUpResistance+0x72>
	{
	case DIO_PORTA: PORTA = DIO_PORT_HIGH;break;
    3610:	eb e3       	ldi	r30, 0x3B	; 59
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	8f ef       	ldi	r24, 0xFF	; 255
    3616:	80 83       	st	Z, r24
    3618:	0e c0       	rjmp	.+28     	; 0x3636 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTB: PORTB = DIO_PORT_HIGH;break;
    361a:	e8 e3       	ldi	r30, 0x38	; 56
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	8f ef       	ldi	r24, 0xFF	; 255
    3620:	80 83       	st	Z, r24
    3622:	09 c0       	rjmp	.+18     	; 0x3636 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTC: PORTC = DIO_PORT_HIGH;break;
    3624:	e5 e3       	ldi	r30, 0x35	; 53
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	8f ef       	ldi	r24, 0xFF	; 255
    362a:	80 83       	st	Z, r24
    362c:	04 c0       	rjmp	.+8      	; 0x3636 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTD: PORTD = DIO_PORT_HIGH;break;
    362e:	e2 e3       	ldi	r30, 0x32	; 50
    3630:	f0 e0       	ldi	r31, 0x00	; 0
    3632:	8f ef       	ldi	r24, 0xFF	; 255
    3634:	80 83       	st	Z, r24
	}
}
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	0f 90       	pop	r0
    363c:	cf 91       	pop	r28
    363e:	df 91       	pop	r29
    3640:	08 95       	ret

00003642 <main>:
#include "ADC_register.h"
#include "ADC_interface.h"
#include "util/delay.h"

void main(void)
{
    3642:	df 93       	push	r29
    3644:	cf 93       	push	r28
    3646:	00 d0       	rcall	.+0      	; 0x3648 <main+0x6>
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
	u16 digital;
	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN5, DIO_PIN_OUTPUT);
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	65 e0       	ldi	r22, 0x05	; 5
    3650:	41 e0       	ldi	r20, 0x01	; 1
    3652:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_REFERENCE_AVCC);
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_voidInit>
	while(1)
	{
		ADC_u8ReadDigitalValue(0, &digital);
    365c:	80 e0       	ldi	r24, 0x00	; 0
    365e:	9e 01       	movw	r18, r28
    3660:	2f 5f       	subi	r18, 0xFF	; 255
    3662:	3f 4f       	sbci	r19, 0xFF	; 255
    3664:	b9 01       	movw	r22, r18
    3666:	0e 94 c5 06 	call	0xd8a	; 0xd8a <ADC_u8ReadDigitalValue>
		if (digital < 512)
    366a:	89 81       	ldd	r24, Y+1	; 0x01
    366c:	9a 81       	ldd	r25, Y+2	; 0x02
    366e:	22 e0       	ldi	r18, 0x02	; 2
    3670:	80 30       	cpi	r24, 0x00	; 0
    3672:	92 07       	cpc	r25, r18
    3674:	30 f4       	brcc	.+12     	; 0x3682 <main+0x40>
		{
			DIO_voidSetPinValue(DIO_PORTA, DIO_PIN5, DIO_PIN_HIGH);
    3676:	80 e0       	ldi	r24, 0x00	; 0
    3678:	65 e0       	ldi	r22, 0x05	; 5
    367a:	41 e0       	ldi	r20, 0x01	; 1
    367c:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    3680:	ed cf       	rjmp	.-38     	; 0x365c <main+0x1a>
		}
		else
		{
			DIO_voidSetPinValue(DIO_PORTA, DIO_PIN5, DIO_PIN_LOW);
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	65 e0       	ldi	r22, 0x05	; 5
    3686:	40 e0       	ldi	r20, 0x00	; 0
    3688:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <DIO_voidSetPinValue>
    368c:	e7 cf       	rjmp	.-50     	; 0x365c <main+0x1a>

0000368e <__udivmodhi4>:
    368e:	aa 1b       	sub	r26, r26
    3690:	bb 1b       	sub	r27, r27
    3692:	51 e1       	ldi	r21, 0x11	; 17
    3694:	07 c0       	rjmp	.+14     	; 0x36a4 <__udivmodhi4_ep>

00003696 <__udivmodhi4_loop>:
    3696:	aa 1f       	adc	r26, r26
    3698:	bb 1f       	adc	r27, r27
    369a:	a6 17       	cp	r26, r22
    369c:	b7 07       	cpc	r27, r23
    369e:	10 f0       	brcs	.+4      	; 0x36a4 <__udivmodhi4_ep>
    36a0:	a6 1b       	sub	r26, r22
    36a2:	b7 0b       	sbc	r27, r23

000036a4 <__udivmodhi4_ep>:
    36a4:	88 1f       	adc	r24, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	5a 95       	dec	r21
    36aa:	a9 f7       	brne	.-22     	; 0x3696 <__udivmodhi4_loop>
    36ac:	80 95       	com	r24
    36ae:	90 95       	com	r25
    36b0:	bc 01       	movw	r22, r24
    36b2:	cd 01       	movw	r24, r26
    36b4:	08 95       	ret

000036b6 <__prologue_saves__>:
    36b6:	2f 92       	push	r2
    36b8:	3f 92       	push	r3
    36ba:	4f 92       	push	r4
    36bc:	5f 92       	push	r5
    36be:	6f 92       	push	r6
    36c0:	7f 92       	push	r7
    36c2:	8f 92       	push	r8
    36c4:	9f 92       	push	r9
    36c6:	af 92       	push	r10
    36c8:	bf 92       	push	r11
    36ca:	cf 92       	push	r12
    36cc:	df 92       	push	r13
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	ca 1b       	sub	r28, r26
    36e0:	db 0b       	sbc	r29, r27
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	09 94       	ijmp

000036ee <__epilogue_restores__>:
    36ee:	2a 88       	ldd	r2, Y+18	; 0x12
    36f0:	39 88       	ldd	r3, Y+17	; 0x11
    36f2:	48 88       	ldd	r4, Y+16	; 0x10
    36f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    36fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    36fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3700:	b9 84       	ldd	r11, Y+9	; 0x09
    3702:	c8 84       	ldd	r12, Y+8	; 0x08
    3704:	df 80       	ldd	r13, Y+7	; 0x07
    3706:	ee 80       	ldd	r14, Y+6	; 0x06
    3708:	fd 80       	ldd	r15, Y+5	; 0x05
    370a:	0c 81       	ldd	r16, Y+4	; 0x04
    370c:	1b 81       	ldd	r17, Y+3	; 0x03
    370e:	aa 81       	ldd	r26, Y+2	; 0x02
    3710:	b9 81       	ldd	r27, Y+1	; 0x01
    3712:	ce 0f       	add	r28, r30
    3714:	d1 1d       	adc	r29, r1
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	ed 01       	movw	r28, r26
    3722:	08 95       	ret

00003724 <_exit>:
    3724:	f8 94       	cli

00003726 <__stop_program>:
    3726:	ff cf       	rjmp	.-2      	; 0x3726 <__stop_program>
