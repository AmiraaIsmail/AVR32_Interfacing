
TMR0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001278  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000010  00800060  00800060  000012ec  2**0
                  ALLOC
  2 .stab         000012f0  00000000  00000000  000012ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009f8  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_1>
       8:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__vector_2>
       c:	0c 94 93 07 	jmp	0xf26	; 0xf26 <__vector_3>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 cf 08 	jmp	0x119e	; 0x119e <__vector_10>
      2c:	0c 94 83 08 	jmp	0x1106	; 0x1106 <__vector_11>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 1a 09 	call	0x1234	; 0x1234 <main>
      74:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_voidSetPinDirection>:


                         /*************** PIN APIS ***************/

void DIO_voidSetPinDirection(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	cd b7       	in	r28, 0x3d	; 61
      82:	de b7       	in	r29, 0x3e	; 62
      84:	27 97       	sbiw	r28, 0x07	; 7
      86:	0f b6       	in	r0, 0x3f	; 63
      88:	f8 94       	cli
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	0f be       	out	0x3f, r0	; 63
      8e:	cd bf       	out	0x3d, r28	; 61
      90:	89 83       	std	Y+1, r24	; 0x01
      92:	6a 83       	std	Y+2, r22	; 0x02
      94:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
      96:	8a 81       	ldd	r24, Y+2	; 0x02
      98:	88 30       	cpi	r24, 0x08	; 8
      9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_voidSetPinDirection+0x22>
      9c:	ea c0       	rjmp	.+468    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
	{
		if(copy_u8PinDirection == DIO_PIN_OUTPUT)
      9e:	8b 81       	ldd	r24, Y+3	; 0x03
      a0:	81 30       	cpi	r24, 0x01	; 1
      a2:	09 f0       	breq	.+2      	; 0xa6 <DIO_voidSetPinDirection+0x2a>
      a4:	6f c0       	rjmp	.+222    	; 0x184 <DIO_voidSetPinDirection+0x108>
			switch(copy_u8PortId)
      a6:	89 81       	ldd	r24, Y+1	; 0x01
      a8:	28 2f       	mov	r18, r24
      aa:	30 e0       	ldi	r19, 0x00	; 0
      ac:	3f 83       	std	Y+7, r19	; 0x07
      ae:	2e 83       	std	Y+6, r18	; 0x06
      b0:	8e 81       	ldd	r24, Y+6	; 0x06
      b2:	9f 81       	ldd	r25, Y+7	; 0x07
      b4:	81 30       	cpi	r24, 0x01	; 1
      b6:	91 05       	cpc	r25, r1
      b8:	49 f1       	breq	.+82     	; 0x10c <DIO_voidSetPinDirection+0x90>
      ba:	2e 81       	ldd	r18, Y+6	; 0x06
      bc:	3f 81       	ldd	r19, Y+7	; 0x07
      be:	22 30       	cpi	r18, 0x02	; 2
      c0:	31 05       	cpc	r19, r1
      c2:	2c f4       	brge	.+10     	; 0xce <DIO_voidSetPinDirection+0x52>
      c4:	8e 81       	ldd	r24, Y+6	; 0x06
      c6:	9f 81       	ldd	r25, Y+7	; 0x07
      c8:	00 97       	sbiw	r24, 0x00	; 0
      ca:	61 f0       	breq	.+24     	; 0xe4 <DIO_voidSetPinDirection+0x68>
      cc:	d2 c0       	rjmp	.+420    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
      ce:	2e 81       	ldd	r18, Y+6	; 0x06
      d0:	3f 81       	ldd	r19, Y+7	; 0x07
      d2:	22 30       	cpi	r18, 0x02	; 2
      d4:	31 05       	cpc	r19, r1
      d6:	71 f1       	breq	.+92     	; 0x134 <DIO_voidSetPinDirection+0xb8>
      d8:	8e 81       	ldd	r24, Y+6	; 0x06
      da:	9f 81       	ldd	r25, Y+7	; 0x07
      dc:	83 30       	cpi	r24, 0x03	; 3
      de:	91 05       	cpc	r25, r1
      e0:	e9 f1       	breq	.+122    	; 0x15c <DIO_voidSetPinDirection+0xe0>
      e2:	c7 c0       	rjmp	.+398    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:SET_BIT(DDRA,copy_u8PinId);break;
      e4:	aa e3       	ldi	r26, 0x3A	; 58
      e6:	b0 e0       	ldi	r27, 0x00	; 0
      e8:	ea e3       	ldi	r30, 0x3A	; 58
      ea:	f0 e0       	ldi	r31, 0x00	; 0
      ec:	80 81       	ld	r24, Z
      ee:	48 2f       	mov	r20, r24
      f0:	8a 81       	ldd	r24, Y+2	; 0x02
      f2:	28 2f       	mov	r18, r24
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	02 2e       	mov	r0, r18
      fc:	02 c0       	rjmp	.+4      	; 0x102 <DIO_voidSetPinDirection+0x86>
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	0a 94       	dec	r0
     104:	e2 f7       	brpl	.-8      	; 0xfe <DIO_voidSetPinDirection+0x82>
     106:	84 2b       	or	r24, r20
     108:	8c 93       	st	X, r24
     10a:	b3 c0       	rjmp	.+358    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:SET_BIT(DDRB,copy_u8PinId);break;
     10c:	a7 e3       	ldi	r26, 0x37	; 55
     10e:	b0 e0       	ldi	r27, 0x00	; 0
     110:	e7 e3       	ldi	r30, 0x37	; 55
     112:	f0 e0       	ldi	r31, 0x00	; 0
     114:	80 81       	ld	r24, Z
     116:	48 2f       	mov	r20, r24
     118:	8a 81       	ldd	r24, Y+2	; 0x02
     11a:	28 2f       	mov	r18, r24
     11c:	30 e0       	ldi	r19, 0x00	; 0
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	02 2e       	mov	r0, r18
     124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_voidSetPinDirection+0xae>
     126:	88 0f       	add	r24, r24
     128:	99 1f       	adc	r25, r25
     12a:	0a 94       	dec	r0
     12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_voidSetPinDirection+0xaa>
     12e:	84 2b       	or	r24, r20
     130:	8c 93       	st	X, r24
     132:	9f c0       	rjmp	.+318    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:SET_BIT(DDRC,copy_u8PinId);break;
     134:	a4 e3       	ldi	r26, 0x34	; 52
     136:	b0 e0       	ldi	r27, 0x00	; 0
     138:	e4 e3       	ldi	r30, 0x34	; 52
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
     13e:	48 2f       	mov	r20, r24
     140:	8a 81       	ldd	r24, Y+2	; 0x02
     142:	28 2f       	mov	r18, r24
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	02 2e       	mov	r0, r18
     14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_voidSetPinDirection+0xd6>
     14e:	88 0f       	add	r24, r24
     150:	99 1f       	adc	r25, r25
     152:	0a 94       	dec	r0
     154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_voidSetPinDirection+0xd2>
     156:	84 2b       	or	r24, r20
     158:	8c 93       	st	X, r24
     15a:	8b c0       	rjmp	.+278    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:SET_BIT(DDRD,copy_u8PinId);break;
     15c:	a1 e3       	ldi	r26, 0x31	; 49
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e1 e3       	ldi	r30, 0x31	; 49
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	48 2f       	mov	r20, r24
     168:	8a 81       	ldd	r24, Y+2	; 0x02
     16a:	28 2f       	mov	r18, r24
     16c:	30 e0       	ldi	r19, 0x00	; 0
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	02 2e       	mov	r0, r18
     174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_voidSetPinDirection+0xfe>
     176:	88 0f       	add	r24, r24
     178:	99 1f       	adc	r25, r25
     17a:	0a 94       	dec	r0
     17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_voidSetPinDirection+0xfa>
     17e:	84 2b       	or	r24, r20
     180:	8c 93       	st	X, r24
     182:	77 c0       	rjmp	.+238    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			}
		else if(copy_u8PinDirection == DIO_PIN_INPUT)
     184:	8b 81       	ldd	r24, Y+3	; 0x03
     186:	88 23       	and	r24, r24
     188:	09 f0       	breq	.+2      	; 0x18c <DIO_voidSetPinDirection+0x110>
     18a:	73 c0       	rjmp	.+230    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			switch(copy_u8PortId)
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	28 2f       	mov	r18, r24
     190:	30 e0       	ldi	r19, 0x00	; 0
     192:	3d 83       	std	Y+5, r19	; 0x05
     194:	2c 83       	std	Y+4, r18	; 0x04
     196:	8c 81       	ldd	r24, Y+4	; 0x04
     198:	9d 81       	ldd	r25, Y+5	; 0x05
     19a:	81 30       	cpi	r24, 0x01	; 1
     19c:	91 05       	cpc	r25, r1
     19e:	59 f1       	breq	.+86     	; 0x1f6 <DIO_voidSetPinDirection+0x17a>
     1a0:	2c 81       	ldd	r18, Y+4	; 0x04
     1a2:	3d 81       	ldd	r19, Y+5	; 0x05
     1a4:	22 30       	cpi	r18, 0x02	; 2
     1a6:	31 05       	cpc	r19, r1
     1a8:	2c f4       	brge	.+10     	; 0x1b4 <DIO_voidSetPinDirection+0x138>
     1aa:	8c 81       	ldd	r24, Y+4	; 0x04
     1ac:	9d 81       	ldd	r25, Y+5	; 0x05
     1ae:	00 97       	sbiw	r24, 0x00	; 0
     1b0:	69 f0       	breq	.+26     	; 0x1cc <DIO_voidSetPinDirection+0x150>
     1b2:	5f c0       	rjmp	.+190    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
     1b4:	2c 81       	ldd	r18, Y+4	; 0x04
     1b6:	3d 81       	ldd	r19, Y+5	; 0x05
     1b8:	22 30       	cpi	r18, 0x02	; 2
     1ba:	31 05       	cpc	r19, r1
     1bc:	89 f1       	breq	.+98     	; 0x220 <DIO_voidSetPinDirection+0x1a4>
     1be:	8c 81       	ldd	r24, Y+4	; 0x04
     1c0:	9d 81       	ldd	r25, Y+5	; 0x05
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	91 05       	cpc	r25, r1
     1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_voidSetPinDirection+0x14e>
     1c8:	40 c0       	rjmp	.+128    	; 0x24a <DIO_voidSetPinDirection+0x1ce>
     1ca:	53 c0       	rjmp	.+166    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			{
			case DIO_PORTA:CLR_BIT(DDRA,copy_u8PinId);break;
     1cc:	aa e3       	ldi	r26, 0x3A	; 58
     1ce:	b0 e0       	ldi	r27, 0x00	; 0
     1d0:	ea e3       	ldi	r30, 0x3A	; 58
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	48 2f       	mov	r20, r24
     1d8:	8a 81       	ldd	r24, Y+2	; 0x02
     1da:	28 2f       	mov	r18, r24
     1dc:	30 e0       	ldi	r19, 0x00	; 0
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	02 2e       	mov	r0, r18
     1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_voidSetPinDirection+0x16e>
     1e6:	88 0f       	add	r24, r24
     1e8:	99 1f       	adc	r25, r25
     1ea:	0a 94       	dec	r0
     1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_voidSetPinDirection+0x16a>
     1ee:	80 95       	com	r24
     1f0:	84 23       	and	r24, r20
     1f2:	8c 93       	st	X, r24
     1f4:	3e c0       	rjmp	.+124    	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTB:CLR_BIT(DDRB,copy_u8PinId);break;
     1f6:	a7 e3       	ldi	r26, 0x37	; 55
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	e7 e3       	ldi	r30, 0x37	; 55
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	48 2f       	mov	r20, r24
     202:	8a 81       	ldd	r24, Y+2	; 0x02
     204:	28 2f       	mov	r18, r24
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	02 2e       	mov	r0, r18
     20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_voidSetPinDirection+0x198>
     210:	88 0f       	add	r24, r24
     212:	99 1f       	adc	r25, r25
     214:	0a 94       	dec	r0
     216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_voidSetPinDirection+0x194>
     218:	80 95       	com	r24
     21a:	84 23       	and	r24, r20
     21c:	8c 93       	st	X, r24
     21e:	29 c0       	rjmp	.+82     	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTC:CLR_BIT(DDRC,copy_u8PinId);break;
     220:	a4 e3       	ldi	r26, 0x34	; 52
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	e4 e3       	ldi	r30, 0x34	; 52
     226:	f0 e0       	ldi	r31, 0x00	; 0
     228:	80 81       	ld	r24, Z
     22a:	48 2f       	mov	r20, r24
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	28 2f       	mov	r18, r24
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	02 2e       	mov	r0, r18
     238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_voidSetPinDirection+0x1c2>
     23a:	88 0f       	add	r24, r24
     23c:	99 1f       	adc	r25, r25
     23e:	0a 94       	dec	r0
     240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_voidSetPinDirection+0x1be>
     242:	80 95       	com	r24
     244:	84 23       	and	r24, r20
     246:	8c 93       	st	X, r24
     248:	14 c0       	rjmp	.+40     	; 0x272 <DIO_voidSetPinDirection+0x1f6>
			case DIO_PORTD:CLR_BIT(DDRD,copy_u8PinId);break;
     24a:	a1 e3       	ldi	r26, 0x31	; 49
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	e1 e3       	ldi	r30, 0x31	; 49
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	80 81       	ld	r24, Z
     254:	48 2f       	mov	r20, r24
     256:	8a 81       	ldd	r24, Y+2	; 0x02
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	02 2e       	mov	r0, r18
     262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_voidSetPinDirection+0x1ec>
     264:	88 0f       	add	r24, r24
     266:	99 1f       	adc	r25, r25
     268:	0a 94       	dec	r0
     26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_voidSetPinDirection+0x1e8>
     26c:	80 95       	com	r24
     26e:	84 23       	and	r24, r20
     270:	8c 93       	st	X, r24
			}
	}

}
     272:	27 96       	adiw	r28, 0x07	; 7
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	f8 94       	cli
     278:	de bf       	out	0x3e, r29	; 62
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	cd bf       	out	0x3d, r28	; 61
     27e:	cf 91       	pop	r28
     280:	df 91       	pop	r29
     282:	08 95       	ret

00000284 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
     284:	df 93       	push	r29
     286:	cf 93       	push	r28
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	27 97       	sbiw	r28, 0x07	; 7
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	89 83       	std	Y+1, r24	; 0x01
     29a:	6a 83       	std	Y+2, r22	; 0x02
     29c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
     29e:	8a 81       	ldd	r24, Y+2	; 0x02
     2a0:	88 30       	cpi	r24, 0x08	; 8
     2a2:	08 f0       	brcs	.+2      	; 0x2a6 <DIO_voidSetPinValue+0x22>
     2a4:	ee c0       	rjmp	.+476    	; 0x482 <DIO_voidSetPinValue+0x1fe>
	{
		if(copy_u8PinValue == DIO_PIN_HIGH)
     2a6:	8b 81       	ldd	r24, Y+3	; 0x03
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <DIO_voidSetPinValue+0x2a>
     2ac:	6f c0       	rjmp	.+222    	; 0x38c <DIO_voidSetPinValue+0x108>
		{
			switch(copy_u8PortId)
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	3f 83       	std	Y+7, r19	; 0x07
     2b6:	2e 83       	std	Y+6, r18	; 0x06
     2b8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ba:	9f 81       	ldd	r25, Y+7	; 0x07
     2bc:	81 30       	cpi	r24, 0x01	; 1
     2be:	91 05       	cpc	r25, r1
     2c0:	49 f1       	breq	.+82     	; 0x314 <DIO_voidSetPinValue+0x90>
     2c2:	2e 81       	ldd	r18, Y+6	; 0x06
     2c4:	3f 81       	ldd	r19, Y+7	; 0x07
     2c6:	22 30       	cpi	r18, 0x02	; 2
     2c8:	31 05       	cpc	r19, r1
     2ca:	2c f4       	brge	.+10     	; 0x2d6 <DIO_voidSetPinValue+0x52>
     2cc:	8e 81       	ldd	r24, Y+6	; 0x06
     2ce:	9f 81       	ldd	r25, Y+7	; 0x07
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	61 f0       	breq	.+24     	; 0x2ec <DIO_voidSetPinValue+0x68>
     2d4:	d6 c0       	rjmp	.+428    	; 0x482 <DIO_voidSetPinValue+0x1fe>
     2d6:	2e 81       	ldd	r18, Y+6	; 0x06
     2d8:	3f 81       	ldd	r19, Y+7	; 0x07
     2da:	22 30       	cpi	r18, 0x02	; 2
     2dc:	31 05       	cpc	r19, r1
     2de:	71 f1       	breq	.+92     	; 0x33c <DIO_voidSetPinValue+0xb8>
     2e0:	8e 81       	ldd	r24, Y+6	; 0x06
     2e2:	9f 81       	ldd	r25, Y+7	; 0x07
     2e4:	83 30       	cpi	r24, 0x03	; 3
     2e6:	91 05       	cpc	r25, r1
     2e8:	e9 f1       	breq	.+122    	; 0x364 <DIO_voidSetPinValue+0xe0>
     2ea:	cb c0       	rjmp	.+406    	; 0x482 <DIO_voidSetPinValue+0x1fe>
			{
			case DIO_PORTA:SET_BIT(PORTA,copy_u8PinId);break;
     2ec:	ab e3       	ldi	r26, 0x3B	; 59
     2ee:	b0 e0       	ldi	r27, 0x00	; 0
     2f0:	eb e3       	ldi	r30, 0x3B	; 59
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	80 81       	ld	r24, Z
     2f6:	48 2f       	mov	r20, r24
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	28 2f       	mov	r18, r24
     2fc:	30 e0       	ldi	r19, 0x00	; 0
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	02 2e       	mov	r0, r18
     304:	02 c0       	rjmp	.+4      	; 0x30a <DIO_voidSetPinValue+0x86>
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	0a 94       	dec	r0
     30c:	e2 f7       	brpl	.-8      	; 0x306 <DIO_voidSetPinValue+0x82>
     30e:	84 2b       	or	r24, r20
     310:	8c 93       	st	X, r24
     312:	b7 c0       	rjmp	.+366    	; 0x482 <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTB:SET_BIT(PORTB,copy_u8PinId);break;
     314:	a8 e3       	ldi	r26, 0x38	; 56
     316:	b0 e0       	ldi	r27, 0x00	; 0
     318:	e8 e3       	ldi	r30, 0x38	; 56
     31a:	f0 e0       	ldi	r31, 0x00	; 0
     31c:	80 81       	ld	r24, Z
     31e:	48 2f       	mov	r20, r24
     320:	8a 81       	ldd	r24, Y+2	; 0x02
     322:	28 2f       	mov	r18, r24
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	02 2e       	mov	r0, r18
     32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_voidSetPinValue+0xae>
     32e:	88 0f       	add	r24, r24
     330:	99 1f       	adc	r25, r25
     332:	0a 94       	dec	r0
     334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_voidSetPinValue+0xaa>
     336:	84 2b       	or	r24, r20
     338:	8c 93       	st	X, r24
     33a:	a3 c0       	rjmp	.+326    	; 0x482 <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTC:SET_BIT(PORTC,copy_u8PinId);break;
     33c:	a5 e3       	ldi	r26, 0x35	; 53
     33e:	b0 e0       	ldi	r27, 0x00	; 0
     340:	e5 e3       	ldi	r30, 0x35	; 53
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	80 81       	ld	r24, Z
     346:	48 2f       	mov	r20, r24
     348:	8a 81       	ldd	r24, Y+2	; 0x02
     34a:	28 2f       	mov	r18, r24
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	02 2e       	mov	r0, r18
     354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_voidSetPinValue+0xd6>
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	0a 94       	dec	r0
     35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_voidSetPinValue+0xd2>
     35e:	84 2b       	or	r24, r20
     360:	8c 93       	st	X, r24
     362:	8f c0       	rjmp	.+286    	; 0x482 <DIO_voidSetPinValue+0x1fe>
			case DIO_PORTD:SET_BIT(PORTD,copy_u8PinId);break;
     364:	a2 e3       	ldi	r26, 0x32	; 50
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	e2 e3       	ldi	r30, 0x32	; 50
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	48 2f       	mov	r20, r24
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	28 2f       	mov	r18, r24
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	02 2e       	mov	r0, r18
     37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_voidSetPinValue+0xfe>
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_voidSetPinValue+0xfa>
     386:	84 2b       	or	r24, r20
     388:	8c 93       	st	X, r24
     38a:	7b c0       	rjmp	.+246    	; 0x482 <DIO_voidSetPinValue+0x1fe>
			}
		}

		else if(copy_u8PinId<=7)
     38c:	8a 81       	ldd	r24, Y+2	; 0x02
     38e:	88 30       	cpi	r24, 0x08	; 8
     390:	08 f0       	brcs	.+2      	; 0x394 <DIO_voidSetPinValue+0x110>
     392:	77 c0       	rjmp	.+238    	; 0x482 <DIO_voidSetPinValue+0x1fe>
		{
			if(copy_u8PinValue == DIO_PIN_LOW)
     394:	8b 81       	ldd	r24, Y+3	; 0x03
     396:	88 23       	and	r24, r24
     398:	09 f0       	breq	.+2      	; 0x39c <DIO_voidSetPinValue+0x118>
     39a:	73 c0       	rjmp	.+230    	; 0x482 <DIO_voidSetPinValue+0x1fe>
			{
				switch(copy_u8PortId)
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	28 2f       	mov	r18, r24
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	3d 83       	std	Y+5, r19	; 0x05
     3a4:	2c 83       	std	Y+4, r18	; 0x04
     3a6:	8c 81       	ldd	r24, Y+4	; 0x04
     3a8:	9d 81       	ldd	r25, Y+5	; 0x05
     3aa:	81 30       	cpi	r24, 0x01	; 1
     3ac:	91 05       	cpc	r25, r1
     3ae:	59 f1       	breq	.+86     	; 0x406 <DIO_voidSetPinValue+0x182>
     3b0:	2c 81       	ldd	r18, Y+4	; 0x04
     3b2:	3d 81       	ldd	r19, Y+5	; 0x05
     3b4:	22 30       	cpi	r18, 0x02	; 2
     3b6:	31 05       	cpc	r19, r1
     3b8:	2c f4       	brge	.+10     	; 0x3c4 <DIO_voidSetPinValue+0x140>
     3ba:	8c 81       	ldd	r24, Y+4	; 0x04
     3bc:	9d 81       	ldd	r25, Y+5	; 0x05
     3be:	00 97       	sbiw	r24, 0x00	; 0
     3c0:	69 f0       	breq	.+26     	; 0x3dc <DIO_voidSetPinValue+0x158>
     3c2:	5f c0       	rjmp	.+190    	; 0x482 <DIO_voidSetPinValue+0x1fe>
     3c4:	2c 81       	ldd	r18, Y+4	; 0x04
     3c6:	3d 81       	ldd	r19, Y+5	; 0x05
     3c8:	22 30       	cpi	r18, 0x02	; 2
     3ca:	31 05       	cpc	r19, r1
     3cc:	89 f1       	breq	.+98     	; 0x430 <DIO_voidSetPinValue+0x1ac>
     3ce:	8c 81       	ldd	r24, Y+4	; 0x04
     3d0:	9d 81       	ldd	r25, Y+5	; 0x05
     3d2:	83 30       	cpi	r24, 0x03	; 3
     3d4:	91 05       	cpc	r25, r1
     3d6:	09 f4       	brne	.+2      	; 0x3da <DIO_voidSetPinValue+0x156>
     3d8:	40 c0       	rjmp	.+128    	; 0x45a <DIO_voidSetPinValue+0x1d6>
     3da:	53 c0       	rjmp	.+166    	; 0x482 <DIO_voidSetPinValue+0x1fe>
				{
				case DIO_PORTA:CLR_BIT(PORTA,copy_u8PinId);break;
     3dc:	ab e3       	ldi	r26, 0x3B	; 59
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	eb e3       	ldi	r30, 0x3B	; 59
     3e2:	f0 e0       	ldi	r31, 0x00	; 0
     3e4:	80 81       	ld	r24, Z
     3e6:	48 2f       	mov	r20, r24
     3e8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ea:	28 2f       	mov	r18, r24
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	02 2e       	mov	r0, r18
     3f4:	02 c0       	rjmp	.+4      	; 0x3fa <DIO_voidSetPinValue+0x176>
     3f6:	88 0f       	add	r24, r24
     3f8:	99 1f       	adc	r25, r25
     3fa:	0a 94       	dec	r0
     3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <DIO_voidSetPinValue+0x172>
     3fe:	80 95       	com	r24
     400:	84 23       	and	r24, r20
     402:	8c 93       	st	X, r24
     404:	3e c0       	rjmp	.+124    	; 0x482 <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTB:CLR_BIT(PORTB,copy_u8PinId);break;
     406:	a8 e3       	ldi	r26, 0x38	; 56
     408:	b0 e0       	ldi	r27, 0x00	; 0
     40a:	e8 e3       	ldi	r30, 0x38	; 56
     40c:	f0 e0       	ldi	r31, 0x00	; 0
     40e:	80 81       	ld	r24, Z
     410:	48 2f       	mov	r20, r24
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	28 2f       	mov	r18, r24
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	02 2e       	mov	r0, r18
     41e:	02 c0       	rjmp	.+4      	; 0x424 <DIO_voidSetPinValue+0x1a0>
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	0a 94       	dec	r0
     426:	e2 f7       	brpl	.-8      	; 0x420 <DIO_voidSetPinValue+0x19c>
     428:	80 95       	com	r24
     42a:	84 23       	and	r24, r20
     42c:	8c 93       	st	X, r24
     42e:	29 c0       	rjmp	.+82     	; 0x482 <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTC:CLR_BIT(PORTC,copy_u8PinId);break;
     430:	a5 e3       	ldi	r26, 0x35	; 53
     432:	b0 e0       	ldi	r27, 0x00	; 0
     434:	e5 e3       	ldi	r30, 0x35	; 53
     436:	f0 e0       	ldi	r31, 0x00	; 0
     438:	80 81       	ld	r24, Z
     43a:	48 2f       	mov	r20, r24
     43c:	8a 81       	ldd	r24, Y+2	; 0x02
     43e:	28 2f       	mov	r18, r24
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	02 2e       	mov	r0, r18
     448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_voidSetPinValue+0x1ca>
     44a:	88 0f       	add	r24, r24
     44c:	99 1f       	adc	r25, r25
     44e:	0a 94       	dec	r0
     450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_voidSetPinValue+0x1c6>
     452:	80 95       	com	r24
     454:	84 23       	and	r24, r20
     456:	8c 93       	st	X, r24
     458:	14 c0       	rjmp	.+40     	; 0x482 <DIO_voidSetPinValue+0x1fe>
				case DIO_PORTD:CLR_BIT(PORTD,copy_u8PinId);break;
     45a:	a2 e3       	ldi	r26, 0x32	; 50
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e2 e3       	ldi	r30, 0x32	; 50
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	48 2f       	mov	r20, r24
     466:	8a 81       	ldd	r24, Y+2	; 0x02
     468:	28 2f       	mov	r18, r24
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	02 2e       	mov	r0, r18
     472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_voidSetPinValue+0x1f4>
     474:	88 0f       	add	r24, r24
     476:	99 1f       	adc	r25, r25
     478:	0a 94       	dec	r0
     47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_voidSetPinValue+0x1f0>
     47c:	80 95       	com	r24
     47e:	84 23       	and	r24, r20
     480:	8c 93       	st	X, r24
				}
			}
		}
	}
}
     482:	27 96       	adiw	r28, 0x07	; 7
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	cf 91       	pop	r28
     490:	df 91       	pop	r29
     492:	08 95       	ret

00000494 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 copy_u8PortId, u8 copy_u8PinId, u8 *copy_pu8_PinValue)
{
     494:	df 93       	push	r29
     496:	cf 93       	push	r28
     498:	00 d0       	rcall	.+0      	; 0x49a <DIO_voidGetPinValue+0x6>
     49a:	00 d0       	rcall	.+0      	; 0x49c <DIO_voidGetPinValue+0x8>
     49c:	00 d0       	rcall	.+0      	; 0x49e <DIO_voidGetPinValue+0xa>
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	89 83       	std	Y+1, r24	; 0x01
     4a4:	6a 83       	std	Y+2, r22	; 0x02
     4a6:	5c 83       	std	Y+4, r21	; 0x04
     4a8:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	88 30       	cpi	r24, 0x08	; 8
     4ae:	08 f0       	brcs	.+2      	; 0x4b2 <DIO_voidGetPinValue+0x1e>
     4b0:	70 c0       	rjmp	.+224    	; 0x592 <DIO_voidGetPinValue+0xfe>
	{
		switch(copy_u8PortId)
     4b2:	89 81       	ldd	r24, Y+1	; 0x01
     4b4:	28 2f       	mov	r18, r24
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	3e 83       	std	Y+6, r19	; 0x06
     4ba:	2d 83       	std	Y+5, r18	; 0x05
     4bc:	4d 81       	ldd	r20, Y+5	; 0x05
     4be:	5e 81       	ldd	r21, Y+6	; 0x06
     4c0:	41 30       	cpi	r20, 0x01	; 1
     4c2:	51 05       	cpc	r21, r1
     4c4:	59 f1       	breq	.+86     	; 0x51c <DIO_voidGetPinValue+0x88>
     4c6:	8d 81       	ldd	r24, Y+5	; 0x05
     4c8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ca:	82 30       	cpi	r24, 0x02	; 2
     4cc:	91 05       	cpc	r25, r1
     4ce:	34 f4       	brge	.+12     	; 0x4dc <DIO_voidGetPinValue+0x48>
     4d0:	2d 81       	ldd	r18, Y+5	; 0x05
     4d2:	3e 81       	ldd	r19, Y+6	; 0x06
     4d4:	21 15       	cp	r18, r1
     4d6:	31 05       	cpc	r19, r1
     4d8:	69 f0       	breq	.+26     	; 0x4f4 <DIO_voidGetPinValue+0x60>
     4da:	5b c0       	rjmp	.+182    	; 0x592 <DIO_voidGetPinValue+0xfe>
     4dc:	4d 81       	ldd	r20, Y+5	; 0x05
     4de:	5e 81       	ldd	r21, Y+6	; 0x06
     4e0:	42 30       	cpi	r20, 0x02	; 2
     4e2:	51 05       	cpc	r21, r1
     4e4:	79 f1       	breq	.+94     	; 0x544 <DIO_voidGetPinValue+0xb0>
     4e6:	8d 81       	ldd	r24, Y+5	; 0x05
     4e8:	9e 81       	ldd	r25, Y+6	; 0x06
     4ea:	83 30       	cpi	r24, 0x03	; 3
     4ec:	91 05       	cpc	r25, r1
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <DIO_voidGetPinValue+0x5e>
     4f0:	3d c0       	rjmp	.+122    	; 0x56c <DIO_voidGetPinValue+0xd8>
     4f2:	4f c0       	rjmp	.+158    	; 0x592 <DIO_voidGetPinValue+0xfe>
		{
		case DIO_PORTA:*copy_pu8_PinValue = GET_BIT(PINA,copy_u8PinId);break;
     4f4:	e9 e3       	ldi	r30, 0x39	; 57
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	28 2f       	mov	r18, r24
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	8a 81       	ldd	r24, Y+2	; 0x02
     500:	88 2f       	mov	r24, r24
     502:	90 e0       	ldi	r25, 0x00	; 0
     504:	a9 01       	movw	r20, r18
     506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_voidGetPinValue+0x78>
     508:	55 95       	asr	r21
     50a:	47 95       	ror	r20
     50c:	8a 95       	dec	r24
     50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_voidGetPinValue+0x74>
     510:	ca 01       	movw	r24, r20
     512:	81 70       	andi	r24, 0x01	; 1
     514:	eb 81       	ldd	r30, Y+3	; 0x03
     516:	fc 81       	ldd	r31, Y+4	; 0x04
     518:	80 83       	st	Z, r24
     51a:	3b c0       	rjmp	.+118    	; 0x592 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTB:*copy_pu8_PinValue = GET_BIT(PINB,copy_u8PinId);break;
     51c:	e6 e3       	ldi	r30, 0x36	; 54
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	28 2f       	mov	r18, r24
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	88 2f       	mov	r24, r24
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	a9 01       	movw	r20, r18
     52e:	02 c0       	rjmp	.+4      	; 0x534 <DIO_voidGetPinValue+0xa0>
     530:	55 95       	asr	r21
     532:	47 95       	ror	r20
     534:	8a 95       	dec	r24
     536:	e2 f7       	brpl	.-8      	; 0x530 <DIO_voidGetPinValue+0x9c>
     538:	ca 01       	movw	r24, r20
     53a:	81 70       	andi	r24, 0x01	; 1
     53c:	eb 81       	ldd	r30, Y+3	; 0x03
     53e:	fc 81       	ldd	r31, Y+4	; 0x04
     540:	80 83       	st	Z, r24
     542:	27 c0       	rjmp	.+78     	; 0x592 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTC:*copy_pu8_PinValue = GET_BIT(PINC,copy_u8PinId);break;
     544:	e3 e3       	ldi	r30, 0x33	; 51
     546:	f0 e0       	ldi	r31, 0x00	; 0
     548:	80 81       	ld	r24, Z
     54a:	28 2f       	mov	r18, r24
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	a9 01       	movw	r20, r18
     556:	02 c0       	rjmp	.+4      	; 0x55c <DIO_voidGetPinValue+0xc8>
     558:	55 95       	asr	r21
     55a:	47 95       	ror	r20
     55c:	8a 95       	dec	r24
     55e:	e2 f7       	brpl	.-8      	; 0x558 <DIO_voidGetPinValue+0xc4>
     560:	ca 01       	movw	r24, r20
     562:	81 70       	andi	r24, 0x01	; 1
     564:	eb 81       	ldd	r30, Y+3	; 0x03
     566:	fc 81       	ldd	r31, Y+4	; 0x04
     568:	80 83       	st	Z, r24
     56a:	13 c0       	rjmp	.+38     	; 0x592 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTD:*copy_pu8_PinValue = GET_BIT(PIND,copy_u8PinId);break;
     56c:	e0 e3       	ldi	r30, 0x30	; 48
     56e:	f0 e0       	ldi	r31, 0x00	; 0
     570:	80 81       	ld	r24, Z
     572:	28 2f       	mov	r18, r24
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	88 2f       	mov	r24, r24
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	a9 01       	movw	r20, r18
     57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_voidGetPinValue+0xf0>
     580:	55 95       	asr	r21
     582:	47 95       	ror	r20
     584:	8a 95       	dec	r24
     586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_voidGetPinValue+0xec>
     588:	ca 01       	movw	r24, r20
     58a:	81 70       	andi	r24, 0x01	; 1
     58c:	eb 81       	ldd	r30, Y+3	; 0x03
     58e:	fc 81       	ldd	r31, Y+4	; 0x04
     590:	80 83       	st	Z, r24
		}
	}
}
     592:	26 96       	adiw	r28, 0x06	; 6
     594:	0f b6       	in	r0, 0x3f	; 63
     596:	f8 94       	cli
     598:	de bf       	out	0x3e, r29	; 62
     59a:	0f be       	out	0x3f, r0	; 63
     59c:	cd bf       	out	0x3d, r28	; 61
     59e:	cf 91       	pop	r28
     5a0:	df 91       	pop	r29
     5a2:	08 95       	ret

000005a4 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
     5a4:	df 93       	push	r29
     5a6:	cf 93       	push	r28
     5a8:	00 d0       	rcall	.+0      	; 0x5aa <DIO_u8GetPinValue+0x6>
     5aa:	00 d0       	rcall	.+0      	; 0x5ac <DIO_u8GetPinValue+0x8>
     5ac:	0f 92       	push	r0
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	8a 83       	std	Y+2, r24	; 0x02
     5b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Reading;
	if(copy_u8PinId<=7)
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	88 30       	cpi	r24, 0x08	; 8
     5ba:	08 f0       	brcs	.+2      	; 0x5be <DIO_u8GetPinValue+0x1a>
     5bc:	67 c0       	rjmp	.+206    	; 0x68c <DIO_u8GetPinValue+0xe8>
	{
		switch(copy_u8PortId)
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	28 2f       	mov	r18, r24
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	3d 83       	std	Y+5, r19	; 0x05
     5c6:	2c 83       	std	Y+4, r18	; 0x04
     5c8:	4c 81       	ldd	r20, Y+4	; 0x04
     5ca:	5d 81       	ldd	r21, Y+5	; 0x05
     5cc:	41 30       	cpi	r20, 0x01	; 1
     5ce:	51 05       	cpc	r21, r1
     5d0:	41 f1       	breq	.+80     	; 0x622 <DIO_u8GetPinValue+0x7e>
     5d2:	8c 81       	ldd	r24, Y+4	; 0x04
     5d4:	9d 81       	ldd	r25, Y+5	; 0x05
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	91 05       	cpc	r25, r1
     5da:	34 f4       	brge	.+12     	; 0x5e8 <DIO_u8GetPinValue+0x44>
     5dc:	2c 81       	ldd	r18, Y+4	; 0x04
     5de:	3d 81       	ldd	r19, Y+5	; 0x05
     5e0:	21 15       	cp	r18, r1
     5e2:	31 05       	cpc	r19, r1
     5e4:	61 f0       	breq	.+24     	; 0x5fe <DIO_u8GetPinValue+0x5a>
     5e6:	52 c0       	rjmp	.+164    	; 0x68c <DIO_u8GetPinValue+0xe8>
     5e8:	4c 81       	ldd	r20, Y+4	; 0x04
     5ea:	5d 81       	ldd	r21, Y+5	; 0x05
     5ec:	42 30       	cpi	r20, 0x02	; 2
     5ee:	51 05       	cpc	r21, r1
     5f0:	51 f1       	breq	.+84     	; 0x646 <DIO_u8GetPinValue+0xa2>
     5f2:	8c 81       	ldd	r24, Y+4	; 0x04
     5f4:	9d 81       	ldd	r25, Y+5	; 0x05
     5f6:	83 30       	cpi	r24, 0x03	; 3
     5f8:	91 05       	cpc	r25, r1
     5fa:	b9 f1       	breq	.+110    	; 0x66a <DIO_u8GetPinValue+0xc6>
     5fc:	47 c0       	rjmp	.+142    	; 0x68c <DIO_u8GetPinValue+0xe8>
		{
		case DIO_PORTA:Local_u8Reading = GET_BIT(PINA,copy_u8PinId);break;
     5fe:	e9 e3       	ldi	r30, 0x39	; 57
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	28 2f       	mov	r18, r24
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	88 2f       	mov	r24, r24
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	a9 01       	movw	r20, r18
     610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_u8GetPinValue+0x72>
     612:	55 95       	asr	r21
     614:	47 95       	ror	r20
     616:	8a 95       	dec	r24
     618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_u8GetPinValue+0x6e>
     61a:	ca 01       	movw	r24, r20
     61c:	81 70       	andi	r24, 0x01	; 1
     61e:	89 83       	std	Y+1, r24	; 0x01
     620:	35 c0       	rjmp	.+106    	; 0x68c <DIO_u8GetPinValue+0xe8>
		case DIO_PORTB:Local_u8Reading = GET_BIT(PINB,copy_u8PinId);break;
     622:	e6 e3       	ldi	r30, 0x36	; 54
     624:	f0 e0       	ldi	r31, 0x00	; 0
     626:	80 81       	ld	r24, Z
     628:	28 2f       	mov	r18, r24
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	88 2f       	mov	r24, r24
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	a9 01       	movw	r20, r18
     634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_u8GetPinValue+0x96>
     636:	55 95       	asr	r21
     638:	47 95       	ror	r20
     63a:	8a 95       	dec	r24
     63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_u8GetPinValue+0x92>
     63e:	ca 01       	movw	r24, r20
     640:	81 70       	andi	r24, 0x01	; 1
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	23 c0       	rjmp	.+70     	; 0x68c <DIO_u8GetPinValue+0xe8>
		case DIO_PORTC:Local_u8Reading = GET_BIT(PINC,copy_u8PinId);break;
     646:	e3 e3       	ldi	r30, 0x33	; 51
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	28 2f       	mov	r18, r24
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	a9 01       	movw	r20, r18
     658:	02 c0       	rjmp	.+4      	; 0x65e <DIO_u8GetPinValue+0xba>
     65a:	55 95       	asr	r21
     65c:	47 95       	ror	r20
     65e:	8a 95       	dec	r24
     660:	e2 f7       	brpl	.-8      	; 0x65a <DIO_u8GetPinValue+0xb6>
     662:	ca 01       	movw	r24, r20
     664:	81 70       	andi	r24, 0x01	; 1
     666:	89 83       	std	Y+1, r24	; 0x01
     668:	11 c0       	rjmp	.+34     	; 0x68c <DIO_u8GetPinValue+0xe8>
		case DIO_PORTD:Local_u8Reading = GET_BIT(PIND,copy_u8PinId);break;
     66a:	e0 e3       	ldi	r30, 0x30	; 48
     66c:	f0 e0       	ldi	r31, 0x00	; 0
     66e:	80 81       	ld	r24, Z
     670:	28 2f       	mov	r18, r24
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	8b 81       	ldd	r24, Y+3	; 0x03
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	a9 01       	movw	r20, r18
     67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_u8GetPinValue+0xde>
     67e:	55 95       	asr	r21
     680:	47 95       	ror	r20
     682:	8a 95       	dec	r24
     684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_u8GetPinValue+0xda>
     686:	ca 01       	movw	r24, r20
     688:	81 70       	andi	r24, 0x01	; 1
     68a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8Reading;
     68c:	89 81       	ldd	r24, Y+1	; 0x01
}
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	cf 91       	pop	r28
     69a:	df 91       	pop	r29
     69c:	08 95       	ret

0000069e <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 copy_u8PortId, u8 copy_u8PinId)
{
     69e:	df 93       	push	r29
     6a0:	cf 93       	push	r28
     6a2:	00 d0       	rcall	.+0      	; 0x6a4 <DIO_voidTogglePinValue+0x6>
     6a4:	00 d0       	rcall	.+0      	; 0x6a6 <DIO_voidTogglePinValue+0x8>
     6a6:	cd b7       	in	r28, 0x3d	; 61
     6a8:	de b7       	in	r29, 0x3e	; 62
     6aa:	89 83       	std	Y+1, r24	; 0x01
     6ac:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
     6ae:	89 81       	ldd	r24, Y+1	; 0x01
     6b0:	28 2f       	mov	r18, r24
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	3c 83       	std	Y+4, r19	; 0x04
     6b6:	2b 83       	std	Y+3, r18	; 0x03
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	91 05       	cpc	r25, r1
     6c0:	49 f1       	breq	.+82     	; 0x714 <DIO_voidTogglePinValue+0x76>
     6c2:	2b 81       	ldd	r18, Y+3	; 0x03
     6c4:	3c 81       	ldd	r19, Y+4	; 0x04
     6c6:	22 30       	cpi	r18, 0x02	; 2
     6c8:	31 05       	cpc	r19, r1
     6ca:	2c f4       	brge	.+10     	; 0x6d6 <DIO_voidTogglePinValue+0x38>
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	61 f0       	breq	.+24     	; 0x6ec <DIO_voidTogglePinValue+0x4e>
     6d4:	5a c0       	rjmp	.+180    	; 0x78a <DIO_voidTogglePinValue+0xec>
     6d6:	2b 81       	ldd	r18, Y+3	; 0x03
     6d8:	3c 81       	ldd	r19, Y+4	; 0x04
     6da:	22 30       	cpi	r18, 0x02	; 2
     6dc:	31 05       	cpc	r19, r1
     6de:	71 f1       	breq	.+92     	; 0x73c <DIO_voidTogglePinValue+0x9e>
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	91 05       	cpc	r25, r1
     6e8:	e9 f1       	breq	.+122    	; 0x764 <DIO_voidTogglePinValue+0xc6>
     6ea:	4f c0       	rjmp	.+158    	; 0x78a <DIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA: TOG_BIT(PORTA, copy_u8PinId); break;
     6ec:	ab e3       	ldi	r26, 0x3B	; 59
     6ee:	b0 e0       	ldi	r27, 0x00	; 0
     6f0:	eb e3       	ldi	r30, 0x3B	; 59
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	80 81       	ld	r24, Z
     6f6:	48 2f       	mov	r20, r24
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	28 2f       	mov	r18, r24
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	02 2e       	mov	r0, r18
     704:	02 c0       	rjmp	.+4      	; 0x70a <DIO_voidTogglePinValue+0x6c>
     706:	88 0f       	add	r24, r24
     708:	99 1f       	adc	r25, r25
     70a:	0a 94       	dec	r0
     70c:	e2 f7       	brpl	.-8      	; 0x706 <DIO_voidTogglePinValue+0x68>
     70e:	84 27       	eor	r24, r20
     710:	8c 93       	st	X, r24
     712:	3b c0       	rjmp	.+118    	; 0x78a <DIO_voidTogglePinValue+0xec>
	case DIO_PORTB: TOG_BIT(PORTB, copy_u8PinId); break;
     714:	a8 e3       	ldi	r26, 0x38	; 56
     716:	b0 e0       	ldi	r27, 0x00	; 0
     718:	e8 e3       	ldi	r30, 0x38	; 56
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	80 81       	ld	r24, Z
     71e:	48 2f       	mov	r20, r24
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	28 2f       	mov	r18, r24
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	02 2e       	mov	r0, r18
     72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_voidTogglePinValue+0x94>
     72e:	88 0f       	add	r24, r24
     730:	99 1f       	adc	r25, r25
     732:	0a 94       	dec	r0
     734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_voidTogglePinValue+0x90>
     736:	84 27       	eor	r24, r20
     738:	8c 93       	st	X, r24
     73a:	27 c0       	rjmp	.+78     	; 0x78a <DIO_voidTogglePinValue+0xec>
	case DIO_PORTC: TOG_BIT(PORTC, copy_u8PinId); break;
     73c:	a5 e3       	ldi	r26, 0x35	; 53
     73e:	b0 e0       	ldi	r27, 0x00	; 0
     740:	e5 e3       	ldi	r30, 0x35	; 53
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	48 2f       	mov	r20, r24
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	02 2e       	mov	r0, r18
     754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_voidTogglePinValue+0xbc>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	0a 94       	dec	r0
     75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_voidTogglePinValue+0xb8>
     75e:	84 27       	eor	r24, r20
     760:	8c 93       	st	X, r24
     762:	13 c0       	rjmp	.+38     	; 0x78a <DIO_voidTogglePinValue+0xec>
	case DIO_PORTD: TOG_BIT(PORTD, copy_u8PinId); break;
     764:	a2 e3       	ldi	r26, 0x32	; 50
     766:	b0 e0       	ldi	r27, 0x00	; 0
     768:	e2 e3       	ldi	r30, 0x32	; 50
     76a:	f0 e0       	ldi	r31, 0x00	; 0
     76c:	80 81       	ld	r24, Z
     76e:	48 2f       	mov	r20, r24
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	28 2f       	mov	r18, r24
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	81 e0       	ldi	r24, 0x01	; 1
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	02 2e       	mov	r0, r18
     77c:	02 c0       	rjmp	.+4      	; 0x782 <DIO_voidTogglePinValue+0xe4>
     77e:	88 0f       	add	r24, r24
     780:	99 1f       	adc	r25, r25
     782:	0a 94       	dec	r0
     784:	e2 f7       	brpl	.-8      	; 0x77e <DIO_voidTogglePinValue+0xe0>
     786:	84 27       	eor	r24, r20
     788:	8c 93       	st	X, r24
	}
}
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	0f 90       	pop	r0
     792:	cf 91       	pop	r28
     794:	df 91       	pop	r29
     796:	08 95       	ret

00000798 <DIO_voidActivePinInPullUpResistance>:

void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
     798:	df 93       	push	r29
     79a:	cf 93       	push	r28
     79c:	00 d0       	rcall	.+0      	; 0x79e <DIO_voidActivePinInPullUpResistance+0x6>
     79e:	00 d0       	rcall	.+0      	; 0x7a0 <DIO_voidActivePinInPullUpResistance+0x8>
     7a0:	cd b7       	in	r28, 0x3d	; 61
     7a2:	de b7       	in	r29, 0x3e	; 62
     7a4:	89 83       	std	Y+1, r24	; 0x01
     7a6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	28 2f       	mov	r18, r24
     7ac:	30 e0       	ldi	r19, 0x00	; 0
     7ae:	3c 83       	std	Y+4, r19	; 0x04
     7b0:	2b 83       	std	Y+3, r18	; 0x03
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	9c 81       	ldd	r25, Y+4	; 0x04
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	91 05       	cpc	r25, r1
     7ba:	49 f1       	breq	.+82     	; 0x80e <DIO_voidActivePinInPullUpResistance+0x76>
     7bc:	2b 81       	ldd	r18, Y+3	; 0x03
     7be:	3c 81       	ldd	r19, Y+4	; 0x04
     7c0:	22 30       	cpi	r18, 0x02	; 2
     7c2:	31 05       	cpc	r19, r1
     7c4:	2c f4       	brge	.+10     	; 0x7d0 <DIO_voidActivePinInPullUpResistance+0x38>
     7c6:	8b 81       	ldd	r24, Y+3	; 0x03
     7c8:	9c 81       	ldd	r25, Y+4	; 0x04
     7ca:	00 97       	sbiw	r24, 0x00	; 0
     7cc:	61 f0       	breq	.+24     	; 0x7e6 <DIO_voidActivePinInPullUpResistance+0x4e>
     7ce:	5a c0       	rjmp	.+180    	; 0x884 <__stack+0x25>
     7d0:	2b 81       	ldd	r18, Y+3	; 0x03
     7d2:	3c 81       	ldd	r19, Y+4	; 0x04
     7d4:	22 30       	cpi	r18, 0x02	; 2
     7d6:	31 05       	cpc	r19, r1
     7d8:	71 f1       	breq	.+92     	; 0x836 <DIO_voidActivePinInPullUpResistance+0x9e>
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	83 30       	cpi	r24, 0x03	; 3
     7e0:	91 05       	cpc	r25, r1
     7e2:	e9 f1       	breq	.+122    	; 0x85e <DIO_voidActivePinInPullUpResistance+0xc6>
     7e4:	4f c0       	rjmp	.+158    	; 0x884 <__stack+0x25>
	{
	case DIO_PORTA: SET_BIT(PORTA, copy_u8PinId); break;
     7e6:	ab e3       	ldi	r26, 0x3B	; 59
     7e8:	b0 e0       	ldi	r27, 0x00	; 0
     7ea:	eb e3       	ldi	r30, 0x3B	; 59
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	48 2f       	mov	r20, r24
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	28 2f       	mov	r18, r24
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	02 2e       	mov	r0, r18
     7fe:	02 c0       	rjmp	.+4      	; 0x804 <DIO_voidActivePinInPullUpResistance+0x6c>
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	0a 94       	dec	r0
     806:	e2 f7       	brpl	.-8      	; 0x800 <DIO_voidActivePinInPullUpResistance+0x68>
     808:	84 2b       	or	r24, r20
     80a:	8c 93       	st	X, r24
     80c:	3b c0       	rjmp	.+118    	; 0x884 <__stack+0x25>
	case DIO_PORTB: SET_BIT(PORTB, copy_u8PinId); break;
     80e:	a8 e3       	ldi	r26, 0x38	; 56
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	e8 e3       	ldi	r30, 0x38	; 56
     814:	f0 e0       	ldi	r31, 0x00	; 0
     816:	80 81       	ld	r24, Z
     818:	48 2f       	mov	r20, r24
     81a:	8a 81       	ldd	r24, Y+2	; 0x02
     81c:	28 2f       	mov	r18, r24
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	02 2e       	mov	r0, r18
     826:	02 c0       	rjmp	.+4      	; 0x82c <DIO_voidActivePinInPullUpResistance+0x94>
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	0a 94       	dec	r0
     82e:	e2 f7       	brpl	.-8      	; 0x828 <DIO_voidActivePinInPullUpResistance+0x90>
     830:	84 2b       	or	r24, r20
     832:	8c 93       	st	X, r24
     834:	27 c0       	rjmp	.+78     	; 0x884 <__stack+0x25>
	case DIO_PORTC: SET_BIT(PORTC, copy_u8PinId); break;
     836:	a5 e3       	ldi	r26, 0x35	; 53
     838:	b0 e0       	ldi	r27, 0x00	; 0
     83a:	e5 e3       	ldi	r30, 0x35	; 53
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	48 2f       	mov	r20, r24
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	28 2f       	mov	r18, r24
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 2e       	mov	r0, r18
     84e:	02 c0       	rjmp	.+4      	; 0x854 <DIO_voidActivePinInPullUpResistance+0xbc>
     850:	88 0f       	add	r24, r24
     852:	99 1f       	adc	r25, r25
     854:	0a 94       	dec	r0
     856:	e2 f7       	brpl	.-8      	; 0x850 <DIO_voidActivePinInPullUpResistance+0xb8>
     858:	84 2b       	or	r24, r20
     85a:	8c 93       	st	X, r24
     85c:	13 c0       	rjmp	.+38     	; 0x884 <__stack+0x25>
	case DIO_PORTD: SET_BIT(PORTD, copy_u8PinId); break;
     85e:	a2 e3       	ldi	r26, 0x32	; 50
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	e2 e3       	ldi	r30, 0x32	; 50
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	48 2f       	mov	r20, r24
     86a:	8a 81       	ldd	r24, Y+2	; 0x02
     86c:	28 2f       	mov	r18, r24
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	81 e0       	ldi	r24, 0x01	; 1
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	02 2e       	mov	r0, r18
     876:	02 c0       	rjmp	.+4      	; 0x87c <__stack+0x1d>
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	0a 94       	dec	r0
     87e:	e2 f7       	brpl	.-8      	; 0x878 <__stack+0x19>
     880:	84 2b       	or	r24, r20
     882:	8c 93       	st	X, r24
	}
}
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	cf 91       	pop	r28
     88e:	df 91       	pop	r29
     890:	08 95       	ret

00000892 <DIO_voidSetPortDirection>:


                      /*************** PORT APIS ***************/

void DIO_voidSetPortDirection(u8 copy_u8PortId, u8 copy_u8PortDirection)
{
     892:	df 93       	push	r29
     894:	cf 93       	push	r28
     896:	00 d0       	rcall	.+0      	; 0x898 <DIO_voidSetPortDirection+0x6>
     898:	00 d0       	rcall	.+0      	; 0x89a <DIO_voidSetPortDirection+0x8>
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	89 83       	std	Y+1, r24	; 0x01
     8a0:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	28 2f       	mov	r18, r24
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	3c 83       	std	Y+4, r19	; 0x04
     8aa:	2b 83       	std	Y+3, r18	; 0x03
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	9c 81       	ldd	r25, Y+4	; 0x04
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	91 05       	cpc	r25, r1
     8b4:	d1 f0       	breq	.+52     	; 0x8ea <DIO_voidSetPortDirection+0x58>
     8b6:	2b 81       	ldd	r18, Y+3	; 0x03
     8b8:	3c 81       	ldd	r19, Y+4	; 0x04
     8ba:	22 30       	cpi	r18, 0x02	; 2
     8bc:	31 05       	cpc	r19, r1
     8be:	2c f4       	brge	.+10     	; 0x8ca <DIO_voidSetPortDirection+0x38>
     8c0:	8b 81       	ldd	r24, Y+3	; 0x03
     8c2:	9c 81       	ldd	r25, Y+4	; 0x04
     8c4:	00 97       	sbiw	r24, 0x00	; 0
     8c6:	61 f0       	breq	.+24     	; 0x8e0 <DIO_voidSetPortDirection+0x4e>
     8c8:	1e c0       	rjmp	.+60     	; 0x906 <DIO_voidSetPortDirection+0x74>
     8ca:	2b 81       	ldd	r18, Y+3	; 0x03
     8cc:	3c 81       	ldd	r19, Y+4	; 0x04
     8ce:	22 30       	cpi	r18, 0x02	; 2
     8d0:	31 05       	cpc	r19, r1
     8d2:	81 f0       	breq	.+32     	; 0x8f4 <DIO_voidSetPortDirection+0x62>
     8d4:	8b 81       	ldd	r24, Y+3	; 0x03
     8d6:	9c 81       	ldd	r25, Y+4	; 0x04
     8d8:	83 30       	cpi	r24, 0x03	; 3
     8da:	91 05       	cpc	r25, r1
     8dc:	81 f0       	breq	.+32     	; 0x8fe <DIO_voidSetPortDirection+0x6c>
     8de:	13 c0       	rjmp	.+38     	; 0x906 <DIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:DDRA = copy_u8PortDirection;break;
     8e0:	ea e3       	ldi	r30, 0x3A	; 58
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	8a 81       	ldd	r24, Y+2	; 0x02
     8e6:	80 83       	st	Z, r24
     8e8:	0e c0       	rjmp	.+28     	; 0x906 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTB:DDRB = copy_u8PortDirection;break;
     8ea:	e7 e3       	ldi	r30, 0x37	; 55
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	80 83       	st	Z, r24
     8f2:	09 c0       	rjmp	.+18     	; 0x906 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTC:DDRC = copy_u8PortDirection;break;
     8f4:	e4 e3       	ldi	r30, 0x34	; 52
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	8a 81       	ldd	r24, Y+2	; 0x02
     8fa:	80 83       	st	Z, r24
     8fc:	04 c0       	rjmp	.+8      	; 0x906 <DIO_voidSetPortDirection+0x74>
	case DIO_PORTD:DDRD = copy_u8PortDirection;break;
     8fe:	e1 e3       	ldi	r30, 0x31	; 49
     900:	f0 e0       	ldi	r31, 0x00	; 0
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	80 83       	st	Z, r24
	}
}
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	cf 91       	pop	r28
     910:	df 91       	pop	r29
     912:	08 95       	ret

00000914 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 copy_u8PortId, u8 copy_u8PortValue)
{
     914:	df 93       	push	r29
     916:	cf 93       	push	r28
     918:	00 d0       	rcall	.+0      	; 0x91a <DIO_voidSetPortValue+0x6>
     91a:	00 d0       	rcall	.+0      	; 0x91c <DIO_voidSetPortValue+0x8>
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
     920:	89 83       	std	Y+1, r24	; 0x01
     922:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
     924:	89 81       	ldd	r24, Y+1	; 0x01
     926:	28 2f       	mov	r18, r24
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	3c 83       	std	Y+4, r19	; 0x04
     92c:	2b 83       	std	Y+3, r18	; 0x03
     92e:	8b 81       	ldd	r24, Y+3	; 0x03
     930:	9c 81       	ldd	r25, Y+4	; 0x04
     932:	81 30       	cpi	r24, 0x01	; 1
     934:	91 05       	cpc	r25, r1
     936:	d1 f0       	breq	.+52     	; 0x96c <DIO_voidSetPortValue+0x58>
     938:	2b 81       	ldd	r18, Y+3	; 0x03
     93a:	3c 81       	ldd	r19, Y+4	; 0x04
     93c:	22 30       	cpi	r18, 0x02	; 2
     93e:	31 05       	cpc	r19, r1
     940:	2c f4       	brge	.+10     	; 0x94c <DIO_voidSetPortValue+0x38>
     942:	8b 81       	ldd	r24, Y+3	; 0x03
     944:	9c 81       	ldd	r25, Y+4	; 0x04
     946:	00 97       	sbiw	r24, 0x00	; 0
     948:	61 f0       	breq	.+24     	; 0x962 <DIO_voidSetPortValue+0x4e>
     94a:	1e c0       	rjmp	.+60     	; 0x988 <DIO_voidSetPortValue+0x74>
     94c:	2b 81       	ldd	r18, Y+3	; 0x03
     94e:	3c 81       	ldd	r19, Y+4	; 0x04
     950:	22 30       	cpi	r18, 0x02	; 2
     952:	31 05       	cpc	r19, r1
     954:	81 f0       	breq	.+32     	; 0x976 <DIO_voidSetPortValue+0x62>
     956:	8b 81       	ldd	r24, Y+3	; 0x03
     958:	9c 81       	ldd	r25, Y+4	; 0x04
     95a:	83 30       	cpi	r24, 0x03	; 3
     95c:	91 05       	cpc	r25, r1
     95e:	81 f0       	breq	.+32     	; 0x980 <DIO_voidSetPortValue+0x6c>
     960:	13 c0       	rjmp	.+38     	; 0x988 <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:PORTA = copy_u8PortValue;break;
     962:	eb e3       	ldi	r30, 0x3B	; 59
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	8a 81       	ldd	r24, Y+2	; 0x02
     968:	80 83       	st	Z, r24
     96a:	0e c0       	rjmp	.+28     	; 0x988 <DIO_voidSetPortValue+0x74>
	case DIO_PORTB:PORTB = copy_u8PortValue;break;
     96c:	e8 e3       	ldi	r30, 0x38	; 56
     96e:	f0 e0       	ldi	r31, 0x00	; 0
     970:	8a 81       	ldd	r24, Y+2	; 0x02
     972:	80 83       	st	Z, r24
     974:	09 c0       	rjmp	.+18     	; 0x988 <DIO_voidSetPortValue+0x74>
	case DIO_PORTC:PORTC = copy_u8PortValue;break;
     976:	e5 e3       	ldi	r30, 0x35	; 53
     978:	f0 e0       	ldi	r31, 0x00	; 0
     97a:	8a 81       	ldd	r24, Y+2	; 0x02
     97c:	80 83       	st	Z, r24
     97e:	04 c0       	rjmp	.+8      	; 0x988 <DIO_voidSetPortValue+0x74>
	case DIO_PORTD:PORTD = copy_u8PortValue;break;
     980:	e2 e3       	ldi	r30, 0x32	; 50
     982:	f0 e0       	ldi	r31, 0x00	; 0
     984:	8a 81       	ldd	r24, Y+2	; 0x02
     986:	80 83       	st	Z, r24
	}
}
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	0f 90       	pop	r0
     98e:	0f 90       	pop	r0
     990:	cf 91       	pop	r28
     992:	df 91       	pop	r29
     994:	08 95       	ret

00000996 <DIO_voidGetPortValue>:

void DIO_voidGetPortValue(u8 copy_u8PortId, u8 *copy_pu8_PinValue)
{
     996:	df 93       	push	r29
     998:	cf 93       	push	r28
     99a:	00 d0       	rcall	.+0      	; 0x99c <DIO_voidGetPortValue+0x6>
     99c:	00 d0       	rcall	.+0      	; 0x99e <DIO_voidGetPortValue+0x8>
     99e:	0f 92       	push	r0
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	89 83       	std	Y+1, r24	; 0x01
     9a6:	7b 83       	std	Y+3, r23	; 0x03
     9a8:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	28 2f       	mov	r18, r24
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	3d 83       	std	Y+5, r19	; 0x05
     9b2:	2c 83       	std	Y+4, r18	; 0x04
     9b4:	8c 81       	ldd	r24, Y+4	; 0x04
     9b6:	9d 81       	ldd	r25, Y+5	; 0x05
     9b8:	81 30       	cpi	r24, 0x01	; 1
     9ba:	91 05       	cpc	r25, r1
     9bc:	e1 f0       	breq	.+56     	; 0x9f6 <DIO_voidGetPortValue+0x60>
     9be:	2c 81       	ldd	r18, Y+4	; 0x04
     9c0:	3d 81       	ldd	r19, Y+5	; 0x05
     9c2:	22 30       	cpi	r18, 0x02	; 2
     9c4:	31 05       	cpc	r19, r1
     9c6:	2c f4       	brge	.+10     	; 0x9d2 <DIO_voidGetPortValue+0x3c>
     9c8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ca:	9d 81       	ldd	r25, Y+5	; 0x05
     9cc:	00 97       	sbiw	r24, 0x00	; 0
     9ce:	61 f0       	breq	.+24     	; 0x9e8 <DIO_voidGetPortValue+0x52>
     9d0:	26 c0       	rjmp	.+76     	; 0xa1e <DIO_voidGetPortValue+0x88>
     9d2:	2c 81       	ldd	r18, Y+4	; 0x04
     9d4:	3d 81       	ldd	r19, Y+5	; 0x05
     9d6:	22 30       	cpi	r18, 0x02	; 2
     9d8:	31 05       	cpc	r19, r1
     9da:	a1 f0       	breq	.+40     	; 0xa04 <DIO_voidGetPortValue+0x6e>
     9dc:	8c 81       	ldd	r24, Y+4	; 0x04
     9de:	9d 81       	ldd	r25, Y+5	; 0x05
     9e0:	83 30       	cpi	r24, 0x03	; 3
     9e2:	91 05       	cpc	r25, r1
     9e4:	b1 f0       	breq	.+44     	; 0xa12 <DIO_voidGetPortValue+0x7c>
     9e6:	1b c0       	rjmp	.+54     	; 0xa1e <DIO_voidGetPortValue+0x88>
	{
	case DIO_PORTA: *copy_pu8_PinValue = PORTA;break;
     9e8:	eb e3       	ldi	r30, 0x3B	; 59
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	ea 81       	ldd	r30, Y+2	; 0x02
     9f0:	fb 81       	ldd	r31, Y+3	; 0x03
     9f2:	80 83       	st	Z, r24
     9f4:	14 c0       	rjmp	.+40     	; 0xa1e <DIO_voidGetPortValue+0x88>
	case DIO_PORTB: *copy_pu8_PinValue = PORTB;break;
     9f6:	e8 e3       	ldi	r30, 0x38	; 56
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	ea 81       	ldd	r30, Y+2	; 0x02
     9fe:	fb 81       	ldd	r31, Y+3	; 0x03
     a00:	80 83       	st	Z, r24
     a02:	0d c0       	rjmp	.+26     	; 0xa1e <DIO_voidGetPortValue+0x88>
	case DIO_PORTC: *copy_pu8_PinValue = PORTC;break;
     a04:	e5 e3       	ldi	r30, 0x35	; 53
     a06:	f0 e0       	ldi	r31, 0x00	; 0
     a08:	80 81       	ld	r24, Z
     a0a:	ea 81       	ldd	r30, Y+2	; 0x02
     a0c:	fb 81       	ldd	r31, Y+3	; 0x03
     a0e:	80 83       	st	Z, r24
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <DIO_voidGetPortValue+0x88>
	case DIO_PORTD: *copy_pu8_PinValue = PORTD;break;
     a12:	e2 e3       	ldi	r30, 0x32	; 50
     a14:	f0 e0       	ldi	r31, 0x00	; 0
     a16:	80 81       	ld	r24, Z
     a18:	ea 81       	ldd	r30, Y+2	; 0x02
     a1a:	fb 81       	ldd	r31, Y+3	; 0x03
     a1c:	80 83       	st	Z, r24
	}
}
     a1e:	0f 90       	pop	r0
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	0f 90       	pop	r0
     a26:	0f 90       	pop	r0
     a28:	cf 91       	pop	r28
     a2a:	df 91       	pop	r29
     a2c:	08 95       	ret

00000a2e <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue(u8 copy_u8PortId)
{
     a2e:	df 93       	push	r29
     a30:	cf 93       	push	r28
     a32:	00 d0       	rcall	.+0      	; 0xa34 <DIO_voidTogglePortValue+0x6>
     a34:	0f 92       	push	r0
     a36:	cd b7       	in	r28, 0x3d	; 61
     a38:	de b7       	in	r29, 0x3e	; 62
     a3a:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	28 2f       	mov	r18, r24
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	3b 83       	std	Y+3, r19	; 0x03
     a44:	2a 83       	std	Y+2, r18	; 0x02
     a46:	8a 81       	ldd	r24, Y+2	; 0x02
     a48:	9b 81       	ldd	r25, Y+3	; 0x03
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	91 05       	cpc	r25, r1
     a4e:	e9 f0       	breq	.+58     	; 0xa8a <DIO_voidTogglePortValue+0x5c>
     a50:	2a 81       	ldd	r18, Y+2	; 0x02
     a52:	3b 81       	ldd	r19, Y+3	; 0x03
     a54:	22 30       	cpi	r18, 0x02	; 2
     a56:	31 05       	cpc	r19, r1
     a58:	2c f4       	brge	.+10     	; 0xa64 <DIO_voidTogglePortValue+0x36>
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	9b 81       	ldd	r25, Y+3	; 0x03
     a5e:	00 97       	sbiw	r24, 0x00	; 0
     a60:	61 f0       	breq	.+24     	; 0xa7a <DIO_voidTogglePortValue+0x4c>
     a62:	2a c0       	rjmp	.+84     	; 0xab8 <DIO_voidTogglePortValue+0x8a>
     a64:	2a 81       	ldd	r18, Y+2	; 0x02
     a66:	3b 81       	ldd	r19, Y+3	; 0x03
     a68:	22 30       	cpi	r18, 0x02	; 2
     a6a:	31 05       	cpc	r19, r1
     a6c:	b1 f0       	breq	.+44     	; 0xa9a <DIO_voidTogglePortValue+0x6c>
     a6e:	8a 81       	ldd	r24, Y+2	; 0x02
     a70:	9b 81       	ldd	r25, Y+3	; 0x03
     a72:	83 30       	cpi	r24, 0x03	; 3
     a74:	91 05       	cpc	r25, r1
     a76:	c9 f0       	breq	.+50     	; 0xaaa <DIO_voidTogglePortValue+0x7c>
     a78:	1f c0       	rjmp	.+62     	; 0xab8 <DIO_voidTogglePortValue+0x8a>
	{
	case DIO_PORTA: PORTA^=DIO_PORT_HIGH;break;
     a7a:	ab e3       	ldi	r26, 0x3B	; 59
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	eb e3       	ldi	r30, 0x3B	; 59
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	80 95       	com	r24
     a86:	8c 93       	st	X, r24
     a88:	17 c0       	rjmp	.+46     	; 0xab8 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTB: PORTB^=DIO_PORT_HIGH;break;
     a8a:	a8 e3       	ldi	r26, 0x38	; 56
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 e3       	ldi	r30, 0x38	; 56
     a90:	f0 e0       	ldi	r31, 0x00	; 0
     a92:	80 81       	ld	r24, Z
     a94:	80 95       	com	r24
     a96:	8c 93       	st	X, r24
     a98:	0f c0       	rjmp	.+30     	; 0xab8 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTC: PORTC^=DIO_PORT_HIGH;break;
     a9a:	a5 e3       	ldi	r26, 0x35	; 53
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e5 e3       	ldi	r30, 0x35	; 53
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	80 95       	com	r24
     aa6:	8c 93       	st	X, r24
     aa8:	07 c0       	rjmp	.+14     	; 0xab8 <DIO_voidTogglePortValue+0x8a>
	case DIO_PORTD: PORTD^=DIO_PORT_HIGH;break;
     aaa:	a2 e3       	ldi	r26, 0x32	; 50
     aac:	b0 e0       	ldi	r27, 0x00	; 0
     aae:	e2 e3       	ldi	r30, 0x32	; 50
     ab0:	f0 e0       	ldi	r31, 0x00	; 0
     ab2:	80 81       	ld	r24, Z
     ab4:	80 95       	com	r24
     ab6:	8c 93       	st	X, r24
	}
}
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	08 95       	ret

00000ac4 <DIO_voidActivePortInPullUpResistance>:

void DIO_voidActivePortInPullUpResistance(u8 copy_u8PortId)
{
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	00 d0       	rcall	.+0      	; 0xaca <DIO_voidActivePortInPullUpResistance+0x6>
     aca:	0f 92       	push	r0
     acc:	cd b7       	in	r28, 0x3d	; 61
     ace:	de b7       	in	r29, 0x3e	; 62
     ad0:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8PortId)
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	28 2f       	mov	r18, r24
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	3b 83       	std	Y+3, r19	; 0x03
     ada:	2a 83       	std	Y+2, r18	; 0x02
     adc:	8a 81       	ldd	r24, Y+2	; 0x02
     ade:	9b 81       	ldd	r25, Y+3	; 0x03
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	91 05       	cpc	r25, r1
     ae4:	d1 f0       	breq	.+52     	; 0xb1a <DIO_voidActivePortInPullUpResistance+0x56>
     ae6:	2a 81       	ldd	r18, Y+2	; 0x02
     ae8:	3b 81       	ldd	r19, Y+3	; 0x03
     aea:	22 30       	cpi	r18, 0x02	; 2
     aec:	31 05       	cpc	r19, r1
     aee:	2c f4       	brge	.+10     	; 0xafa <DIO_voidActivePortInPullUpResistance+0x36>
     af0:	8a 81       	ldd	r24, Y+2	; 0x02
     af2:	9b 81       	ldd	r25, Y+3	; 0x03
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	61 f0       	breq	.+24     	; 0xb10 <DIO_voidActivePortInPullUpResistance+0x4c>
     af8:	1e c0       	rjmp	.+60     	; 0xb36 <DIO_voidActivePortInPullUpResistance+0x72>
     afa:	2a 81       	ldd	r18, Y+2	; 0x02
     afc:	3b 81       	ldd	r19, Y+3	; 0x03
     afe:	22 30       	cpi	r18, 0x02	; 2
     b00:	31 05       	cpc	r19, r1
     b02:	81 f0       	breq	.+32     	; 0xb24 <DIO_voidActivePortInPullUpResistance+0x60>
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	9b 81       	ldd	r25, Y+3	; 0x03
     b08:	83 30       	cpi	r24, 0x03	; 3
     b0a:	91 05       	cpc	r25, r1
     b0c:	81 f0       	breq	.+32     	; 0xb2e <DIO_voidActivePortInPullUpResistance+0x6a>
     b0e:	13 c0       	rjmp	.+38     	; 0xb36 <DIO_voidActivePortInPullUpResistance+0x72>
	{
	case DIO_PORTA: PORTA = DIO_PORT_HIGH;break;
     b10:	eb e3       	ldi	r30, 0x3B	; 59
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	8f ef       	ldi	r24, 0xFF	; 255
     b16:	80 83       	st	Z, r24
     b18:	0e c0       	rjmp	.+28     	; 0xb36 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTB: PORTB = DIO_PORT_HIGH;break;
     b1a:	e8 e3       	ldi	r30, 0x38	; 56
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	80 83       	st	Z, r24
     b22:	09 c0       	rjmp	.+18     	; 0xb36 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTC: PORTC = DIO_PORT_HIGH;break;
     b24:	e5 e3       	ldi	r30, 0x35	; 53
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	8f ef       	ldi	r24, 0xFF	; 255
     b2a:	80 83       	st	Z, r24
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <DIO_voidActivePortInPullUpResistance+0x72>
	case DIO_PORTD: PORTD = DIO_PORT_HIGH;break;
     b2e:	e2 e3       	ldi	r30, 0x32	; 50
     b30:	f0 e0       	ldi	r31, 0x00	; 0
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	80 83       	st	Z, r24
	}
}
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	cf 91       	pop	r28
     b3e:	df 91       	pop	r29
     b40:	08 95       	ret

00000b42 <EXTI_voidEnable>:
static void (*PRV_pFunCallBackINT0) (void) = NULL;
static void (*PRV_pFunCallBackINT1) (void) = NULL;
static void (*PRV_pFunCallBackINT2) (void) = NULL;

void EXTI_voidEnable (EXTI_Source copy_enumInterruptSource, EXTI_SenseControl copy_enumSenseControl)
{
     b42:	df 93       	push	r29
     b44:	cf 93       	push	r28
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	2a 97       	sbiw	r28, 0x0a	; 10
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	89 83       	std	Y+1, r24	; 0x01
     b58:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_enumInterruptSource)
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3a 87       	std	Y+10, r19	; 0x0a
     b62:	29 87       	std	Y+9, r18	; 0x09
     b64:	89 85       	ldd	r24, Y+9	; 0x09
     b66:	9a 85       	ldd	r25, Y+10	; 0x0a
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <EXTI_voidEnable+0x2e>
     b6e:	6d c0       	rjmp	.+218    	; 0xc4a <EXTI_voidEnable+0x108>
     b70:	29 85       	ldd	r18, Y+9	; 0x09
     b72:	3a 85       	ldd	r19, Y+10	; 0x0a
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	09 f4       	brne	.+2      	; 0xb7c <EXTI_voidEnable+0x3a>
     b7a:	c9 c0       	rjmp	.+402    	; 0xd0e <EXTI_voidEnable+0x1cc>
     b7c:	89 85       	ldd	r24, Y+9	; 0x09
     b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	09 f0       	breq	.+2      	; 0xb86 <EXTI_voidEnable+0x44>
     b84:	e8 c0       	rjmp	.+464    	; 0xd56 <EXTI_voidEnable+0x214>
	{
	case EXTI_INT0:
		switch (copy_enumSenseControl)
     b86:	8a 81       	ldd	r24, Y+2	; 0x02
     b88:	28 2f       	mov	r18, r24
     b8a:	30 e0       	ldi	r19, 0x00	; 0
     b8c:	38 87       	std	Y+8, r19	; 0x08
     b8e:	2f 83       	std	Y+7, r18	; 0x07
     b90:	8f 81       	ldd	r24, Y+7	; 0x07
     b92:	98 85       	ldd	r25, Y+8	; 0x08
     b94:	81 30       	cpi	r24, 0x01	; 1
     b96:	91 05       	cpc	r25, r1
     b98:	21 f1       	breq	.+72     	; 0xbe2 <EXTI_voidEnable+0xa0>
     b9a:	2f 81       	ldd	r18, Y+7	; 0x07
     b9c:	38 85       	ldd	r19, Y+8	; 0x08
     b9e:	22 30       	cpi	r18, 0x02	; 2
     ba0:	31 05       	cpc	r19, r1
     ba2:	2c f4       	brge	.+10     	; 0xbae <EXTI_voidEnable+0x6c>
     ba4:	8f 81       	ldd	r24, Y+7	; 0x07
     ba6:	98 85       	ldd	r25, Y+8	; 0x08
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	61 f0       	breq	.+24     	; 0xbc4 <EXTI_voidEnable+0x82>
     bac:	46 c0       	rjmp	.+140    	; 0xc3a <EXTI_voidEnable+0xf8>
     bae:	2f 81       	ldd	r18, Y+7	; 0x07
     bb0:	38 85       	ldd	r19, Y+8	; 0x08
     bb2:	22 30       	cpi	r18, 0x02	; 2
     bb4:	31 05       	cpc	r19, r1
     bb6:	21 f1       	breq	.+72     	; 0xc00 <EXTI_voidEnable+0xbe>
     bb8:	8f 81       	ldd	r24, Y+7	; 0x07
     bba:	98 85       	ldd	r25, Y+8	; 0x08
     bbc:	83 30       	cpi	r24, 0x03	; 3
     bbe:	91 05       	cpc	r25, r1
     bc0:	71 f1       	breq	.+92     	; 0xc1e <EXTI_voidEnable+0xdc>
     bc2:	3b c0       	rjmp	.+118    	; 0xc3a <EXTI_voidEnable+0xf8>
		{
		case EXTI_RISING_EDGE:
			SET_BIT(MCUCR_REG, ISC00);
     bc4:	a5 e5       	ldi	r26, 0x55	; 85
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e5 e5       	ldi	r30, 0x55	; 85
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, ISC01);
     bd2:	a5 e5       	ldi	r26, 0x55	; 85
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e5 e5       	ldi	r30, 0x55	; 85
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	8c 93       	st	X, r24
     be0:	2c c0       	rjmp	.+88     	; 0xc3a <EXTI_voidEnable+0xf8>
			break;

		case EXTI_FALLING_EDGE:
			SET_BIT(MCUCR_REG, ISC01);
     be2:	a5 e5       	ldi	r26, 0x55	; 85
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e5 e5       	ldi	r30, 0x55	; 85
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	82 60       	ori	r24, 0x02	; 2
     bee:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, ISC00);
     bf0:	a5 e5       	ldi	r26, 0x55	; 85
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e5 e5       	ldi	r30, 0x55	; 85
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	8e 7f       	andi	r24, 0xFE	; 254
     bfc:	8c 93       	st	X, r24
     bfe:	1d c0       	rjmp	.+58     	; 0xc3a <EXTI_voidEnable+0xf8>
			break;

		case EXTI_LOW_LEVEL:
			CLR_BIT(MCUCR_REG, ISC01);
     c00:	a5 e5       	ldi	r26, 0x55	; 85
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e5 e5       	ldi	r30, 0x55	; 85
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8d 7f       	andi	r24, 0xFD	; 253
     c0c:	8c 93       	st	X, r24
			CLR_BIT(MCUCR_REG, ISC00);
     c0e:	a5 e5       	ldi	r26, 0x55	; 85
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e5 e5       	ldi	r30, 0x55	; 85
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8e 7f       	andi	r24, 0xFE	; 254
     c1a:	8c 93       	st	X, r24
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <EXTI_voidEnable+0xf8>
			break;

		case EXTI_ANY_LOGICAL_CHANGE:
			CLR_BIT(MCUCR_REG, ISC01);
     c1e:	a5 e5       	ldi	r26, 0x55	; 85
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e5 e5       	ldi	r30, 0x55	; 85
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8d 7f       	andi	r24, 0xFD	; 253
     c2a:	8c 93       	st	X, r24
			SET_BIT(MCUCR_REG, ISC00);
     c2c:	a5 e5       	ldi	r26, 0x55	; 85
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	e5 e5       	ldi	r30, 0x55	; 85
     c32:	f0 e0       	ldi	r31, 0x00	; 0
     c34:	80 81       	ld	r24, Z
     c36:	81 60       	ori	r24, 0x01	; 1
     c38:	8c 93       	st	X, r24
			break;
		}
		SET_BIT(GICR_REG, INT0);		//ENABLE EXTI_0
     c3a:	ab e5       	ldi	r26, 0x5B	; 91
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	eb e5       	ldi	r30, 0x5B	; 91
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	80 81       	ld	r24, Z
     c44:	80 64       	ori	r24, 0x40	; 64
     c46:	8c 93       	st	X, r24
     c48:	86 c0       	rjmp	.+268    	; 0xd56 <EXTI_voidEnable+0x214>
		break;

		case EXTI_INT1:
			switch (copy_enumSenseControl)
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	3e 83       	std	Y+6, r19	; 0x06
     c52:	2d 83       	std	Y+5, r18	; 0x05
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	81 30       	cpi	r24, 0x01	; 1
     c5a:	91 05       	cpc	r25, r1
     c5c:	21 f1       	breq	.+72     	; 0xca6 <EXTI_voidEnable+0x164>
     c5e:	2d 81       	ldd	r18, Y+5	; 0x05
     c60:	3e 81       	ldd	r19, Y+6	; 0x06
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	2c f4       	brge	.+10     	; 0xc72 <EXTI_voidEnable+0x130>
     c68:	8d 81       	ldd	r24, Y+5	; 0x05
     c6a:	9e 81       	ldd	r25, Y+6	; 0x06
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	61 f0       	breq	.+24     	; 0xc88 <EXTI_voidEnable+0x146>
     c70:	46 c0       	rjmp	.+140    	; 0xcfe <EXTI_voidEnable+0x1bc>
     c72:	2d 81       	ldd	r18, Y+5	; 0x05
     c74:	3e 81       	ldd	r19, Y+6	; 0x06
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	21 f1       	breq	.+72     	; 0xcc4 <EXTI_voidEnable+0x182>
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	83 30       	cpi	r24, 0x03	; 3
     c82:	91 05       	cpc	r25, r1
     c84:	71 f1       	breq	.+92     	; 0xce2 <EXTI_voidEnable+0x1a0>
     c86:	3b c0       	rjmp	.+118    	; 0xcfe <EXTI_voidEnable+0x1bc>
			{
			case EXTI_RISING_EDGE:
				SET_BIT(MCUCR_REG, ISC11);
     c88:	a5 e5       	ldi	r26, 0x55	; 85
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e5 e5       	ldi	r30, 0x55	; 85
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	88 60       	ori	r24, 0x08	; 8
     c94:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG, ISC10);
     c96:	a5 e5       	ldi	r26, 0x55	; 85
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e5 e5       	ldi	r30, 0x55	; 85
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	84 60       	ori	r24, 0x04	; 4
     ca2:	8c 93       	st	X, r24
     ca4:	2c c0       	rjmp	.+88     	; 0xcfe <EXTI_voidEnable+0x1bc>
				break;

			case EXTI_FALLING_EDGE:
				SET_BIT(MCUCR_REG, ISC11);
     ca6:	a5 e5       	ldi	r26, 0x55	; 85
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e5 e5       	ldi	r30, 0x55	; 85
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	88 60       	ori	r24, 0x08	; 8
     cb2:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG, ISC10);
     cb4:	a5 e5       	ldi	r26, 0x55	; 85
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e5 e5       	ldi	r30, 0x55	; 85
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8b 7f       	andi	r24, 0xFB	; 251
     cc0:	8c 93       	st	X, r24
     cc2:	1d c0       	rjmp	.+58     	; 0xcfe <EXTI_voidEnable+0x1bc>
				break;

			case EXTI_LOW_LEVEL:
				CLR_BIT(MCUCR_REG, ISC11);
     cc4:	a5 e5       	ldi	r26, 0x55	; 85
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e5 e5       	ldi	r30, 0x55	; 85
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	87 7f       	andi	r24, 0xF7	; 247
     cd0:	8c 93       	st	X, r24
				CLR_BIT(MCUCR_REG, ISC10);
     cd2:	a5 e5       	ldi	r26, 0x55	; 85
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e5 e5       	ldi	r30, 0x55	; 85
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	8b 7f       	andi	r24, 0xFB	; 251
     cde:	8c 93       	st	X, r24
     ce0:	0e c0       	rjmp	.+28     	; 0xcfe <EXTI_voidEnable+0x1bc>
				break;

			case EXTI_ANY_LOGICAL_CHANGE:
				CLR_BIT(MCUCR_REG, ISC11);
     ce2:	a5 e5       	ldi	r26, 0x55	; 85
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e5 e5       	ldi	r30, 0x55	; 85
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	87 7f       	andi	r24, 0xF7	; 247
     cee:	8c 93       	st	X, r24
				SET_BIT(MCUCR_REG, ISC10);
     cf0:	a5 e5       	ldi	r26, 0x55	; 85
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e5 e5       	ldi	r30, 0x55	; 85
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	84 60       	ori	r24, 0x04	; 4
     cfc:	8c 93       	st	X, r24
				break;
			}
			SET_BIT(GICR_REG, INT1);	   //ENABLE EXTI_1
     cfe:	ab e5       	ldi	r26, 0x5B	; 91
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	eb e5       	ldi	r30, 0x5B	; 91
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	80 81       	ld	r24, Z
     d08:	80 68       	ori	r24, 0x80	; 128
     d0a:	8c 93       	st	X, r24
     d0c:	24 c0       	rjmp	.+72     	; 0xd56 <EXTI_voidEnable+0x214>
			break;

			case EXTI_INT2:
				switch(copy_enumSenseControl)
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	28 2f       	mov	r18, r24
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	3c 83       	std	Y+4, r19	; 0x04
     d16:	2b 83       	std	Y+3, r18	; 0x03
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	9c 81       	ldd	r25, Y+4	; 0x04
     d1c:	00 97       	sbiw	r24, 0x00	; 0
     d1e:	69 f0       	breq	.+26     	; 0xd3a <EXTI_voidEnable+0x1f8>
     d20:	2b 81       	ldd	r18, Y+3	; 0x03
     d22:	3c 81       	ldd	r19, Y+4	; 0x04
     d24:	21 30       	cpi	r18, 0x01	; 1
     d26:	31 05       	cpc	r19, r1
     d28:	79 f4       	brne	.+30     	; 0xd48 <EXTI_voidEnable+0x206>
				{
				case EXTI_FALLING_EDGE:
					CLR_BIT(MCUCSR_REG, ISC2);
     d2a:	a4 e5       	ldi	r26, 0x54	; 84
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e4 e5       	ldi	r30, 0x54	; 84
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	8f 7b       	andi	r24, 0xBF	; 191
     d36:	8c 93       	st	X, r24
     d38:	07 c0       	rjmp	.+14     	; 0xd48 <EXTI_voidEnable+0x206>
					break;
				case EXTI_RISING_EDGE:
					SET_BIT(MCUCSR_REG, ISC2);
     d3a:	a4 e5       	ldi	r26, 0x54	; 84
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e4 e5       	ldi	r30, 0x54	; 84
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24
					break;
				}
				SET_BIT(GICR_REG, INT2);	//ENABLE EXTI_2
     d48:	ab e5       	ldi	r26, 0x5B	; 91
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	eb e5       	ldi	r30, 0x5B	; 91
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 62       	ori	r24, 0x20	; 32
     d54:	8c 93       	st	X, r24
				break;
	}
}
     d56:	2a 96       	adiw	r28, 0x0a	; 10
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	f8 94       	cli
     d5c:	de bf       	out	0x3e, r29	; 62
     d5e:	0f be       	out	0x3f, r0	; 63
     d60:	cd bf       	out	0x3d, r28	; 61
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <EXTI_voidDisable>:

void EXTI_voidDisable (EXTI_Source copy_enumInterruptSource)
{
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <EXTI_voidDisable+0x6>
     d6e:	0f 92       	push	r0
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	89 83       	std	Y+1, r24	; 0x01
	switch (copy_enumInterruptSource)
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	3b 83       	std	Y+3, r19	; 0x03
     d7e:	2a 83       	std	Y+2, r18	; 0x02
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	9b 81       	ldd	r25, Y+3	; 0x03
     d84:	81 30       	cpi	r24, 0x01	; 1
     d86:	91 05       	cpc	r25, r1
     d88:	89 f0       	breq	.+34     	; 0xdac <EXTI_voidDisable+0x44>
     d8a:	2a 81       	ldd	r18, Y+2	; 0x02
     d8c:	3b 81       	ldd	r19, Y+3	; 0x03
     d8e:	22 30       	cpi	r18, 0x02	; 2
     d90:	31 05       	cpc	r19, r1
     d92:	a1 f0       	breq	.+40     	; 0xdbc <EXTI_voidDisable+0x54>
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	9b 81       	ldd	r25, Y+3	; 0x03
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	b9 f4       	brne	.+46     	; 0xdca <EXTI_voidDisable+0x62>
	{
	case  EXTI_INT0:
		CLR_BIT(GICR_REG, INT0);
     d9c:	ab e5       	ldi	r26, 0x5B	; 91
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	eb e5       	ldi	r30, 0x5B	; 91
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8f 7b       	andi	r24, 0xBF	; 191
     da8:	8c 93       	st	X, r24
     daa:	0f c0       	rjmp	.+30     	; 0xdca <EXTI_voidDisable+0x62>
		break;

	case EXTI_INT1:
		CLR_BIT(GICR_REG, INT1);
     dac:	ab e5       	ldi	r26, 0x5B	; 91
     dae:	b0 e0       	ldi	r27, 0x00	; 0
     db0:	eb e5       	ldi	r30, 0x5B	; 91
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	80 81       	ld	r24, Z
     db6:	8f 77       	andi	r24, 0x7F	; 127
     db8:	8c 93       	st	X, r24
     dba:	07 c0       	rjmp	.+14     	; 0xdca <EXTI_voidDisable+0x62>
		break;

	case EXTI_INT2:
		CLR_BIT(GICR_REG, INT2);
     dbc:	ab e5       	ldi	r26, 0x5B	; 91
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	eb e5       	ldi	r30, 0x5B	; 91
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	80 81       	ld	r24, Z
     dc6:	8f 7d       	andi	r24, 0xDF	; 223
     dc8:	8c 93       	st	X, r24
		break;
	}
}
     dca:	0f 90       	pop	r0
     dcc:	0f 90       	pop	r0
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <EXTI_voidSetCallBackInt0>:

void EXTI_voidSetCallBackInt0(void(*copy_pFunAction)(void))
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	00 d0       	rcall	.+0      	; 0xddc <EXTI_voidSetCallBackInt0+0x6>
     ddc:	cd b7       	in	r28, 0x3d	; 61
     dde:	de b7       	in	r29, 0x3e	; 62
     de0:	9a 83       	std	Y+2, r25	; 0x02
     de2:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pFunAction!=NULL)
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	00 97       	sbiw	r24, 0x00	; 0
     dea:	31 f0       	breq	.+12     	; 0xdf8 <EXTI_voidSetCallBackInt0+0x22>
	{
		PRV_pFunCallBackINT0 = copy_pFunAction;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	90 93 61 00 	sts	0x0061, r25
     df4:	80 93 60 00 	sts	0x0060, r24
	}
	else
	{
		//return error state
	}
}
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	cf 91       	pop	r28
     dfe:	df 91       	pop	r29
     e00:	08 95       	ret

00000e02 <EXTI_voidSetCallBackInt1>:

void EXTI_voidSetCallBackInt1(void(*copy_pFunAction)(void))
{
     e02:	df 93       	push	r29
     e04:	cf 93       	push	r28
     e06:	00 d0       	rcall	.+0      	; 0xe08 <EXTI_voidSetCallBackInt1+0x6>
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	9a 83       	std	Y+2, r25	; 0x02
     e0e:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pFunAction!=NULL)
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	31 f0       	breq	.+12     	; 0xe24 <EXTI_voidSetCallBackInt1+0x22>
	{
		PRV_pFunCallBackINT1 = copy_pFunAction;
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	90 93 63 00 	sts	0x0063, r25
     e20:	80 93 62 00 	sts	0x0062, r24
	}
	else
	{
		//return error state
	}
}
     e24:	0f 90       	pop	r0
     e26:	0f 90       	pop	r0
     e28:	cf 91       	pop	r28
     e2a:	df 91       	pop	r29
     e2c:	08 95       	ret

00000e2e <EXTI_voidSetCallBackInt2>:

void EXTI_voidSetCallBackInt2(void(*copy_pFunAction)(void))
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <EXTI_voidSetCallBackInt2+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pFunAction!=NULL)
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	00 97       	sbiw	r24, 0x00	; 0
     e42:	31 f0       	breq	.+12     	; 0xe50 <EXTI_voidSetCallBackInt2+0x22>
	{
		PRV_pFunCallBackINT2 = copy_pFunAction;
     e44:	89 81       	ldd	r24, Y+1	; 0x01
     e46:	9a 81       	ldd	r25, Y+2	; 0x02
     e48:	90 93 65 00 	sts	0x0065, r25
     e4c:	80 93 64 00 	sts	0x0064, r24
	}
	else
	{
		//return error state
	}
}
     e50:	0f 90       	pop	r0
     e52:	0f 90       	pop	r0
     e54:	cf 91       	pop	r28
     e56:	df 91       	pop	r29
     e58:	08 95       	ret

00000e5a <__vector_1>:

void __vector_1(void) __attribute__((signal));    //EXTI_0
void __vector_1(void)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
	if(PRV_pFunCallBackINT0 != NULL)
     e84:	80 91 60 00 	lds	r24, 0x0060
     e88:	90 91 61 00 	lds	r25, 0x0061
     e8c:	00 97       	sbiw	r24, 0x00	; 0
     e8e:	29 f0       	breq	.+10     	; 0xe9a <__vector_1+0x40>
	{
		PRV_pFunCallBackINT0();
     e90:	e0 91 60 00 	lds	r30, 0x0060
     e94:	f0 91 61 00 	lds	r31, 0x0061
     e98:	09 95       	icall
	}
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <__vector_2>:

void __vector_2(void) __attribute__((signal));    //EXTI_1
void __vector_2(void)
{
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	2f 93       	push	r18
     ecc:	3f 93       	push	r19
     ece:	4f 93       	push	r20
     ed0:	5f 93       	push	r21
     ed2:	6f 93       	push	r22
     ed4:	7f 93       	push	r23
     ed6:	8f 93       	push	r24
     ed8:	9f 93       	push	r25
     eda:	af 93       	push	r26
     edc:	bf 93       	push	r27
     ede:	ef 93       	push	r30
     ee0:	ff 93       	push	r31
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
	if(PRV_pFunCallBackINT1 != NULL)
     eea:	80 91 62 00 	lds	r24, 0x0062
     eee:	90 91 63 00 	lds	r25, 0x0063
     ef2:	00 97       	sbiw	r24, 0x00	; 0
     ef4:	29 f0       	breq	.+10     	; 0xf00 <__vector_2+0x40>
	{
		PRV_pFunCallBackINT1();
     ef6:	e0 91 62 00 	lds	r30, 0x0062
     efa:	f0 91 63 00 	lds	r31, 0x0063
     efe:	09 95       	icall
	}
}
     f00:	cf 91       	pop	r28
     f02:	df 91       	pop	r29
     f04:	ff 91       	pop	r31
     f06:	ef 91       	pop	r30
     f08:	bf 91       	pop	r27
     f0a:	af 91       	pop	r26
     f0c:	9f 91       	pop	r25
     f0e:	8f 91       	pop	r24
     f10:	7f 91       	pop	r23
     f12:	6f 91       	pop	r22
     f14:	5f 91       	pop	r21
     f16:	4f 91       	pop	r20
     f18:	3f 91       	pop	r19
     f1a:	2f 91       	pop	r18
     f1c:	0f 90       	pop	r0
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	0f 90       	pop	r0
     f22:	1f 90       	pop	r1
     f24:	18 95       	reti

00000f26 <__vector_3>:

void __vector_3(void) __attribute__((signal));     //EXTI_2
void __vector_3(void)
{
     f26:	1f 92       	push	r1
     f28:	0f 92       	push	r0
     f2a:	0f b6       	in	r0, 0x3f	; 63
     f2c:	0f 92       	push	r0
     f2e:	11 24       	eor	r1, r1
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	if(PRV_pFunCallBackINT2 != NULL)
     f50:	80 91 64 00 	lds	r24, 0x0064
     f54:	90 91 65 00 	lds	r25, 0x0065
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	29 f0       	breq	.+10     	; 0xf66 <__vector_3+0x40>
	{
		PRV_pFunCallBackINT2();
     f5c:	e0 91 64 00 	lds	r30, 0x0064
     f60:	f0 91 65 00 	lds	r31, 0x0065
     f64:	09 95       	icall
	}
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	ff 91       	pop	r31
     f6c:	ef 91       	pop	r30
     f6e:	bf 91       	pop	r27
     f70:	af 91       	pop	r26
     f72:	9f 91       	pop	r25
     f74:	8f 91       	pop	r24
     f76:	7f 91       	pop	r23
     f78:	6f 91       	pop	r22
     f7a:	5f 91       	pop	r21
     f7c:	4f 91       	pop	r20
     f7e:	3f 91       	pop	r19
     f80:	2f 91       	pop	r18
     f82:	0f 90       	pop	r0
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	0f 90       	pop	r0
     f88:	1f 90       	pop	r1
     f8a:	18 95       	reti

00000f8c <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"


void GIE_voidEnable(void)
{
     f8c:	df 93       	push	r29
     f8e:	cf 93       	push	r28
     f90:	cd b7       	in	r28, 0x3d	; 61
     f92:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
     f94:	af e5       	ldi	r26, 0x5F	; 95
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ef e5       	ldi	r30, 0x5F	; 95
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	80 68       	ori	r24, 0x80	; 128
     fa0:	8c 93       	st	X, r24
}
     fa2:	cf 91       	pop	r28
     fa4:	df 91       	pop	r29
     fa6:	08 95       	ret

00000fa8 <GIE_voidDisable>:

void GIE_voidDisable(void)
{
     fa8:	df 93       	push	r29
     faa:	cf 93       	push	r28
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
     fb0:	af e5       	ldi	r26, 0x5F	; 95
     fb2:	b0 e0       	ldi	r27, 0x00	; 0
     fb4:	ef e5       	ldi	r30, 0x5F	; 95
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	80 81       	ld	r24, Z
     fba:	8f 77       	andi	r24, 0x7F	; 127
     fbc:	8c 93       	st	X, r24
}
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <TMR0_voidInit>:
static void (*PRV_pFunCallBackOVF)(void) = NULL;
static void (*PRV_pFunCallBackCTC)(void) = NULL;
static u16 PRV_ctcCounter;

void TMR0_voidInit(void)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
#if TMR0_MODE == TMR0_CTC_MODE
	//SELECT CTC MODE
	CLR_BIT(TCCR0_REG, WGM00);
     fcc:	a3 e5       	ldi	r26, 0x53	; 83
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e3 e5       	ldi	r30, 0x53	; 83
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	8f 7b       	andi	r24, 0xBF	; 191
     fd8:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, WGM01);
     fda:	a3 e5       	ldi	r26, 0x53	; 83
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e3 e5       	ldi	r30, 0x53	; 83
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	88 60       	ori	r24, 0x08	; 8
     fe6:	8c 93       	st	X, r24

	//INIT TIMER WITH OUTPUT COMPARE VALUE
	OCR0_REG = TMR0_Compare_Value;
     fe8:	ec e5       	ldi	r30, 0x5C	; 92
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	89 ef       	ldi	r24, 0xF9	; 249
     fee:	80 83       	st	Z, r24

	//Enable OC Interrupt
	SET_BIT(TIMSK_REG, OCIE0);
     ff0:	a9 e5       	ldi	r26, 0x59	; 89
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e9 e5       	ldi	r30, 0x59	; 89
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	8c 93       	st	X, r24

	//Enable OVF Interrupt
	SET_BIT(TIMSK_REG, TOIE0);

#endif
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <TMR0_voidStart>:

void TMR0_voidStart(void)
{
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,  CS00);
	SET_BIT(TCCR0_REG,  CS01);
	CLR_BIT(TCCR0_REG,  CS02);

#elif TMR0_PRESCALER == TMR0_PRESCALER_64
	SET_BIT(TCCR0_REG,  CS00);
    100c:	a3 e5       	ldi	r26, 0x53	; 83
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e3 e5       	ldi	r30, 0x53	; 83
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	81 60       	ori	r24, 0x01	; 1
    1018:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,  CS01);
    101a:	a3 e5       	ldi	r26, 0x53	; 83
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e3 e5       	ldi	r30, 0x53	; 83
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	82 60       	ori	r24, 0x02	; 2
    1026:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,  CS02);
    1028:	a3 e5       	ldi	r26, 0x53	; 83
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	e3 e5       	ldi	r30, 0x53	; 83
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	8b 7f       	andi	r24, 0xFB	; 251
    1034:	8c 93       	st	X, r24
#elif TMR0_PRESCALER == TMR0_PRESCALER_1024
	SET_BIT(TCCR0_REG,  CS00);
	CLR_BIT(TCCR0_REG,  CS01);
	SET_BIT(TCCR0_REG,  CS02);
#endif
}
    1036:	cf 91       	pop	r28
    1038:	df 91       	pop	r29
    103a:	08 95       	ret

0000103c <TMR0_voidStop>:

void TMR0_voidStop(void)
{
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TCCR0_REG,  CS00);
    1044:	a3 e5       	ldi	r26, 0x53	; 83
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e3 e5       	ldi	r30, 0x53	; 83
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	8e 7f       	andi	r24, 0xFE	; 254
    1050:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,  CS01);
    1052:	a3 e5       	ldi	r26, 0x53	; 83
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e3 e5       	ldi	r30, 0x53	; 83
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	8d 7f       	andi	r24, 0xFD	; 253
    105e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,  CS02);
    1060:	a3 e5       	ldi	r26, 0x53	; 83
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e3 e5       	ldi	r30, 0x53	; 83
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	8b 7f       	andi	r24, 0xFB	; 251
    106c:	8c 93       	st	X, r24
}
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	08 95       	ret

00001074 <TMR0_voidSetCallBack>:
		//
	}
}*/

void TMR0_voidSetCallBack(void(*Copy_pFunAction)(void), u8 Copy_u8InterruptSource)
{
    1074:	df 93       	push	r29
    1076:	cf 93       	push	r28
    1078:	00 d0       	rcall	.+0      	; 0x107a <TMR0_voidSetCallBack+0x6>
    107a:	00 d0       	rcall	.+0      	; 0x107c <TMR0_voidSetCallBack+0x8>
    107c:	0f 92       	push	r0
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	6b 83       	std	Y+3, r22	; 0x03
	if (Copy_pFunAction!=NULL)
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	e9 f0       	breq	.+58     	; 0x10ca <TMR0_voidSetCallBack+0x56>
	{
		switch(Copy_u8InterruptSource)
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	28 2f       	mov	r18, r24
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	3d 83       	std	Y+5, r19	; 0x05
    1098:	2c 83       	std	Y+4, r18	; 0x04
    109a:	8c 81       	ldd	r24, Y+4	; 0x04
    109c:	9d 81       	ldd	r25, Y+5	; 0x05
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	91 05       	cpc	r25, r1
    10a2:	31 f0       	breq	.+12     	; 0x10b0 <TMR0_voidSetCallBack+0x3c>
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	22 30       	cpi	r18, 0x02	; 2
    10aa:	31 05       	cpc	r19, r1
    10ac:	41 f0       	breq	.+16     	; 0x10be <TMR0_voidSetCallBack+0x4a>
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <TMR0_voidSetCallBack+0x56>
		{
		case TMR0_NORMAL_OVER_FLOW:
			PRV_pFunCallBackOVF = Copy_pFunAction;
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	9a 81       	ldd	r25, Y+2	; 0x02
    10b4:	90 93 67 00 	sts	0x0067, r25
    10b8:	80 93 66 00 	sts	0x0066, r24
    10bc:	06 c0       	rjmp	.+12     	; 0x10ca <TMR0_voidSetCallBack+0x56>
			break;

		case TMR0_CTC_COMPARE_MATCH:
			PRV_pFunCallBackCTC = Copy_pFunAction;
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	90 93 69 00 	sts	0x0069, r25
    10c6:	80 93 68 00 	sts	0x0068, r24
	}
	else
	{

	}
}
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <TMR0_voidSetDelay_ms_UsingCTC>:

void TMR0_voidSetDelay_ms_UsingCTC(u16 Copy_u16Delay_ms)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <TMR0_voidSetDelay_ms_UsingCTC+0x6>
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
	//Under Condition Tick Time = 4us
	OCR0_REG = 249;
    10e8:	ec e5       	ldi	r30, 0x5C	; 92
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	89 ef       	ldi	r24, 0xF9	; 249
    10ee:	80 83       	st	Z, r24
	PRV_ctcCounter = Copy_u16Delay_ms;
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	90 93 6f 00 	sts	0x006F, r25
    10f8:	80 93 6e 00 	sts	0x006E, r24
}
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <__vector_11>:

void __vector_11 (void) __attribute__((signal));
void __vector_11 (void)
{
    1106:	1f 92       	push	r1
    1108:	0f 92       	push	r0
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	0f 92       	push	r0
    110e:	11 24       	eor	r1, r1
    1110:	2f 93       	push	r18
    1112:	3f 93       	push	r19
    1114:	4f 93       	push	r20
    1116:	5f 93       	push	r21
    1118:	6f 93       	push	r22
    111a:	7f 93       	push	r23
    111c:	8f 93       	push	r24
    111e:	9f 93       	push	r25
    1120:	af 93       	push	r26
    1122:	bf 93       	push	r27
    1124:	ef 93       	push	r30
    1126:	ff 93       	push	r31
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16OFVCounter = 0;
	Local_u16OFVCounter++;
    1130:	80 91 6a 00 	lds	r24, 0x006A
    1134:	90 91 6b 00 	lds	r25, 0x006B
    1138:	01 96       	adiw	r24, 0x01	; 1
    113a:	90 93 6b 00 	sts	0x006B, r25
    113e:	80 93 6a 00 	sts	0x006A, r24

	if(TMR0_OFV_COUNTER == Local_u16OFVCounter)
    1142:	80 91 6a 00 	lds	r24, 0x006A
    1146:	90 91 6b 00 	lds	r25, 0x006B
    114a:	23 e0       	ldi	r18, 0x03	; 3
    114c:	81 3d       	cpi	r24, 0xD1	; 209
    114e:	92 07       	cpc	r25, r18
    1150:	99 f4       	brne	.+38     	; 0x1178 <__vector_11+0x72>
	{
		//Init Counter with Preload Value
		TCNT0_REG = TMR0_PRELOAD_VALUE;
    1152:	e2 e5       	ldi	r30, 0x52	; 82
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	81 e7       	ldi	r24, 0x71	; 113
    1158:	80 83       	st	Z, r24

		//Clear Counter
		Local_u16OFVCounter = 0;
    115a:	10 92 6b 00 	sts	0x006B, r1
    115e:	10 92 6a 00 	sts	0x006A, r1

		//CALL ACTION
		if(PRV_pFunCallBackOVF!=NULL)
    1162:	80 91 66 00 	lds	r24, 0x0066
    1166:	90 91 67 00 	lds	r25, 0x0067
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	29 f0       	breq	.+10     	; 0x1178 <__vector_11+0x72>
		{
			PRV_pFunCallBackOVF();
    116e:	e0 91 66 00 	lds	r30, 0x0066
    1172:	f0 91 67 00 	lds	r31, 0x0067
    1176:	09 95       	icall
		}

	}
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <__vector_10>:

void __vector_10 (void) __attribute__((signal));
void __vector_10 (void)
{
    119e:	1f 92       	push	r1
    11a0:	0f 92       	push	r0
    11a2:	0f b6       	in	r0, 0x3f	; 63
    11a4:	0f 92       	push	r0
    11a6:	11 24       	eor	r1, r1
    11a8:	2f 93       	push	r18
    11aa:	3f 93       	push	r19
    11ac:	4f 93       	push	r20
    11ae:	5f 93       	push	r21
    11b0:	6f 93       	push	r22
    11b2:	7f 93       	push	r23
    11b4:	8f 93       	push	r24
    11b6:	9f 93       	push	r25
    11b8:	af 93       	push	r26
    11ba:	bf 93       	push	r27
    11bc:	ef 93       	push	r30
    11be:	ff 93       	push	r31
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CTCCounter = 0;
	Local_u16CTCCounter++;
    11c8:	80 91 6c 00 	lds	r24, 0x006C
    11cc:	90 91 6d 00 	lds	r25, 0x006D
    11d0:	01 96       	adiw	r24, 0x01	; 1
    11d2:	90 93 6d 00 	sts	0x006D, r25
    11d6:	80 93 6c 00 	sts	0x006C, r24

	if(PRV_ctcCounter == Local_u16CTCCounter)
    11da:	20 91 6e 00 	lds	r18, 0x006E
    11de:	30 91 6f 00 	lds	r19, 0x006F
    11e2:	80 91 6c 00 	lds	r24, 0x006C
    11e6:	90 91 6d 00 	lds	r25, 0x006D
    11ea:	28 17       	cp	r18, r24
    11ec:	39 07       	cpc	r19, r25
    11ee:	79 f4       	brne	.+30     	; 0x120e <__vector_10+0x70>
	{
		//Clear Counter
		Local_u16CTCCounter = 0;
    11f0:	10 92 6d 00 	sts	0x006D, r1
    11f4:	10 92 6c 00 	sts	0x006C, r1

		//CALL ACTION
		if(PRV_pFunCallBackCTC!=NULL)
    11f8:	80 91 68 00 	lds	r24, 0x0068
    11fc:	90 91 69 00 	lds	r25, 0x0069
    1200:	00 97       	sbiw	r24, 0x00	; 0
    1202:	29 f0       	breq	.+10     	; 0x120e <__vector_10+0x70>
		{
			PRV_pFunCallBackCTC();
    1204:	e0 91 68 00 	lds	r30, 0x0068
    1208:	f0 91 69 00 	lds	r31, 0x0069
    120c:	09 95       	icall
		}

	}
}
    120e:	cf 91       	pop	r28
    1210:	df 91       	pop	r29
    1212:	ff 91       	pop	r31
    1214:	ef 91       	pop	r30
    1216:	bf 91       	pop	r27
    1218:	af 91       	pop	r26
    121a:	9f 91       	pop	r25
    121c:	8f 91       	pop	r24
    121e:	7f 91       	pop	r23
    1220:	6f 91       	pop	r22
    1222:	5f 91       	pop	r21
    1224:	4f 91       	pop	r20
    1226:	3f 91       	pop	r19
    1228:	2f 91       	pop	r18
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	1f 90       	pop	r1
    1232:	18 95       	reti

00001234 <main>:
#include "GIE_interface.h"

void action (void);

void main(void)
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
	GIE_voidEnable();
    123c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <GIE_voidEnable>
	TMR0_voidInit();
    1240:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <TMR0_voidInit>
	//TMR0_voidSetCallBackOVF(&action);
	TMR0_voidSetCallBack(&action, TMR0_CTC_COMPARE_MATCH);
    1244:	8f e2       	ldi	r24, 0x2F	; 47
    1246:	99 e0       	ldi	r25, 0x09	; 9
    1248:	62 e0       	ldi	r22, 0x02	; 2
    124a:	0e 94 3a 08 	call	0x1074	; 0x1074 <TMR0_voidSetCallBack>
	TMR0_voidStart();
    124e:	0e 94 02 08 	call	0x1004	; 0x1004 <TMR0_voidStart>

	DIO_voidSetPinDirection(DIO_PORTA, DIO_PIN4, DIO_PIN_OUTPUT);  //LED
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	64 e0       	ldi	r22, 0x04	; 4
    1256:	41 e0       	ldi	r20, 0x01	; 1
    1258:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_voidSetPinDirection>
    125c:	ff cf       	rjmp	.-2      	; 0x125c <main+0x28>

0000125e <action>:

	}
}

void action (void)
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
	DIO_voidTogglePinValue(DIO_PORTA, DIO_PIN4);
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	64 e0       	ldi	r22, 0x04	; 4
    126a:	0e 94 4f 03 	call	0x69e	; 0x69e <DIO_voidTogglePinValue>
}
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <_exit>:
    1274:	f8 94       	cli

00001276 <__stop_program>:
    1276:	ff cf       	rjmp	.-2      	; 0x1276 <__stop_program>
